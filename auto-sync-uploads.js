const fs = require('fs');
const path = require('path');

function autoSyncUploads() {
  const sourceDir = path.join(__dirname, 'backend', 'uploads');
  const targetDir = path.join(__dirname, 'uploads');
  
  console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è uploads...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ uploads');
    }
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ backend/uploads
    const files = fs.readdirSync(sourceDir);
    let copiedCount = 0;
    
    for (const file of files) {
      if (file === 'hd' || fs.statSync(path.join(sourceDir, file)).isDirectory()) {
        continue;
      }
      
      const sourcePath = path.join(sourceDir, file);
      const targetPath = path.join(targetDir, file);
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
      if (!fs.existsSync(targetPath)) {
        try {
          fs.copyFileSync(sourcePath, targetPath);
          console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
          copiedCount++;
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${file}:`, error.message);
        }
      }
    }
    
    if (copiedCount > 0) {
      console.log(`üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${copiedCount} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`);
    } else {
      console.log('üìä –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
autoSyncUploads();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = autoSyncUploads;
