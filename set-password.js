const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');
require('dotenv').config();

const prisma = new PrismaClient();

async function setPassword() {
  try {
    const email = process.argv[2];
    const password = process.argv[3];
    
    if (!email || !password) {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node set-password.js user@example.com newpassword');
      return;
    }
    
    console.log(`üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è: ${email}`);
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: email }
    });
    
    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return;
    }
    
    console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (ID: ${user.id})`);
    console.log(`üìß Email: ${user.email}`);
    console.log(`üîë –†–æ–ª—å: ${user.role}`);
    
    // –•–µ—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
    const passwordHash = await bcrypt.hash(password, 10);
    
    // –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
    await prisma.user.update({
      where: { id: user.id },
      data: { passwordHash: passwordHash }
    });
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    console.log(`üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å:`);
    console.log(`   Email: ${email}`);
    console.log(`   Password: ${password}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setPassword();
