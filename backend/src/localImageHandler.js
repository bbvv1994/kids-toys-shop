const sharp = require('sharp');
const path = require('path');
const fs = require('fs').promises;

class LocalImageHandler {
  constructor() {
    this.maxFileSize = 10 * 1024 * 1024; // 10MB
    this.supportedFormats = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    
    // –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.uploadsDir = path.join(__dirname, '..', 'uploads');
    this.hdDir = path.join(__dirname, '..', 'uploads', 'hd');
    
    this.ensureDirectories();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
   */
  async ensureDirectories() {
    try {
      await fs.mkdir(this.uploadsDir, { recursive: true });
      await fs.mkdir(this.hdDir, { recursive: true });
    } catch (error) {
      console.error('‚ùå LocalImageHandler: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫:', error.message);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  isImageFile(filename) {
    if (!filename) return false;
    const ext = path.extname(filename).toLowerCase();
    return this.supportedFormats.includes(ext);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç HD-–≤–µ—Ä—Å–∏–∏
   */
  async processImageFromBuffer(buffer, originalName) {
    try {
      console.log(`üñºÔ∏è LocalImageHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${originalName}`);
      console.log(`üñºÔ∏è LocalImageHandler: –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: ${buffer.length} bytes`);
      
      // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const baseFilename = `${timestamp}-${randomString}`;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –≤–µ–±
      const processedBuffer = await sharp(buffer)
        .resize(600, 600, { 
          fit: 'inside',
          withoutEnlargement: true 
        })
        .webp({ 
          quality: 70,
          effort: 3 
        })
        .toBuffer();

      // –°–æ–∑–¥–∞–µ–º HD-–≤–µ—Ä—Å–∏–∏
      const hdVersions = await this.createHdVersions(buffer, baseFilename);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
      const normalFilename = `${baseFilename}.webp`;
      const normalPath = path.join(this.uploadsDir, normalFilename);
      await fs.writeFile(normalPath, processedBuffer);

      const originalSize = buffer.length;
      const processedSize = processedBuffer.length;
      const compressionRatio = ((originalSize - processedSize) / originalSize * 100).toFixed(1);

      console.log(`‚úÖ ${originalName} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${(originalSize / 1024).toFixed(1)}KB -> ${(processedSize / 1024).toFixed(1)}KB`);
      console.log(`   –°–∂–∞—Ç–∏–µ: ${compressionRatio}%`);
      console.log(`   HD-–≤–µ—Ä—Å–∏–∏: ${Object.keys(hdVersions).length} —Å–æ–∑–¥–∞–Ω–æ`);

      return {
        success: true,
        filename: normalFilename,
        url: `/uploads/${normalFilename}`,
        originalSize,
        processedSize,
        compressionRatio: parseFloat(compressionRatio),
        mimetype: 'image/webp',
        hdVersions
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${originalName}:`, error.message);
      return {
        success: false,
        error: error.message,
        originalName
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HD-–≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async createHdVersions(buffer, baseFilename) {
    try {
      console.log(`üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ HD-–≤–µ—Ä—Å–∏–π –¥–ª—è: ${baseFilename}`);
      
      const hdVersions = {};
      
      // HD @2x –≤–µ—Ä—Å–∏—è (1200x1200)
      try {
        const hd2xBuffer = await sharp(buffer)
          .resize(1200, 1200, { 
            fit: 'inside',
            withoutEnlargement: true 
          })
          .webp({ 
            quality: 85,
            effort: 4 
          })
          .toBuffer();

        const hd2xFilename = `${baseFilename}@2x.webp`;
        const hd2xPath = path.join(this.hdDir, hd2xFilename);
        await fs.writeFile(hd2xPath, hd2xBuffer);
        
        hdVersions.hd2x = {
          filename: hd2xFilename,
          url: `/uploads/hd/${hd2xFilename}`,
          size: '1200x1200'
        };
        
        console.log(`‚úÖ HD @2x —Å–æ–∑–¥–∞–Ω–æ: ${hd2xFilename}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HD @2x:`, error.message);
      }

      // HD @4x –≤–µ—Ä—Å–∏—è (2400x2400)
      try {
        const hd4xBuffer = await sharp(buffer)
          .resize(2400, 2400, { 
            fit: 'inside',
            withoutEnlargement: true 
          })
          .webp({ 
            quality: 90,
            effort: 5 
          })
          .toBuffer();

        const hd4xFilename = `${baseFilename}@4x.webp`;
        const hd4xPath = path.join(this.hdDir, hd4xFilename);
        await fs.writeFile(hd4xPath, hd4xBuffer);
        
        hdVersions.hd4x = {
          filename: hd4xFilename,
          url: `/uploads/hd/${hd4xFilename}`,
          size: '2400x2400'
        };
        
        console.log(`‚úÖ HD @4x —Å–æ–∑–¥–∞–Ω–æ: ${hd4xFilename}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HD @4x:`, error.message);
      }

      return hdVersions;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HD-–≤–µ—Ä—Å–∏–π –¥–ª—è ${baseFilename}:`, error.message);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç HD-–≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
   */
  getHdImageUrl(originalUrl, quality = '2x') {
    try {
      if (!originalUrl) return '';
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º HD-URL
      if (originalUrl.startsWith('/uploads/') && !originalUrl.includes('@')) {
        const filename = path.basename(originalUrl, path.extname(originalUrl));
        const hdFilename = quality === '4x' ? `${filename}@4x.webp` : `${filename}@2x.webp`;
        const hdUrl = `/uploads/hd/${hdFilename}`;
        
        console.log(`üîß –õ–æ–∫–∞–ª—å–Ω–∞—è HD ${quality} –≤–µ—Ä—Å–∏—è:`, hdUrl);
        return hdUrl;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ Cloudinary URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      if (originalUrl.includes('cloudinary.com')) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è Cloudinary, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        console.log('üîß Cloudinary URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª');
        return originalUrl;
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
      console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return originalUrl;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HD URL:', error.message);
      return originalUrl;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async processMultipleImages(files) {
    const results = [];
    
    for (const file of files) {
      if (this.isImageFile(file.originalname)) {
        const result = await this.processImageFromBuffer(file.buffer, file.originalname);
        results.push(result);
      } else {
        // –î–ª—è –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const filename = `${Date.now()}-${Math.random().toString(36).substring(2)}${path.extname(file.originalname)}`;
        const filePath = path.join(this.uploadsDir, filename);
        
        try {
          await fs.writeFile(filePath, file.buffer);
          results.push({
            success: true,
            filename,
            url: `/uploads/${filename}`,
            originalSize: file.buffer.length,
            processedSize: file.buffer.length,
            compressionRatio: 0,
            mimetype: file.mimetype,
            hdVersions: {}
          });
        } catch (error) {
          results.push({
            success: false,
            error: error.message,
            originalName: file.originalname
          });
        }
      }
    }

    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
   */
  checkFileSizes(files) {
    const errors = [];
    
    for (const file of files) {
      if (file.size > this.maxFileSize) {
        errors.push(`–§–∞–π–ª ${file.originalname} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(file.size / 1024 / 1024).toFixed(1)}MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.maxFileSize / 1024 / 1024}MB`);
      }
    }

    return errors;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –µ–≥–æ HD-–≤–µ—Ä—Å–∏–∏
   */
  async deleteImage(imageUrl) {
    try {
      if (!imageUrl || !imageUrl.startsWith('/uploads/')) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' };
      }

      const filename = path.basename(imageUrl);
      const baseFilename = filename.replace(/\.[^/.]+$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      
      // –£–¥–∞–ª—è–µ–º –æ–±—ã—á–Ω—É—é –≤–µ—Ä—Å–∏—é
      const normalPath = path.join(this.uploadsDir, filename);
      try {
        await fs.unlink(normalPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${filename}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
      }

      // –£–¥–∞–ª—è–µ–º HD-–≤–µ—Ä—Å–∏–∏
      const hd2xPath = path.join(this.hdDir, `${baseFilename}@2x.webp`);
      const hd4xPath = path.join(this.hdDir, `${baseFilename}@4x.webp`);

      try {
        await fs.unlink(hd2xPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ HD @2x: ${baseFilename}@2x.webp`);
      } catch (error) {
        // HD-–≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      }

      try {
        await fs.unlink(hd4xPath);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ HD @4x: ${baseFilename}@4x.webp`);
      } catch (error) {
        // HD-–≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
      }

      return { success: true };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HD-–≤–µ—Ä—Å–∏—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async getHdImageInfo(imageUrl) {
    try {
      if (!imageUrl || !imageUrl.startsWith('/uploads/')) {
        return null;
      }

      const filename = path.basename(imageUrl);
      const baseFilename = filename.replace(/\.[^/.]+$/, '');
      
      const hd2xPath = path.join(this.hdDir, `${baseFilename}@2x.webp`);
      const hd4xPath = path.join(this.hdDir, `${baseFilename}@4x.webp`);

      const hd2xExists = await fs.access(hd2xPath).then(() => true).catch(() => false);
      const hd4xExists = await fs.access(hd4xPath).then(() => true).catch(() => false);

      return {
        original: imageUrl,
        hd2x: hd2xExists ? `/uploads/hd/${baseFilename}@2x.webp` : null,
        hd4x: hd4xExists ? `/uploads/hd/${baseFilename}@4x.webp` : null,
        hasHdVersions: hd2xExists || hd4xExists
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HD-–≤–µ—Ä—Å–∏—è—Ö:', error.message);
      return null;
    }
  }
}

module.exports = LocalImageHandler;
