const ImageProcessor = require('./imageProcessor');
const fs = require('fs');
const path = require('path');
const { PrismaClient } = require('@prisma/client');

class BatchImageProcessor {
  constructor() {
    this.imageProcessor = new ImageProcessor();
    this.prisma = new PrismaClient();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async processAllProductImages() {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
      
      const products = await this.prisma.product.findMany({
        where: {
          imageUrls: {
            isEmpty: false
          }
        },
        select: {
          id: true,
          name: true,
          imageUrls: true
        }
      });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);

      let totalProcessed = 0;
      let totalSaved = 0;
      let errors = [];

      for (const product of products) {
        console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: ${product.name} (ID: ${product.id})`);
        
        if (!product.imageUrls || product.imageUrls.length === 0) {
          console.log('  ‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
          continue;
        }

        const updatedImageUrls = [];
        let productSaved = 0;

        for (const imageUrl of product.imageUrls) {
          const filePath = path.join(__dirname, '..', imageUrl);
          
          if (!fs.existsSync(filePath)) {
            console.log(`  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imageUrl}`);
            updatedImageUrls.push(imageUrl); // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            continue;
          }

          const stats = fs.statSync(filePath);
          const originalSize = stats.size;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ WebP
          if (path.extname(filePath).toLowerCase() === '.webp') {
            console.log(`  ‚úÖ –£–∂–µ WebP: ${path.basename(filePath)}`);
            updatedImageUrls.push(imageUrl);
            continue;
          }

          console.log(`  üñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞: ${path.basename(filePath)} (${(originalSize / 1024).toFixed(1)}KB)`);

          const result = await this.imageProcessor.processImage(filePath, filePath.replace(/\.[^.]+$/, '.webp'));

          if (result.success) {
            try {
              // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
              fs.unlinkSync(filePath);
              fs.renameSync(filePath.replace(/\.[^.]+$/, '.webp'), filePath);
              
              const newImageUrl = imageUrl.replace(/\.[^.]+$/, '.webp');
              updatedImageUrls.push(newImageUrl);
              
              const saved = originalSize - result.processedSize;
              productSaved += saved;
              
              console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${(result.processedSize / 1024).toFixed(1)}KB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${(saved / 1024).toFixed(1)}KB)`);
            } catch (error) {
              console.log(`  ‚ö†Ô∏è  –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: ${path.basename(filePath)}`);
              updatedImageUrls.push(imageUrl);
              errors.push({ product: product.name, image: imageUrl, error: 'File is locked' });
            }
          } else {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
            errors.push({ product: product.name, image: imageUrl, error: result.error });
            updatedImageUrls.push(imageUrl); // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
          await this.prisma.product.update({
            where: { id: product.id },
            data: { imageUrls: updatedImageUrls }
          });
          
          totalProcessed++;
          totalSaved += productSaved;
          
          console.log(`  üíæ –û–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î, —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${(productSaved / 1024).toFixed(1)}KB`);
        } catch (error) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: ${error.message}`);
          errors.push({ product: product.name, error: 'Database update failed' });
        }
      }

      console.log('\nüìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò:');
      console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProcessed}`);
      console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω: ${(totalSaved / 1024 / 1024).toFixed(2)}MB`);
      console.log(`   –û—à–∏–±–æ–∫: ${errors.length}`);

      if (errors.length > 0) {
        console.log('\n‚ùå –û–®–ò–ë–ö–ò:');
        errors.forEach(error => {
          console.log(`   - ${error.product}: ${error.error}`);
        });
      }

      return { totalProcessed, totalSaved, errors };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async processCategoryImages() {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
      
      const categories = await this.prisma.category.findMany({
        where: {
          image: {
            not: null
          }
        },
        select: {
          id: true,
          name: true,
          image: true
        }
      });

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);

      let totalProcessed = 0;
      let totalSaved = 0;
      let errors = [];

      for (const category of categories) {
        console.log(`\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name} (ID: ${category.id})`);
        
        const filePath = path.join(__dirname, '..', 'uploads', category.image);
        
        if (!fs.existsSync(filePath)) {
          console.log(`  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${category.image}`);
          continue;
        }

        const stats = fs.statSync(filePath);
        const originalSize = stats.size;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —É–∂–µ WebP
        if (path.extname(filePath).toLowerCase() === '.webp') {
          console.log(`  ‚úÖ –£–∂–µ WebP: ${category.image}`);
          continue;
        }

        console.log(`  üñºÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞: ${category.image} (${(originalSize / 1024).toFixed(1)}KB)`);

        const result = await this.imageProcessor.processImage(filePath, filePath.replace(/\.[^.]+$/, '.webp'));

        if (result.success) {
          // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
          fs.unlinkSync(filePath);
          fs.renameSync(filePath.replace(/\.[^.]+$/, '.webp'), filePath);
          
          const newImageName = category.image.replace(/\.[^.]+$/, '.webp');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await this.prisma.category.update({
            where: { id: category.id },
            data: { image: newImageName }
          });
          
          const saved = originalSize - result.processedSize;
          totalSaved += saved;
          totalProcessed++;
          
          console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${(result.processedSize / 1024).toFixed(1)}KB (—Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${(saved / 1024).toFixed(1)}KB)`);
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
          errors.push({ category: category.name, image: category.image, error: result.error });
        }
      }

      console.log('\nüìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô:');
      console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${totalProcessed}`);
      console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω: ${(totalSaved / 1024 / 1024).toFixed(2)}MB`);
      console.log(`   –û—à–∏–±–æ–∫: ${errors.length}`);

      return { totalProcessed, totalSaved, errors };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
   */
  async getImageStats() {
    try {
      const products = await this.prisma.product.findMany({
        where: {
          imageUrls: {
            isEmpty: false
          }
        },
        select: {
          imageUrls: true
        }
      });

      const categories = await this.prisma.category.findMany({
        where: {
          image: {
            not: null
          }
        },
        select: {
          image: true
        }
      });

      let totalImages = 0;
      let totalSize = 0;
      let webpCount = 0;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      for (const product of products) {
        for (const imageUrl of product.imageUrls) {
          const filePath = path.join(__dirname, '..', imageUrl);
          if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            totalSize += stats.size;
            totalImages++;
            if (path.extname(filePath).toLowerCase() === '.webp') {
              webpCount++;
            }
          }
        }
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      for (const category of categories) {
        const filePath = path.join(__dirname, '..', 'uploads', category.image);
        if (fs.existsSync(filePath)) {
          const stats = fs.statSync(filePath);
          totalSize += stats.size;
          totalImages++;
          if (path.extname(filePath).toLowerCase() === '.webp') {
            webpCount++;
          }
        }
      }

      return {
        totalImages,
        totalSize: totalSize,
        totalSizeMB: (totalSize / 1024 / 1024).toFixed(2),
        webpCount,
        otherFormatCount: totalImages - webpCount,
        webpPercentage: totalImages > 0 ? ((webpCount / totalImages) * 100).toFixed(1) : 0
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }
}

module.exports = BatchImageProcessor; 