const DualStorageImageHandler = require('./dualStorageImageHandler');

class DualStorageUploadMiddleware {
  constructor() {
    this.imageHandler = new DualStorageImageHandler();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   */
  async processUploadedFiles(req, res, next) {
    try {
      console.log('üñºÔ∏è DualStorageUploadMiddleware: processUploadedFiles –≤—ã–∑–≤–∞–Ω');
      console.log('üñºÔ∏è DualStorageUploadMiddleware: req.files =', req.files ? req.files.length : 'undefined');
      
      if (!req.files || req.files.length === 0) {
        console.log('üñºÔ∏è DualStorageUploadMiddleware: –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return next();
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const configInfo = this.imageHandler.getConfigInfo();
      console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DualStorage:', configInfo);

      console.log(`üñºÔ∏è DualStorageUploadMiddleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${req.files.length} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
      const sizeErrors = this.imageHandler.checkFileSizes(req.files);
      if (sizeErrors.length > 0) {
        return res.status(400).json({ 
          error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', 
          details: sizeErrors 
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      const results = await this.imageHandler.processMultipleImages(req.files);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrls = [];
      const processedFiles = [];
      const storageInfo = [];

      for (const result of results) {
        if (result.success) {
          const fileInfo = {
            filename: result.filename,
            originalName: result.originalName || 'unknown',
            size: result.processedSize,
            mimetype: result.mimetype,
            url: result.url, // –û—Å–Ω–æ–≤–Ω–æ–π URL (–æ–±—ã—á–Ω–æ Cloudinary)
            originalSize: result.originalSize,
            compressionRatio: result.compressionRatio,
            processedBy: result.processedBy || 'dual_storage',
            environment: result.environment || 'production',
            storage: result.storage || {}
          };
          
          processedFiles.push(fileInfo);
          imageUrls.push(result.url);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö
          if (result.storage) {
            storageInfo.push({
              primary: result.storage.primary,
              fallback: result.storage.fallback,
              cloudinaryUrl: result.storage.cloudinaryUrl,
              localUrl: result.storage.localUrl
            });
          }
          
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.filename} -> ${result.url}`);
          console.log(`   –û–±—Ä–∞–±–æ—Ç—á–∏–∫: ${result.processedBy || 'dual_storage'}`);
          console.log(`   –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${result.storage?.primary || 'unknown'}`);
          console.log(`   –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${result.storage?.fallback || 'none'}`);
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.originalName} - ${result.error}`);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ request
      req.imageUrls = imageUrls;
      req.processedFiles = processedFiles;
      req.storageInfo = storageInfo;
      req.imageProcessingConfig = configInfo;

      console.log(`‚úÖ DualStorageUploadMiddleware: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${imageUrls.length} —Ñ–∞–π–ª–æ–≤`);
      console.log(`   –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: Cloudinary`);
      console.log(`   –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –õ–æ–∫–∞–ª—å–Ω–æ–µ (—Å–∂–∞—Ç–æ–µ)`);
      next();

    } catch (error) {
      console.error('‚ùå DualStorageUploadMiddleware error:', error);
      res.status(500).json({ 
        error: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å', 
        details: error.message 
      });
    }
  }

  /**
   * Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  async deleteOldImages(req, res, next) {
    try {
      const { oldImageUrls } = req.body;
      
      if (!oldImageUrls || !Array.isArray(oldImageUrls)) {
        return next();
      }

      console.log(`üóëÔ∏è DualStorageUploadMiddleware: –£–¥–∞–ª–µ–Ω–∏–µ ${oldImageUrls.length} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);

      const deletePromises = oldImageUrls.map(async (imageUrl) => {
        return await this.imageHandler.deleteImage(imageUrl);
      });

      const results = await Promise.all(deletePromises);
      const successCount = results.filter(r => r.success).length;
      
      console.log(`‚úÖ DualStorageUploadMiddleware: –£–¥–∞–ª–µ–Ω–æ ${successCount}/${oldImageUrls.length} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      next();

    } catch (error) {
      console.error('‚ùå DualStorageUploadMiddleware deleteOldImages error:', error);
      next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    }
  }

  /**
   * Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  async getConfigInfo(req, res, next) {
    try {
      const configInfo = this.imageHandler.getConfigInfo();
      
      res.json({
        success: true,
        data: configInfo,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå DualStorageUploadMiddleware getConfigInfo error:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
      });
    }
  }

  /**
   * Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â
   */
  async getStorageStats(req, res, next) {
    try {
      const configInfo = this.imageHandler.getConfigInfo();
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const stats = {
        cloudinary: {
          enabled: configInfo.cloudinaryHandler,
          configured: configInfo.cloudinaryConfigured
        },
        local: {
          enabled: configInfo.localHandler
        },
        mode: 'dual_storage'
      };
      
      res.json({
        success: true,
        data: stats,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå DualStorageUploadMiddleware getStorageStats error:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â'
      });
    }
  }
}

module.exports = DualStorageUploadMiddleware;

