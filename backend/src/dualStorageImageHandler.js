const LocalImageHandler = require('./localImageHandler');
const CloudinaryImageHandler = require('./cloudinaryImageHandler');

class DualStorageImageHandler {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    this.localHandler = new LocalImageHandler();
    this.cloudinaryHandler = null;
    
    // –°–æ–∑–¥–∞–µ–º Cloudinary handler —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (process.env.CLOUDINARY_CLOUD_NAME) {
      try {
        this.cloudinaryHandler = new CloudinaryImageHandler();
        console.log('‚úÖ DualStorage: Cloudinary handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.warn('‚ö†Ô∏è DualStorage: Cloudinary handler –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è DualStorage: CLOUDINARY_CLOUD_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω, Cloudinary –æ—Ç–∫–ª—é—á–µ–Ω');
    }
    
    console.log('üîß DualStorageImageHandler: –†–µ–∂–∏–º –¥–≤–æ–π–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    console.log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${this.localHandler ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Cloudinary –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${this.cloudinaryHandler ? '‚úÖ' : '‚ùå'}`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (Cloudinary + –ª–æ–∫–∞–ª—å–Ω–æ)
   * –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Cloudinary
   */
  async processImageFromBuffer(buffer, originalName) {
    console.log(`üñºÔ∏è DualStorage: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${originalName} —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º...`);
    
    const results = {
      cloudinary: null,
      local: null
    };

    // 1. –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤ (–≤ —Å–∂–∞—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–µ)
    try {
      console.log('üíæ DualStorage: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      
      // –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
      const compressedBuffer = await this.createCompressedVersion(buffer, originalName);
      results.local = await this.localHandler.processImageFromBuffer(compressedBuffer, originalName);
      
      if (results.local.success) {
        console.log('‚úÖ DualStorage: –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.warn('‚ö†Ô∏è DualStorage: –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞:', results.local.error);
      }
    } catch (error) {
      console.error('‚ùå DualStorage: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
      results.local = { success: false, error: error.message };
    }

    // 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Cloudinary (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
    if (this.cloudinaryHandler) {
      try {
        console.log('‚òÅÔ∏è DualStorage: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Cloudinary...');
        results.cloudinary = await this.cloudinaryHandler.processImageFromBuffer(buffer, originalName);
        
        if (results.cloudinary.success) {
          console.log('‚úÖ DualStorage: Cloudinary —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
          
          // Cloudinary —É—Å–ø–µ—à–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–µ
          const result = {
            ...results.cloudinary,
            processedBy: 'DUAL_STORAGE',
            environment: 'production',
            storage: {
              primary: 'cloudinary',
              fallback: results.local && results.local.success ? 'local' : null,
              cloudinaryUrl: results.cloudinary.url,
              localUrl: results.local && results.local.success ? results.local.url : null
            }
          };
          
          console.log(`‚úÖ DualStorage: –û—Å–Ω–æ–≤–Ω–æ–π URL (Cloudinary): ${result.url}`);
          if (result.storage.localUrl) {
            console.log(`üíæ DualStorage: –†–µ–∑–µ—Ä–≤–Ω—ã–π URL (–ª–æ–∫–∞–ª—å–Ω—ã–π): ${result.storage.localUrl}`);
          }
          
          return result;
        } else {
          console.warn('‚ö†Ô∏è DualStorage: Cloudinary —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', results.cloudinary.error);
        }
      } catch (error) {
        console.error('‚ùå DualStorage: –û—à–∏–±–∫–∞ Cloudinary:', error.message);
        results.cloudinary = { success: false, error: error.message };
      }
    }

    // 3. –ï—Å–ª–∏ Cloudinary –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
    if (results.local && results.local.success) {
      console.log('üîÑ DualStorage: Cloudinary –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
      
      const result = {
        ...results.local,
        processedBy: 'DUAL_STORAGE_FALLBACK',
        environment: 'production',
        storage: {
          primary: 'local',
          fallback: null,
          cloudinaryUrl: null,
          localUrl: results.local.url
        }
      };
      
      console.log(`üíæ DualStorage: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é: ${result.url}`);
      return result;
    } else {
      // –ù–∏ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏ –≤ Cloudinary, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ',
        originalName,
        details: {
          cloudinary: results.cloudinary,
          local: results.local
        }
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async createCompressedVersion(buffer, originalName) {
    const sharp = require('sharp');
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—É—é –≤–µ—Ä—Å–∏—é (–∫–∞—á–µ—Å—Ç–≤–æ 70%, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 1200px)
      const compressedBuffer = await sharp(buffer)
        .resize(1200, null, { 
          withoutEnlargement: true,
          fit: 'inside'
        })
        .jpeg({ 
          quality: 70,
          progressive: true
        })
        .toBuffer();
      
      console.log(`üì¶ DualStorage: –°–∂–∞—Ç–∏–µ ${originalName}: ${buffer.length} -> ${compressedBuffer.length} –±–∞–π—Ç`);
      return compressedBuffer;
    } catch (error) {
      console.warn('‚ö†Ô∏è DualStorage: –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error.message);
      return buffer;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   */
  async processMultipleImages(files) {
    console.log(`üñºÔ∏è DualStorage: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${files.length} —Ñ–∞–π–ª–æ–≤ —Å –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º...`);
    
    const results = [];
    
    for (const file of files) {
      if (this.isImageFile(file.originalname)) {
        const result = await this.processImageFromBuffer(file.buffer, file.originalname);
        results.push(result);
      } else {
        // –î–ª—è –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        results.push({
          success: false,
          error: '–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
          originalName: file.originalname
        });
      }
    }
    
    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  isImageFile(filename) {
    const supportedFormats = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    const ext = require('path').extname(filename).toLowerCase();
    return supportedFormats.includes(ext);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
   */
  checkFileSizes(files) {
    const errors = [];
    const maxFileSize = 50 * 1024 * 1024; // 50MB
    
    for (const file of files) {
      if (file.size > maxFileSize) {
        errors.push(`–§–∞–π–ª ${file.originalname} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${(file.size / 1024 / 1024).toFixed(2)}MB (–º–∞–∫—Å–∏–º—É–º 50MB)`);
      }
    }
    
    return errors;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–±–æ–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
   */
  async deleteImage(imageUrl) {
    console.log(`üóëÔ∏è DualStorage: –£–¥–∞–ª–µ–Ω–∏–µ ${imageUrl} –∏–∑ –æ–±–æ–∏—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â...`);
    
    const results = {
      cloudinary: { success: false },
      local: { success: false }
    };

    // –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary
    if (this.cloudinaryHandler && imageUrl.includes('cloudinary.com')) {
      try {
        results.cloudinary = await this.cloudinaryHandler.deleteImage(imageUrl);
        console.log(`‚òÅÔ∏è DualStorage: Cloudinary —É–¥–∞–ª–µ–Ω–∏–µ: ${results.cloudinary.success ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`);
      } catch (error) {
        console.error('‚ùå DualStorage: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary:', error.message);
      }
    }

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if (imageUrl.startsWith('/uploads/')) {
      try {
        results.local = await this.localHandler.deleteImage(imageUrl);
        console.log(`üíæ DualStorage: –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ: ${results.local.success ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ —É–¥–∞–ª–æ—Å—å'}`);
      } catch (error) {
        console.error('‚ùå DualStorage: –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è:', error.message);
      }
    }

    return {
      success: results.cloudinary.success || results.local.success,
      details: results
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfigInfo() {
    return {
      environment: 'production',
      mode: 'dual_storage',
      localHandler: !!this.localHandler,
      cloudinaryHandler: !!this.cloudinaryHandler,
      activeHandler: 'dual_storage',
      cloudinaryConfigured: !!process.env.CLOUDINARY_CLOUD_NAME,
      description: '–î–≤–æ–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: Cloudinary (–æ—Å–Ω–æ–≤–Ω–æ–µ) + –ª–æ–∫–∞–ª—å–Ω–æ–µ (—Ä–µ–∑–µ—Ä–≤)'
    };
  }
}

module.exports = DualStorageImageHandler;
