const express = require('express');
const cors = require('cors');
const { PrismaClient } = require('@prisma/client');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const SibApiV3Sdk = require('sib-api-v3-sdk');
const TelegramBot = require('node-telegram-bot-api');
const ImageMiddleware = require('./imageMiddleware');
const BatchImageProcessor = require('./batchImageProcessor');
const ProductionUploadMiddleware = require('./productionUploadMiddleware');
const CloudinaryUploadMiddleware = require('./cloudinaryUploadMiddleware');
const FlexibleUploadMiddleware = require('./flexibleUploadMiddleware');
const SmartImageUploadMiddleware = require('./smartImageUploadMiddleware');
const TranslationService = require('./services/translationService');
const SafeMigration = require('../safe-migration');

// –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä ImageMiddleware –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
const imageMiddleware = new ImageMiddleware();
const productionUploadMiddleware = new ProductionUploadMiddleware();
const cloudinaryUploadMiddleware = new CloudinaryUploadMiddleware();
const flexibleUploadMiddleware = new FlexibleUploadMiddleware();
const smartImageUploadMiddleware = new SmartImageUploadMiddleware();
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Brevo
// Brevo API initialization
let apiInstance = null;
console.log('Initializing Brevo API...');
console.log('BREVO_API_KEY exists:', !!process.env.BREVO_API_KEY);
if (process.env.BREVO_API_KEY) {
  try {
    console.log('Creating Brevo API client...');
    const apiClient = new SibApiV3Sdk.ApiClient();
    console.log('Setting API key...');
    apiClient.authentications['api-key'].apiKey = process.env.BREVO_API_KEY;
    console.log('Creating TransactionalEmailsApi instance...');
    apiInstance = new SibApiV3Sdk.TransactionalEmailsApi(apiClient);
    console.log('Brevo API initialized successfully');
  } catch (error) {
    console.error('Error initializing Brevo API:', error);
    apiInstance = null;
  }
} else {
  console.log('BREVO_API_KEY not found in environment variables');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
let telegramBot = null;
if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
  try {
    telegramBot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
    console.log('Telegram bot initialized successfully');
  } catch (error) {
    console.error('Error initializing Telegram bot:', error);
    telegramBot = null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message) {
  try {
    console.log('üîç Telegram notification function called');
    console.log('üì± Telegram bot exists:', !!telegramBot);
    console.log('üîë TELEGRAM_BOT_TOKEN exists:', !!process.env.TELEGRAM_BOT_TOKEN);
    console.log('üí¨ TELEGRAM_CHAT_ID exists:', !!process.env.TELEGRAM_CHAT_ID);
    console.log('üë• TELEGRAM_CHAT_IDS exists:', !!process.env.TELEGRAM_CHAT_IDS);
    console.log('üìù Message to send:', message.substring(0, 100) + '...');
    
    if (!telegramBot) {
      console.log('‚ùå Telegram bot not configured, skipping notification');
      return true;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Chat ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    let chatIds = [];
    
    if (process.env.TELEGRAM_CHAT_IDS) {
      console.log('üìã Using TELEGRAM_CHAT_IDS:', process.env.TELEGRAM_CHAT_IDS);
      chatIds = process.env.TELEGRAM_CHAT_IDS.split(',').map(id => id.trim());
    } else if (process.env.TELEGRAM_CHAT_ID) {
      console.log('üìã Using TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID);
      chatIds = [process.env.TELEGRAM_CHAT_ID];
    }
    
    console.log('üéØ Chat IDs to send to:', chatIds);
    
    if (chatIds.length === 0) {
      console.log('‚ùå No Telegram chat IDs configured, skipping notification');
      console.log('üí° Available environment variables:');
      console.log('   - TELEGRAM_CHAT_ID:', process.env.TELEGRAM_CHAT_ID);
      console.log('   - TELEGRAM_CHAT_IDS:', process.env.TELEGRAM_CHAT_IDS);
      return true;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const sendPromises = chatIds.map(chatId => 
      telegramBot.sendMessage(chatId, message, { parse_mode: 'HTML' })
        .then(() => {
          console.log(`‚úÖ Telegram notification sent successfully to chat ID: ${chatId}`);
          return true;
        })
        .catch(error => {
          console.error(`‚ùå Error sending Telegram notification to chat ID ${chatId}:`, error.message);
          return false;
        })
    );
    
    const results = await Promise.allSettled(sendPromises);
    const successCount = results.filter(result => result.status === 'fulfilled' && result.value).length;
    
    console.log(`üìä Telegram notifications summary: ${successCount}/${chatIds.length} successful`);
    return successCount > 0;
  } catch (error) {
    console.error('üí• Error in sendTelegramNotification function:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞
function getStoreAddress(pickupStore) {
  const storeAddresses = {
    'store1': '◊®◊ï◊ë◊®◊ò ◊°◊ï◊ú◊ì 8 ◊ß◊®◊ô◊ô◊™ ◊ô◊ù',
    'store2': '◊ï◊ô◊¶◊û◊ü 6 ◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü'
  };
  return storeAddresses[pickupStore] || '◊õ◊™◊ï◊ë◊™ ◊ú◊ê ◊¶◊ï◊ô◊†◊î';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ
function getStoreInfo(pickupStore) {
  const storeInfo = {
    'store1': { name: '◊ó◊†◊ï◊™ ◊ß◊®◊ô◊ô◊™ ◊ô◊ù', address: '◊®◊ï◊ë◊®◊ò ◊°◊ï◊ú◊ì 8 ◊ß◊®◊ô◊ô◊™ ◊ô◊ù' },
    'store2': { name: '◊ó◊†◊ï◊™ ◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü', address: '◊ï◊ô◊¶◊û◊ü 6 ◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü' }
  };
  return storeInfo[pickupStore] || { name: '◊ó◊†◊ï◊™ ◊ú◊ê ◊†◊û◊¶◊ê◊î', address: '◊õ◊™◊ï◊ë◊™ ◊ú◊ê ◊¶◊ï◊ô◊†◊î' };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function getTranslationFields() {
  try {
    const tableInfo = await prisma.$queryRaw`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'Product' 
      AND column_name IN ('nameHe', 'descriptionHe')
    `;
    return tableInfo.map(col => col.column_name);
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ Brevo
async function sendEmail(to, subject, htmlContent) {
  try {
    console.log('sendEmail called with:', { to, subject, hasHtmlContent: !!htmlContent });
    console.log('BREVO_API_KEY exists:', !!process.env.BREVO_API_KEY);
    console.log('apiInstance exists:', !!apiInstance);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ –∏–ª–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (!process.env.BREVO_API_KEY || !apiInstance) {
      console.log('Brevo API not configured, skipping email send');
      return true;
    }
    
    const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();
    sendSmtpEmail.to = [{ email: to }];
    sendSmtpEmail.subject = subject;
    sendSmtpEmail.htmlContent = htmlContent;
    sendSmtpEmail.sender = { 
      name: 'Kids Toys Shop', 
      email: 'wexkwasexort@gmail.com' 
    };
    
    console.log('Sending email with sender:', sendSmtpEmail.sender);
    console.log('Email to:', to);
    console.log('Email subject:', subject);

    const result = await apiInstance.sendTransacEmail(sendSmtpEmail);
    console.log('Email sent successfully:', result);
    return true;
  } catch (error) {
    console.error('Error sending email:', error);
    return false;
  }
}


const app = express();
const prisma = new PrismaClient();

prisma.$connect()
  .then(() => {})
  .catch((err) => {
    console.error('Prisma failed to connect:', err);
    process.exit(1);
  });

const PORT = process.env.PORT || 5001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è production –∏ development
let storage;
let upload;

// –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö
upload = multer({ 
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB limit
  }
});

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads');
}

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const corsOptions = {
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, Postman)
    if (!origin) return callback(null, true);
    
    const allowedOrigins = [
      'http://localhost:3000',
      'http://localhost:3002',
      'http://192.168.31.156:3000',
      'http://192.168.31.156',
      'http://192.168.31.103:3000',
      'http://192.168.31.103:3001',
      'http://192.168.31.103',
      'https://kids-toys-shop.vercel.app',
      'https://kids-toys-shop-git-main-bbvv1994.vercel.app',
      'https://kids-toys-shop-bbvv1994.vercel.app'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (allowedOrigins.includes(origin)) {
      console.log('‚úÖ CORS allowed origin:', origin);
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    if (origin.includes('192.168.') || origin.includes('10.') || origin.includes('172.')) {
      console.log('‚úÖ CORS allowed local network origin:', origin);
      return callback(null, true);
    }
    
    // –í production —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ Vercel –∏ Render –¥–æ–º–µ–Ω—ã
    if (process.env.NODE_ENV === 'production' && 
        (origin.includes('vercel.app') || origin.includes('onrender.com'))) {
      console.log('‚úÖ CORS allowed production origin:', origin);
      return callback(null, true);
    }
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ Vercel –¥–æ–º–µ–Ω—ã (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    if (origin.includes('vercel.app')) {
      console.log('‚úÖ CORS allowed Vercel origin:', origin);
      return callback(null, true);
    }
    
    console.log('‚ùå CORS blocked origin:', origin);
    return callback(new Error('Not allowed by CORS'));
  },
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ UTF-8
app.use((req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  next();
});
app.use('/uploads', express.static(path.join(__dirname, '..', '..', 'uploads')));
app.use('/uploads/hd', express.static(path.join(__dirname, '..', '..', 'uploads', 'hd')));
app.use('/public', express.static(path.join(__dirname, '..', 'public')));

app.use(passport.initialize());

passport.serializeUser((user, done) => {
  done(null, user.id);
});
passport.deserializeUser(async (id, done) => {
  const user = await prisma.user.findUnique({ where: { id } });
  done(null, user);
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    database: 'connected'
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/api/test-static', (req, res) => {
  const fs = require('fs');
  const path = require('path');
  
  const uploadsPath = path.join(__dirname, '..', '..', 'uploads');
  const hdPath = path.join(__dirname, '..', '..', 'uploads', 'hd');
  
  try {
    const uploadsExists = fs.existsSync(uploadsPath);
    const hdExists = fs.existsSync(hdPath);
    
    let uploadsFiles = [];
    let hdFiles = [];
    
    if (uploadsExists) {
      uploadsFiles = fs.readdirSync(uploadsPath).slice(0, 5); // –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
    }
    
    if (hdExists) {
      hdFiles = fs.readdirSync(hdPath).slice(0, 5); // –ü–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤
    }
    
    res.json({
      success: true,
      uploadsPath,
      hdPath,
      uploadsExists,
      hdExists,
      uploadsFiles,
      hdFiles,
      currentDir: __dirname,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message,
      uploadsPath,
      hdPath,
      currentDir: __dirname
    });
  }
});

// Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.get('/api/debug/categories', async (req, res) => {
  try {
    const categories = await prisma.category.findMany({ 
      where: { active: true },
      orderBy: { order: 'asc' },
      take: 5
    });
    
    res.json({ 
      total: categories.length,
      categories: categories,
      message: 'Debug endpoint working'
    });
  } catch (error) {
    res.status(500).json({ 
      error: 'Debug endpoint error', 
      message: error.message 
    });
  }
});

// Endpoint –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Render –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
app.post('/api/debug/import-data', async (req, res) => {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...');
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    // const token = req.headers.authorization?.split(' ')[1];
    // if (!token) {
    //   return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
    // }
    
    // const decoded = jwt.verify(token, process.env.JWT_SECRET);
    // const user = await prisma.user.findUnique({ where: { id: decoded.userId } });
    // if (!user || user.role !== 'admin') {
    //   return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    // }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
    const testCategories = [
      { id: 1, name: '–ò–≥—Ä—É—à–∫–∏', active: true, order: 1, parentId: null },
      { id: 2, name: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã', active: true, order: 2, parentId: null },
      { id: 3, name: '–ü–∞–∑–ª—ã', active: true, order: 3, parentId: null },
      { id: 4, name: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', active: true, order: 4, parentId: null },
      { id: 5, name: '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã', active: true, order: 5, parentId: null }
    ];
    
    const testProducts = [
      { id: 1, name: '–ö—É–∫–ª–∞ –ë–∞—Ä–±–∏', price: 299.99, description: '–ö—Ä–∞—Å–∏–≤–∞—è –∫—É–∫–ª–∞', categoryId: 1, active: true },
      { id: 2, name: '–ú–∞—à–∏–Ω–∫–∞ —Ä–∞–¥–∏–æ—É–ø—Ä–∞–≤–ª—è–µ–º–∞—è', price: 599.99, description: '–ë—ã—Å—Ç—Ä–∞—è –º–∞—à–∏–Ω–∫–∞', categoryId: 1, active: true },
      { id: 3, name: '–ü–∞–∑–ª 100 –¥–µ—Ç–∞–ª–µ–π', price: 199.99, description: '–†–∞–∑–≤–∏–≤–∞—é—â–∏–π –ø–∞–∑–ª', categoryId: 3, active: true }
    ];
    
    console.log('üìÇ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    for (const category of testCategories) {
      await prisma.category.upsert({
        where: { id: category.id },
        update: category,
        create: category
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${testCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã...');
    for (const product of testProducts) {
      await prisma.product.upsert({
        where: { id: product.id },
        update: product,
        create: product
      });
    }
    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${testProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const categoriesCount = await prisma.category.count();
    const productsCount = await prisma.product.count();
    const usersCount = await prisma.user.count();
    const ordersCount = await prisma.order.count();
    const reviewsCount = await prisma.review.count();
    
    res.json({
      success: true,
      message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
      stats: {
        categories: categoriesCount,
        products: productsCount,
        users: usersCount,
        orders: ordersCount,
        reviews: reviewsCount
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö', 
      message: error.message 
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function decodeUserName(name) {
  if (!name) return '';
  
  try {
    console.log('Original name for decoding:', name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
    let decoded = name;
    
    // –ï—Å–ª–∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç %XX –∫–æ–¥–∏—Ä–æ–≤–∫—É, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
    if (name.includes('%')) {
      decoded = decodeURIComponent(name);
      console.log('First decode:', decoded);
    }
    
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –µ—â–µ %XX, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ—â–µ —Ä–∞–∑
    if (decoded.includes('%')) {
      decoded = decodeURIComponent(decoded);
      console.log('Second decode:', decoded);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç base64
    if (decoded && /^[A-Za-z0-9+/]*={0,2}$/.test(decoded)) {
      try {
        const base64Decoded = Buffer.from(decoded, 'base64').toString('utf8');
        if (base64Decoded && base64Decoded.length > 0) {
          decoded = base64Decoded;
          console.log('Base64 decode:', decoded);
        }
      } catch (base64Error) {
        console.log('Not base64 encoded');
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —ç–º–æ–¥–∑–∏
    try {
      // –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
      if (decoded.startsWith('"') && decoded.endsWith('"')) {
        const jsonDecoded = JSON.parse(decoded);
        if (jsonDecoded && typeof jsonDecoded === 'string') {
          decoded = jsonDecoded;
          console.log('JSON decode:', decoded);
        }
      }
    } catch (jsonError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è URL-encoded —Å–∏–º–≤–æ–ª–æ–≤
    if (decoded.includes('+')) {
      decoded = decoded.replace(/\+/g, ' ');
    }
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    decoded = decoded.trim().replace(/\s+/g, ' ');
    
    console.log('Final decoded name:', decoded);
    
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
    return decoded || name;
  } catch (error) {
    console.error('Error decoding user name:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
    return name;
  }
}

// === Google OAuth Strategy ===
passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID || 'GOOGLE_CLIENT_ID',
  clientSecret: process.env.GOOGLE_CLIENT_SECRET || 'GOOGLE_CLIENT_SECRET',
  callbackURL: process.env.GOOGLE_CALLBACK_URL || `${process.env.FRONTEND_URL || 'http://localhost:3000'}/api/auth/google/callback`,
}, async (accessToken, refreshToken, profile, done) => {
  try {
    console.log('Google OAuth profile:', profile);
    console.log('Original displayName:', profile.displayName);
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const decodedName = decodeUserName(profile.displayName);
    console.log('Decoded displayName:', decodedName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Google ID
    let user = await prisma.user.findUnique({ where: { googleId: profile.id } });
    
    if (!user) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existingUser = await prisma.user.findUnique({ 
        where: { email: profile.emails[0].value } 
      });
      
      if (existingUser) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–≤—è–∑–∞–Ω —Å Google, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        user = await prisma.user.update({
          where: { id: existingUser.id },
          data: { 
            googleId: profile.id,
            emailVerified: true,
            name: decodedName || existingUser.name
          }
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await prisma.user.create({
          data: {
            email: profile.emails[0].value,
            name: decodedName,
            googleId: profile.id,
            emailVerified: true,
            role: 'user'
          }
        });
      }
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (user.name !== decodedName) {
        user = await prisma.user.update({
          where: { id: user.id },
          data: { name: decodedName }
        });
      }
    }
    
    console.log('Google OAuth user:', user);
    return done(null, user);
  } catch (err) {
    console.error('Google OAuth error:', err);
    return done(err, null);
  }
}));

// === Facebook OAuth Strategy ===
passport.use(new FacebookStrategy({
  clientID: process.env.FACEBOOK_APP_ID || 'FACEBOOK_APP_ID',
  clientSecret: process.env.FACEBOOK_APP_SECRET || 'FACEBOOK_APP_SECRET',
  callbackURL: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/api/auth/facebook/callback`,
  profileFields: ['id', 'displayName', 'emails']
}, async (accessToken, refreshToken, profile, done) => {
  try {
    let user = await prisma.user.findUnique({ where: { facebookId: profile.id } });
    if (!user) {
      user = await prisma.user.create({
        data: {
          email: profile.emails && profile.emails[0] ? profile.emails[0].value : null,
          name: profile.displayName,
          facebookId: profile.id,
          emailVerified: true
        }
      });
    }
    return done(null, user);
  } catch (err) {
    return done(err, null);
  }
}));

app.post('/api/products', authMiddleware, upload.array('images', 7), 
  smartImageUploadMiddleware.processUploadedFiles.bind(smartImageUploadMiddleware), 
  async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...');
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
    console.log('  - nameHe:', req.body.nameHe);
    console.log('  - descriptionHe:', req.body.descriptionHe);
    console.log('  - name:', req.body.name);
    console.log('  - description:', req.body.description);
    
    const { name, description, nameHe, descriptionHe, price, category, subcategory, ageGroup, gender, quantity, article, brand, country, length, width, height, isHidden, inputLanguage = 'ru' } = req.body;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Cloudinary –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
    const imageUrls = req.files ? req.files.map((file, index) => {
      if (req.imageUrls && req.imageUrls[index]) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Cloudinary
        return req.imageUrls[index];
      } else if (file.filename) {
        // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        return `/uploads/${file.filename}`;
      } else {
        // Fallback –¥–ª—è production
        return `/uploads/${Date.now()}_${file.originalname}`;
      }
    }) : [];

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è


    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    let categoryName = category;
    if (category && !isNaN(category)) {
      const categoryRecord = await prisma.category.findUnique({
        where: { id: parseInt(category) }
      });
      categoryName = categoryRecord ? categoryRecord.name : category;
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let subcategoryId = null;
    if (subcategory) {
      // –ï—Å–ª–∏ subcategory - —ç—Ç–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
      if (!isNaN(subcategory)) {
        subcategoryId = parseInt(subcategory);
      } else {
        // –ï—Å–ª–∏ subcategory - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const subcategoryRecord = await prisma.category.findFirst({
          where: { 
            name: subcategory,
            parentId: parseInt(category)
          }
        });
        subcategoryId = subcategoryRecord ? subcategoryRecord.id : null;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const productData = {
      name,
      description,
      nameHe: nameHe || null,
      descriptionHe: descriptionHe || null,
      price: parseFloat(price),
      categoryName: categoryName,
      categoryId: category && !isNaN(category) ? parseInt(category) : null,
      subcategoryId: subcategoryId,
      ageGroup,
      gender,
      imageUrls,
      quantity: quantity ? parseInt(quantity) : 0,
      article: article || null,
      brand: brand || null,
      country: country || null,
      length: length ? parseFloat(length) : null,
      width: width ? parseFloat(width) : null,
      height: height ? parseFloat(height) : null,
      ...(isHidden !== undefined ? { isHidden: isHidden === 'true' || isHidden === true } : {})
    };

    const product = await prisma.product.create({
      data: productData
    });


    res.status(201).json(product);
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ error: 'Failed to create product' });
  }
});

app.get('/api/products', async (req, res) => {
  try {
    const { category, subcategoryId, admin } = req.query;
    
    let whereClause = {};
    
    if (category) {
      whereClause.categoryName = category;
    }
    
    if (subcategoryId) {
      whereClause.subcategoryId = parseInt(subcategoryId);
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å isHidden = true
    if (admin !== 'true') {
      whereClause.isHidden = false;
    }
    
    const selectFields = {
      id: true,
      name: true,
      description: true,
      nameHe: true,
      descriptionHe: true,
      price: true,
      ageGroup: true,
      createdAt: true,
      updatedAt: true,
      imageUrls: true,
      quantity: true,
      article: true,
      brand: true,
      country: true,
      height: true,
      length: true,
      width: true,
      subcategoryId: true,
      isHidden: true,
      gender: true,
      categoryId: true,
      categoryName: true,
      reviews: {
        where: { status: 'published' },
        select: { rating: true }
      },
      category: {
        select: { name: true }
      },
      subcategory: {
        select: { name: true }
      }
    };
    
    const products = await prisma.product.findMany({
      where: whereClause,
      select: selectFields,
      orderBy: { createdAt: 'desc' }
    });

    console.log('üîß API /products - First product sample:', products[0] ? {
      id: products[0].id,
      name: products[0].name,
      hasNameHe: !!products[0].nameHe,
      nameHe: products[0].nameHe
    } : 'No products');

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const productsWithRating = products.map(product => {
      const reviews = product.reviews || [];
      const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
      const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;
      
      return {
        ...product,
        rating: Math.round(averageRating * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        reviewCount: reviews.length
      };
    });

    res.json(productsWithRating);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ error: 'Failed to fetch products' });
  }
});

// === –í–û–ü–†–û–°–´ –û –¢–û–í–ê–†–ê–• ===

// –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä—É (—Ç–æ–ª—å–∫–æ published)
app.get('/api/products/:id/questions', async (req, res) => {
  try {
    const questions = await prisma.productQuestion.findMany({
      where: { productId: parseInt(req.params.id), status: 'published' },
      include: { user: { select: { id: true, name: true } } },
      orderBy: { createdAt: 'desc' }
    });
    res.json(questions);
  } catch (error) {
    console.error('Error fetching questions:', error);
    res.status(500).json({ error: 'Failed to fetch questions' });
  }
});

// –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ
app.post('/api/products/:id/questions', authMiddleware, async (req, res) => {
  try {
    const { question } = req.body;
    const productId = parseInt(req.params.id);
    const userId = req.user.userId;

    if (!question || !question.trim()) {
      return res.status(400).json({ error: '–í–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });

    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const productQuestion = await prisma.productQuestion.create({
      data: { 
        productId, 
        userId, 
        question: question.trim(), 
        status: 'pending' 
      },
      include: { user: { select: { id: true, name: true } } }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try {
      const user = await prisma.user.findUnique({ where: { id: userId } });
      const telegramMessage = `
‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ</b>

üõçÔ∏è <b>–¢–æ–≤–∞—Ä:</b> ${product.name}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß <b>Email:</b> ${user?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> ${question.trim()}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
      `.trim();
      console.log('üöÄ About to send Telegram notification for product question');
      await sendTelegramNotification(telegramMessage);
    } catch (telegramError) {
      console.error('Error sending Telegram notification:', telegramError);
    }

    res.status(201).json(productQuestion);
  } catch (error) {
    console.error('Error creating question:', error);
    res.status(500).json({ error: 'Failed to create question' });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
app.get('/api/test', (req, res) => {
  res.json({ 
    message: 'API is working',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/test-db', async (req, res) => {
  try {
    console.log('Testing database connection...');
    await prisma.$connect();
    console.log('Database connection successful');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ ProductQuestion
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'ProductQuestion'
      );
    `;
    
    console.log('ProductQuestion table exists:', tableExists[0]?.exists);
    
    res.json({ 
      message: 'Database connection successful',
      productQuestionTableExists: tableExists[0]?.exists,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Database test failed:', error);
    res.status(500).json({ 
      error: 'Database test failed',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.get('/api/test-auth', authMiddleware, async (req, res) => {
  try {
    console.log('Testing authentication...');
    console.log('User ID from token:', req.user.userId);
    
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    console.log('Found user:', user ? { id: user.id, role: user.role } : 'User not found');
    
    res.json({ 
      message: 'Authentication successful',
      user: user ? { id: user.id, role: user.role } : null,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Authentication test failed:', error);
    res.status(500).json({ 
      error: 'Authentication test failed',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞, —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É)
app.get('/api/admin/questions', authMiddleware, async (req, res) => {
  try {
    console.log('Admin questions endpoint: Starting request');
    console.log('User ID from token:', req.user.userId);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    console.log('Environment check:');
    console.log('- NODE_ENV:', process.env.NODE_ENV);
    console.log('- DATABASE_URL exists:', !!process.env.DATABASE_URL);
    console.log('- JWT_SECRET exists:', !!process.env.JWT_SECRET);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      await prisma.$connect();
      console.log('Database connection successful');
    } catch (dbError) {
      console.error('Database connection failed:', dbError);
      return res.status(500).json({ error: 'Database connection failed' });
    }
    
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    console.log('Found user:', user ? { id: user.id, role: user.role } : 'User not found');
    
    if (!user || user.role !== 'admin') {
      console.log('Access denied: user is not admin');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    console.log('User is admin, proceeding with query');
    const { status } = req.query;
    console.log('Filter status:', status);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ ProductQuestion
    try {
      const tableExists = await prisma.$queryRaw`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'ProductQuestion'
        );
      `;
      console.log('ProductQuestion table exists:', tableExists[0]?.exists);
    } catch (tableError) {
      console.error('Error checking table existence:', tableError);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ProductQuestion
    try {
      console.log('Checking if ProductQuestion model is available...');
      console.log('Prisma client methods:', Object.keys(prisma).filter(key => key.includes('Question')));
    } catch (modelError) {
      console.error('Error checking ProductQuestion model:', modelError);
    }
    
    const questions = await prisma.productQuestion.findMany({
      where: status ? { status } : {},
      include: { 
        product: { select: { id: true, name: true, imageUrls: true } }, 
        user: { select: { id: true, name: true, email: true } } 
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`Found ${questions.length} questions`);
    res.json(questions);
  } catch (error) {
    console.error('Error fetching all questions:', error);
    console.error('Error stack:', error.stack);
    res.status(500).json({ error: 'Failed to fetch questions' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
app.get('/api/questions', async (req, res) => {
  try {
    const questions = await prisma.productQuestion.findMany({
      where: { status: 'published' },
      include: { 
        product: { select: { id: true, name: true, imageUrls: true } }, 
        user: { select: { id: true, name: true } } 
      },
      orderBy: { createdAt: 'desc' }
    });
    res.json(questions);
  } catch (error) {
    console.error('Error fetching public questions:', error);
    res.status(500).json({ error: 'Failed to fetch questions' });
  }
});

// –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å (–¥–ª—è –∞–¥–º–∏–Ω–∞)
app.put('/api/admin/questions/:id', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const { answer, status } = req.body;
    
    if (!answer || !answer.trim()) {
      return res.status(400).json({ error: '–û—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    if (!['pending', 'published', 'rejected'].includes(status)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }

    const question = await prisma.productQuestion.update({
      where: { id: parseInt(req.params.id) },
      data: { 
        answer: answer.trim(),
        status,
        updatedAt: new Date()
      },
      include: { 
        product: { select: { id: true, name: true } }, 
        user: { select: { id: true, name: true, email: true } } 
      }
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

    res.json(question);
  } catch (error) {
    console.error('Error answering question:', error);
    res.status(500).json({ error: 'Failed to answer question' });
  }
});

app.get('/api/products/:id', async (req, res) => {
  try {
    const { admin } = req.query;
    
    let whereClause = { id: parseInt(req.params.id) };
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å isHidden = true
    if (admin !== 'true') {
      whereClause.isHidden = false;
    }
    
    const selectFields = {
      id: true,
      name: true,
      description: true,
      nameHe: true,
      descriptionHe: true,
      price: true,
      ageGroup: true,
      createdAt: true,
      updatedAt: true,
      imageUrls: true,
      quantity: true,
      article: true,
      brand: true,
      country: true,
      height: true,
      length: true,
      width: true,
      subcategoryId: true,
      isHidden: true,
      gender: true,
      categoryId: true,
      categoryName: true,
      reviews: {
        where: { status: 'published' },
        select: { rating: true }
      },
      category: {
        select: { id: true, name: true }
      },
      subcategory: {
        select: { id: true, name: true }
      }
    };
    
    const product = await prisma.product.findUnique({
      where: whereClause,
      select: selectFields
    });
    
    console.log('API: GET product data:', {
      id: product?.id,
      categoryId: product?.categoryId,
      category: product?.category,
      subcategoryId: product?.subcategoryId,
      subcategory: product?.subcategory
    });
    
    console.log('API: GET - Raw product from database:', product);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è GET
    if (product?.categoryId) {
      const categoryCheck = await prisma.category.findUnique({
        where: { id: product.categoryId }
      });
      console.log('API: GET Category check result:', categoryCheck);
      
      if (!categoryCheck) {
        console.log('API: GET WARNING - Category with ID', product.categoryId, 'does not exist!');
      }
    }
    
    if (product?.subcategoryId) {
      const subcategoryCheck = await prisma.category.findUnique({
        where: { id: product.subcategoryId }
      });
      console.log('API: GET Subcategory check result:', subcategoryCheck);
      
      if (!subcategoryCheck) {
        console.log('API: GET WARNING - Subcategory with ID', product.subcategoryId, 'does not exist!');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è GET
    if (product?.categoryId) {
      const categoryCheck = await prisma.category.findUnique({
        where: { id: product.categoryId }
      });
      console.log('API: GET Category check result:', categoryCheck);
    }
    
    if (product?.subcategoryId) {
      const subcategoryCheck = await prisma.category.findUnique({
        where: { id: product.subcategoryId }
      });
      console.log('API: GET Subcategory check result:', subcategoryCheck);
    }
    if (!product) {
      return res.status(404).json({ error: 'Product not found' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    const reviews = product.reviews || [];
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const averageRating = reviews.length > 0 ? totalRating / reviews.length : 0;
    
    const productWithRating = {
      ...product,
      rating: Math.round(averageRating * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
      reviewCount: reviews.length
    };
    
    res.json(productWithRating);
  } catch (error) {
    console.error('Error fetching product:', error);
    res.status(500).json({ error: 'Failed to fetch product' });
  }
});

app.delete('/api/products/:id', authMiddleware, async (req, res) => {
  try {
    console.log('DELETE /api/products/:id - Starting deletion process');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      console.log('DELETE /api/products/:id - Access denied: user is not admin');
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const productId = parseInt(req.params.id);
    console.log('DELETE /api/products/:id - Product ID:', productId);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    const existingProduct = await prisma.product.findUnique({
      where: { id: productId }
    });
    
    if (!existingProduct) {
      console.log('DELETE /api/products/:id - Product not found');
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    console.log('DELETE /api/products/:id - Product found, starting deletion of related data');

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Ç–∑—ã–≤—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)
    try {
      console.log('DELETE /api/products/:id - Deleting hidden reviews...');
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –æ—Ç–∑—ã–≤—ã
      const reviews = await prisma.review.findMany({
        where: { productId: productId },
        select: { id: true }
      });
      
      if (reviews.length > 0) {
        const reviewIds = reviews.map(review => review.id);
        await prisma.hiddenReview.deleteMany({
          where: { reviewId: { in: reviewIds } }
        });
        console.log('DELETE /api/products/:id - Hidden reviews deleted successfully');
      }
      
      console.log('DELETE /api/products/:id - Deleting reviews...');
      await prisma.review.deleteMany({
        where: { productId: productId }
      });
      console.log('DELETE /api/products/:id - Reviews deleted successfully');
    } catch (reviewError) {
      console.error('DELETE /api/products/:id - Error deleting reviews:', reviewError);
    }

    try {
      console.log('DELETE /api/products/:id - Deleting cart items...');
      await prisma.cartItem.deleteMany({
        where: { productId: productId }
      });
      console.log('DELETE /api/products/:id - Cart items deleted successfully');
    } catch (cartError) {
      console.error('DELETE /api/products/:id - Error deleting cart items:', cartError);
    }

    try {
      console.log('DELETE /api/products/:id - Deleting order items...');
      await prisma.orderItem.deleteMany({
        where: { productId: productId }
      });
      console.log('DELETE /api/products/:id - Order items deleted successfully');
    } catch (orderError) {
      console.error('DELETE /api/products/:id - Error deleting order items:', orderError);
    }

    try {
      console.log('DELETE /api/products/:id - Deleting wishlist items...');
      await prisma.wishlistItem.deleteMany({
        where: { productId: productId }
      });
      console.log('DELETE /api/products/:id - Wishlist items deleted successfully');
    } catch (wishlistError) {
      console.error('DELETE /api/products/:id - Error deleting wishlist items:', wishlistError);
    }

    try {
      console.log('DELETE /api/products/:id - Deleting availability notifications...');
      await prisma.availabilityNotification.deleteMany({
        where: { productId: productId }
      });
      console.log('DELETE /api/products/:id - Availability notifications deleted successfully');
    } catch (notificationError) {
      console.error('DELETE /api/products/:id - Error deleting availability notifications:', notificationError);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º –∏ —É–¥–∞–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã
    try {
      console.log('DELETE /api/products/:id - Checking for hidden orders...');
      const orderItems = await prisma.orderItem.findMany({
        where: { productId: productId },
        select: { orderId: true }
      });
      
      if (orderItems.length > 0) {
        const orderIds = [...new Set(orderItems.map(item => item.orderId))];
        await prisma.userHiddenOrder.deleteMany({
          where: { orderId: { in: orderIds } }
        });
        console.log('DELETE /api/products/:id - Hidden orders deleted successfully');
      }
    } catch (hiddenOrderError) {
      console.error('DELETE /api/products/:id - Error deleting hidden orders:', hiddenOrderError);
    }

    // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º —Ç–æ–≤–∞—Ä
    console.log('DELETE /api/products/:id - Deleting product...');
    const product = await prisma.product.delete({
      where: { id: productId }
    });
    console.log('DELETE /api/products/:id - Product deleted successfully');

    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞
    if (product.imageUrls && Array.isArray(product.imageUrls)) {
      console.log('DELETE /api/products/:id - Deleting image files...');
      product.imageUrls.forEach(imageUrl => {
        if (imageUrl && imageUrl.startsWith('/uploads/')) {
          const imagePath = path.join(__dirname, '..', imageUrl);
          if (fs.existsSync(imagePath)) {
            try {
              fs.unlinkSync(imagePath);
              console.log('DELETE /api/products/:id - Image file deleted:', imagePath);
            } catch (fsError) {
              console.error('DELETE /api/products/:id - Error deleting image file:', fsError);
            }
          }
        }
      });
    }

    console.log('DELETE /api/products/:id - Deletion completed successfully');
    res.json({ message: 'Product deleted successfully' });
  } catch (error) {
    console.error('DELETE /api/products/:id - Error deleting product:', error);
    console.error('DELETE /api/products/:id - Error details:', {
      message: error.message,
      code: error.code,
      meta: error.meta
    });
    res.status(500).json({ error: 'Failed to delete product' });
  }
});

app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'Server is running' });
});

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.post('/api/auth/register', async (req, res) => {
  try {
    const { email, password, name } = req.body;

    if (!email || !password) return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    const existing = await prisma.user.findUnique({ where: { email } });
    if (existing) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    const passwordHash = await bcrypt.hash(password, 10);
    const verificationToken = crypto.randomBytes(32).toString('hex');
    console.log(`–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}, name: ${name}`);
    const user = await prisma.user.create({
      data: { 
        email, 
        passwordHash, 
        name, 
        verificationToken,
        emailVerified: false // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º false
      }
    });
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${user.id}, emailVerified: ${user.emailVerified}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ Brevo
    const confirmUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/confirm-email?token=${verificationToken}`;
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #3f51b5; margin: 0; font-size: 28px;">üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kids Toys Shop!</h1>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –¥–µ—Ç—Å–∫–∏—Ö –∏–≥—Ä—É—à–µ–∫.
            </p>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å.
            </p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${confirmUrl}" style="background-color: #3f51b5; color: #ffffff; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold; display: inline-block;">
              ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email
            </a>
          </div>
          
          <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
            <p style="color: #666; font-size: 14px; margin: 0;">
              –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
              <a href="${confirmUrl}" style="color: #3f51b5;">${confirmUrl}</a>
            </p>
          </div>
          
          <div style="margin-top: 25px; padding: 15px; background-color: #f5f5f5; border-radius: 5px;">
            <p style="color: #666; font-size: 14px; margin: 0;">
              <strong>–ß—Ç–æ –¥–∞–ª—å—à–µ?</strong><br>
              –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –¥–µ—Ç—Å–∫–∏—Ö –∏–≥—Ä—É—à–µ–∫.
            </p>
          </div>
          
          <div style="margin-top: 25px; text-align: center;">
            <p style="color: #999; font-size: 12px; margin: 0;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
              <strong>–ö–æ–º–∞–Ω–¥–∞ Kids Toys Shop</strong>
            </p>
          </div>
        </div>
      </div>
    `;
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞: ${email}`);
    await sendEmail(email, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - Kids Toys Shop', emailHtml);
    console.log('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    res.json({ 
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É.',
      requiresEmailVerification: true,
      user: {
        email: user.email,
        name: user.name
      }
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email ===
app.get('/api/auth/confirm', async (req, res) => {
  try {
    const { token } = req.query;
    if (!token) return res.status(400).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
    
    const user = await prisma.user.findFirst({ where: { verificationToken: token } });
    if (!user) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
      return res.json({ message: 'Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await prisma.user.update({
      where: { id: user.id },
      data: { emailVerified: true, verificationToken: null }
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    const jwtToken = jwt.sign({ 
      userId: user.id, 
      email: user.email, 
      name: user.name, 
      role: user.role 
    }, process.env.JWT_SECRET || 'your_jwt_secret', { expiresIn: '7d' });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    res.json({ 
      message: 'Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!',
      token: jwtToken,
      user: { 
        id: user.id, 
        email: user.email, 
        name: user.name, 
        role: user.role,
        emailVerified: true
      }
    });
  } catch (error) {
    console.error('Email confirm error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email' });
  }
});

// === –õ–æ–≥–∏–Ω ===
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await prisma.user.findUnique({ where: { email } });
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è email: ${email}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${!!user}, emailVerified: ${user?.emailVerified}`);
    
    if (!user) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email
    if (!user.emailVerified) {
      return res.status(400).json({ 
        error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å–∏—Å—Ç–µ–º—É.',
        requiresEmailVerification: true 
      });
    }
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å Google ID (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Google), –Ω–æ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è
    if (user.googleId && !user.passwordHash) {
      return res.status(400).json({ 
        error: '–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Google. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google" –¥–ª—è –≤—Ö–æ–¥–∞.',
        requiresGoogleAuth: true 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–æ–ª—è
    if (!user.passwordHash) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const valid = await bcrypt.compare(password, user.passwordHash);
    if (!valid) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
    const token = jwt.sign({ 
      userId: user.id, 
      email: user.email, 
      name: user.name, 
      role: user.role 
    }, process.env.JWT_SECRET || 'your_jwt_secret', { expiresIn: '7d' });
    
    const responseData = { 
      token, 
      user: { 
        id: user.id, 
        email: user.email, 
        name: user.name, 
        role: user.role 
      } 
    };
    res.json(responseData);
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

// === Google OAuth Routes ===
app.get('/api/auth/google', (req, res, next) => {
  
  passport.authenticate('google', { scope: ['profile', 'email'] })(req, res, next);
});

app.get('/api/auth/google/callback', passport.authenticate('google', { session: false }), (req, res) => {
  try {
    console.log('Google OAuth callback, user:', req.user);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ
    const userName = decodeUserName(req.user.name);
    console.log('Final user name for JWT:', userName);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
    const token = jwt.sign({ 
      userId: req.user.id, 
      email: req.user.email, 
      name: userName, 
      role: req.user.role 
    }, process.env.JWT_SECRET || 'your_jwt_secret', { expiresIn: '7d' });
    
    // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/oauth-success?token=${token}`);
  } catch (error) {
    console.error('Google OAuth callback error:', error);
    res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/oauth-error?error=authentication_failed`);
  }
});

// === Facebook OAuth Routes ===
app.get('/api/auth/facebook', passport.authenticate('facebook', { scope: ['email'] }));
app.get('/api/auth/facebook/callback', passport.authenticate('facebook', { session: false }), (req, res) => {
  const token = jwt.sign({ userId: req.user.id, email: req.user.email, name: req.user.name, role: req.user.role }, process.env.JWT_SECRET || 'your_jwt_secret', { expiresIn: '7d' });
  res.redirect(`${process.env.FRONTEND_URL || 'http://localhost:3000'}/oauth-success?token=${token}`);
});

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
function authMiddleware(req, res, next) {
  console.log('Auth middleware: Starting authentication check');
  
  const auth = req.headers.authorization;
  console.log('Authorization header:', auth ? 'Present' : 'Missing');
  
  if (!auth || !auth.startsWith('Bearer ')) {
    console.log('Auth middleware: No valid Bearer token');
    return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }
  
  const token = auth.slice(7);
  console.log('Token extracted, length:', token.length);
  
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
    console.log('Token verified successfully, user ID:', payload.userId);
    req.user = payload;
    next();
  } catch (error) {
    console.error('Token verification failed:', error.message);
    return res.status(401).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}

// –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/profile/orders', authMiddleware, async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hiddenOrders = await prisma.userHiddenOrder.findMany({
      where: { userId: req.user.userId },
      select: { orderId: true }
    });
    
    const hiddenOrderIds = hiddenOrders.map(ho => ho.orderId);
    
    const orders = await prisma.order.findMany({
      where: { 
        userId: req.user.userId,
        id: { notIn: hiddenOrderIds }
      },
      include: {
        items: { include: { product: true } }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    const ordersWithTotal = orders.map(order => ({
      ...order,
      total: order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0)
    }));
    
    res.json(ordersWithTotal);
  } catch (error) {
    console.error('Orders fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' });
  }
});

// –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/profile/cart', authMiddleware, async (req, res) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É:', req.user.userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    let cart = await prisma.cart.findUnique({
      where: { userId: req.user.userId },
      include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
    });
    
    if (!cart) {
      try {
        console.log(`–°–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${req.user.userId}`);
        await prisma.cart.create({ data: { userId: req.user.userId } });
        cart = await prisma.cart.findUnique({
          where: { userId: req.user.userId },
          include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
        });
        console.log(`–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, ID: ${cart?.id}`);
  
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', e);
        return res.json({ items: [] });
      }
    }
    
    if (!cart) {
      console.log('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è');
      return res.json({ items: [] });
    }
    
    res.json(cart);
  } catch (error) {
    console.error('Cart fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã' });
  }
});

// === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===
app.put('/api/profile', authMiddleware, async (req, res) => {
  try {
    const { name, surname, email, phone } = req.body;
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    
    let updateData = { 
      name: name || user.name,
      surname: surname || user.surname,
      phone: phone || user.phone,
    };
    
    if (email && email !== user.email) {
      // –ï—Å–ª–∏ email –º–µ–Ω—è–µ—Ç—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      updateData.email = email;
    }
    
    const updated = await prisma.user.update({ where: { id: user.id }, data: updateData });
    res.json({ 
      user: { 
        id: updated.id, 
        email: updated.email, 
        name: updated.name, 
        surname: updated.surname,
        phone: updated.phone,
        emailVerified: updated.emailVerified,
        googleId: updated.googleId,
        facebookId: updated.facebookId,
        hasPassword: !!updated.passwordHash
      } 
    });
  } catch (error) {
    console.error('Profile update error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===
app.delete('/api/profile', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.$transaction([
      // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
      prisma.cart.deleteMany({ where: { userId: user.id } }),
      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
      prisma.order.deleteMany({ where: { userId: user.id } }),
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤—ã
      prisma.review.deleteMany({ where: { userId: user.id } }),
      // –£–¥–∞–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      prisma.wishlist.deleteMany({ where: { userId: user.id } }),
      // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      prisma.notification.deleteMany({ where: { userId: user.id } }),
      // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      prisma.user.delete({ where: { id: user.id } })
    ]);
    
    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('Profile deletion error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è: –∑–∞–ø—Ä–æ—Å ===
app.post('/api/auth/forgot', async (req, res) => {
  try {
    const { email } = req.body;
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) return res.status(200).json({ message: '–ï—Å–ª–∏ email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
    const resetToken = crypto.randomBytes(32).toString('hex');
    await prisma.user.update({ where: { id: user.id }, data: { verificationToken: resetToken } });
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
    const emailHtml = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
        <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #3f51b5; margin: 0; font-size: 28px;">üîê –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h1>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>${user.name || '–∫–ª–∏–µ–Ω—Ç'}</strong>!
            </p>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
              –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Kids Toys Shop.
            </p>
          </div>
          
          <div style="margin-bottom: 30px; text-align: center;">
            <a href="${resetUrl}" style="display: inline-block; background-color: #3f51b5; color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-size: 16px; font-weight: bold; box-shadow: 0 2px 5px rgba(0,0,0,0.2);">
              üîë –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #666; font-size: 14px; line-height: 1.5; margin: 0;">
              –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
          </div>
          
          <div style="margin-bottom: 25px;">
            <p style="color: #666; font-size: 14px; line-height: 1.5; margin: 0;">
              –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
            </p>
          </div>
          
          <div style="border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px;">
            <p style="color: #999; font-size: 12px; text-align: center; margin: 0;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
              <strong>–ö–æ–º–∞–Ω–¥–∞ Kids Toys Shop</strong>
            </p>
          </div>
        </div>
      </div>
    `;
    await sendEmail(email, '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - Kids Toys Shop', emailHtml);
    res.json({ message: '–ï—Å–ª–∏ email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('Forgot password error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' });
  }
});

// === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è: —Å–±—Ä–æ—Å ===
app.post('/api/auth/reset', async (req, res) => {
  try {
    const { token, password } = req.body;
    if (!token || !password) return res.status(400).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è' });
    const user = await prisma.user.findFirst({ where: { verificationToken: token } });
    if (!user) return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    const passwordHash = await bcrypt.hash(password, 10);
    await prisma.user.update({ where: { id: user.id }, data: { passwordHash, verificationToken: null } });
    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω' });
  } catch (error) {
    console.error('Reset password error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è' });
  }
});

// === –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, email, —Ä–æ–ª—å, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) ===
app.get('/api/profile', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ 
      user: { 
        id: user.id, 
        email: user.email, 
        name: user.name, 
        surname: user.surname,
        phone: user.phone,
        createdAt: user.createdAt,
        role: user.role,
        googleId: user.googleId,
        facebookId: user.facebookId,
        hasPassword: !!user.passwordHash
      } 
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// === –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ===
app.post('/api/profile/cart/add', authMiddleware, async (req, res) => {
  try {
    const { productId, quantity = 1 } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:', req.user.userId);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    let cart = await prisma.cart.findUnique({ where: { userId: req.user.userId } });
    if (!cart) {
      console.log(`–°–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${req.user.userId}`);
      cart = await prisma.cart.create({ data: { userId: req.user.userId } });
      console.log(`–ö–æ—Ä–∑–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞, ID: ${cart.id}`);
    }
    let cartItem = await prisma.cartItem.findFirst({ where: { cartId: cart.id, productId } });
    if (cartItem) {
      cartItem = await prisma.cartItem.update({
        where: { id: cartItem.id },
        data: { quantity: cartItem.quantity + quantity }
      });
    } else {
      cartItem = await prisma.cartItem.create({
        data: { cartId: cart.id, productId, quantity }
      });
    }
    const updatedCart = await prisma.cart.findUnique({
      where: { id: cart.id },
      include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
    });
    res.json(updatedCart);
  } catch (error) {
    console.error('Cart add error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É' });
  }
});

// === –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ===
app.post('/api/profile/cart/remove', authMiddleware, async (req, res) => {
  try {
    const { productId } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    let cart = await prisma.cart.findUnique({ where: { userId: req.user.userId } });
    if (!cart) return res.status(404).json({ error: '–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    await prisma.cartItem.deleteMany({ where: { cartId: cart.id, productId } });
    const updatedCart = await prisma.cart.findUnique({
      where: { id: cart.id },
      include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
    });
    res.json(updatedCart);
  } catch (error) {
    console.error('Cart remove error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
  }
});

// === –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ===
app.post('/api/profile/cart/update', authMiddleware, async (req, res) => {
  try {
    const { productId, quantity } = req.body;
    if (!productId || typeof quantity !== 'number' || quantity < 1) return res.status(400).json({ error: 'productId –∏ quantity >= 1 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    let cart = await prisma.cart.findUnique({ where: { userId: req.user.userId } });
    if (!cart) return res.status(404).json({ error: '–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    let cartItem = await prisma.cartItem.findFirst({ where: { cartId: cart.id, productId } });
    if (!cartItem) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ' });
    cartItem = await prisma.cartItem.update({ where: { id: cartItem.id }, data: { quantity } });
    const updatedCart = await prisma.cart.findUnique({
      where: { id: cart.id },
      include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
    });

    res.json(updatedCart);
  } catch (error) {
    console.error('Cart update error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞' });
  }
});

// === –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (checkout) ===
app.post('/api/profile/checkout', authMiddleware, async (req, res) => {
  try {

    
    const { customerInfo, pickupStore, paymentMethod, total, cartItems } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ cartItems –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (cartItems && cartItems.length > 0) {
      console.log('üì¶ Using cartItems from request:', cartItems);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
      for (const item of cartItems) {
        const product = await prisma.product.findUnique({
          where: { id: item.productId }
        });
        
        if (!product) {
          return res.status(400).json({ error: `–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ID ${item.productId}` });
        }
        
        if (item.quantity > product.quantity) {
          return res.status(400).json({ error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: ${product.name}` });
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
      if (customerInfo) {
        await prisma.user.update({
          where: { id: req.user.userId },
          data: {
            name: customerInfo.firstName,
            surname: customerInfo.lastName,
            phone: customerInfo.phone
          }
        });
      }
      
      // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å cartItems –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
      const order = await prisma.order.create({
        data: {
          userId: req.user.userId,
          status: 'pending',
          pickupStore,
          items: {
            create: cartItems.map(item => ({
              productId: item.productId,
              quantity: item.quantity,
              price: item.price
            }))
          }
        },
        include: { 
          items: { include: { product: true } },
          user: true 
        }
      });
      
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
      for (const item of cartItems) {
        await prisma.product.update({
          where: { id: item.productId },
          data: { quantity: { decrement: item.quantity } }
        });
      }
      
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const cart = await prisma.cart.findUnique({
        where: { userId: req.user.userId },
        include: { items: true }
      });
      
      if (cart) {
        console.log(`–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É ID: ${cart.id}`);
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
        const deletedItems = await prisma.cartItem.deleteMany({ where: { cartId: cart.id } });
        console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedItems.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã ID: ${cart.id}`);
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ—Ä–∑–∏–Ω—É
        await prisma.cart.delete({ where: { id: cart.id } });
        console.log(`–£–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞ ID: ${cart.id}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      try {
        const totalAmount = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        
        const telegramMessage = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${(order.user.name || order.user.surname || '').trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß <b>Email:</b> ${order.user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üè¨ <b>–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑:</b> ${getStoreInfo(pickupStore).name} (${getStoreInfo(pickupStore).address})
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${paymentMethod === 'card' ? '–ö–∞—Ä—Ç–∞' : '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π'}

  üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${order.items.map(item => `‚Ä¢ ${item.product.name} x${item.quantity} - ‚Ç™${item.price * item.quantity}`).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ‚Ç™${totalAmount}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
        `.trim();
        await sendTelegramNotification(telegramMessage);
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      try {
        const orderItems = order.items.map(item => 
          `${item.product.name} - ${item.quantity} —à—Ç. x ‚Ç™${item.price}`
        ).join('\n');
        
        const emailContent = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <div style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 15px 25px; border-radius: 50px; margin-bottom: 20px;">
                <span style="color: white; font-size: 24px; font-weight: bold;">üé™ Kids Toys Shop</span>
              </div>
              <h1 style="color: #3f51b5; margin: 0; font-size: 28px;">üõí –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h1>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>${order.user.name || order.user.surname || '–∫–ª–∏–µ–Ω—Ç'}</strong>!
              </p>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
              </p>
            </div>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 25px 0;">
              <h3 style="color: #3f51b5; margin: 0 0 15px 0; font-size: 18px;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
                <div><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> #${order.id}</div>
                <div><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ${new Date().toLocaleString('ru-RU')}</div>
                <div><strong>–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑:</strong> ${getStoreInfo(pickupStore).name}</div>
                <div><strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${paymentMethod === 'card' ? 'üí≥ –ö–∞—Ä—Ç–∞' : 'üí∞ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π'}</div>
              </div>
              <div style="margin-top: 10px; font-size: 14px;">
                <strong>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</strong><br>
                ${getStoreInfo(pickupStore).address}
              </div>
            </div>
            
            <div style="background-color: #fff3e0; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #ff9800;">
              <h3 style="color: #e65100; margin: 0 0 15px 0; font-size: 18px;">üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h3>
              <div style="margin-bottom: 15px;">
                ${order.items.map(item => `
                  <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #ffe0b2;">
                    <div style="flex: 1;">
                      <div style="font-weight: bold; color: #333;">${item.product.name}</div>
                      <div style="font-size: 12px; color: #666;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.</div>
                    </div>
                    <div style="font-weight: bold; color: #e65100; font-size: 16px;">
                      ‚Ç™${item.price * item.quantity}
                    </div>
                  </div>
                `).join('')}
              </div>
              <div style="text-align: right; padding-top: 15px; border-top: 2px solid #ffcc02;">
                <div style="font-size: 20px; font-weight: bold; color: #e65100;">
                  –ò—Ç–æ–≥–æ: ‚Ç™${total}
                </div>
              </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #4caf50;">
              <h3 style="color: #2e7d32; margin: 0 0 15px 0; font-size: 18px;">‚úÖ –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <ul style="margin: 0; padding-left: 20px; color: #2e7d32;">
                <li>–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</li>
                <li>–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                <li>–°–æ–æ–±—â–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É</li>
                <li>–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #666; font-size: 14px; margin: 0;">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ <strong>Kids Toys Shop</strong>! üéâ
              </p>
              <p style="color: #999; font-size: 12px; margin: 5px 0 0 0;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
              </p>
            </div>
          </div>
        </div>
      `;
        
        await sendEmail(
          order.user.email,
          `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${order.id} - Kids Toys Shop`,
          emailContent
        );
      } catch (emailError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', emailError);
      }
      
      res.json({ 
        success: true, 
        order,
        message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });
      
    } else {
      // Fallback: –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üì¶ Using cart from database');
      
      const cart = await prisma.cart.findUnique({
        where: { userId: req.user.userId },
        include: { items: { include: { product: true }, orderBy: { id: 'asc' } } }
      });
      
      if (!cart || !cart.items.length) {
        return res.status(400).json({ error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' });
      }
    
    
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    for (const item of cart.items) {
      
      if (item.quantity > item.product.quantity) {
        return res.status(400).json({ error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: ${item.product.name}` });
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    if (customerInfo) {

      await prisma.user.update({
        where: { id: req.user.userId },
        data: {
          name: customerInfo.firstName,
          surname: customerInfo.lastName,
          phone: customerInfo.phone
        }
      });
    }
    
    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    
    const order = await prisma.order.create({
      data: {
        userId: req.user.userId,
        status: 'pending',
        pickupStore,
        items: {
          create: cart.items.map(item => ({
            productId: item.productId,
            quantity: item.quantity,
            price: item.product.price
          }))
        }
      },
      include: { 
        items: { include: { product: true } },
        user: true 
      }
    });
    
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    for (const item of cart.items) {
      await prisma.product.update({
        where: { id: item.productId },
        data: { quantity: { decrement: item.quantity } }
      });
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    try {
      console.log(`–û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É ID: ${cart.id}`);
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
      const deletedItems = await prisma.cartItem.deleteMany({ where: { cartId: cart.id } });
      console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedItems.count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã ID: ${cart.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
      const remainingItems = await prisma.cartItem.findMany({ where: { cartId: cart.id } });
      if (remainingItems.length > 0) {
        console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Å—Ç–∞–ª–æ—Å—å ${remainingItems.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ`);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
        await prisma.cartItem.deleteMany({ where: { cartId: cart.id } });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const cartExists = await prisma.cart.findUnique({ where: { id: cart.id } });
      if (cartExists) {
        await prisma.cart.delete({ where: { id: cart.id } });
        console.log(`–£–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞ ID: ${cart.id}`);
      } else {
        console.log(`–ö–æ—Ä–∑–∏–Ω–∞ ID: ${cart.id} —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`);
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–∞
      const cartStillExists = await prisma.cart.findUnique({ where: { id: cart.id } });
      if (cartStillExists) {
        console.log(`–û–®–ò–ë–ö–ê: –ö–æ—Ä–∑–∏–Ω–∞ ID: ${cart.id} –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è`);
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await prisma.cart.delete({ where: { id: cart.id } });
      }
      
    } catch (clearError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', clearError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ —É–¥–∞–ª–∞—Å—å
    }
    

    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    try {
      const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
      const totalAmount = cart.items.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
      
      const emailSubject = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${order.id} - Kids Toys Shop`;
      const emailHtml = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #3f51b5; margin: 0; font-size: 28px;">üõí –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h1>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>${user.name || customerInfo?.firstName || '–∫–ª–∏–µ–Ω—Ç'}</strong>!
              </p>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
              </p>
            </div>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 25px 0;">
              <h3 style="color: #3f51b5; margin: 0 0 15px 0; font-size: 18px;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
                <div><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> #${order.id}</div>
                <div><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ${new Date().toLocaleString('ru-RU')}</div>
                <div><strong>–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑:</strong> ${getStoreInfo(pickupStore).name}</div>
                <div><strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${paymentMethod === 'card' ? 'üí≥ –ö–∞—Ä—Ç–∞' : 'üí∞ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π'}</div>
              </div>
              <div style="margin-top: 10px; font-size: 14px;">
                <strong>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</strong><br>
                ${getStoreInfo(pickupStore).address}
              </div>
            </div>
            
            <div style="background-color: #fff3e0; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #ff9800;">
              <h3 style="color: #e65100; margin: 0 0 15px 0; font-size: 18px;">üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h3>
              <div style="margin-bottom: 15px;">
                ${order.items.map(item => `
                  <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #ffe0b2;">
                    <div style="flex: 1;">
                      <div style="font-weight: bold; color: #333;">${item.product.name}</div>
                      <div style="font-size: 12px; color: #666;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.</div>
                    </div>
                    <div style="font-weight: bold; color: #e65100; font-size: 16px;">
                      ‚Ç™${item.product.price * item.quantity}
                    </div>
                  </div>
                `).join('')}
              </div>
              <div style="text-align: right; padding-top: 15px; border-top: 2px solid #ffcc02;">
                <div style="font-size: 20px; font-weight: bold; color: #e65100;">
                  –ò—Ç–æ–≥–æ: ‚Ç™${totalAmount}
                </div>
              </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #4caf50;">
              <h3 style="color: #2e7d32; margin: 0 0 15px 0; font-size: 18px;">‚úÖ –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <ul style="margin: 0; padding-left: 20px; color: #2e7d32;">
                <li>–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</li>
                <li>–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                <li>–°–æ–æ–±—â–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É</li>
                <li>–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #666; font-size: 14px; margin: 0;">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ <strong>Kids Toys Shop</strong>! üéâ
              </p>
              <p style="color: #999; font-size: 12px; margin: 5px 0 0 0;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
              </p>
            </div>
          </div>
        </div>
      `;
      
      await sendEmail(order.user.email, emailSubject, emailHtml);
    } catch (emailError) {
      console.error('Error sending order confirmation email:', emailError);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–∫–∞–∑ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞
    res.json({
      order,
      cartCleared: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞'
    });
    } // Closing brace for the else block
  } catch (error) {
    console.error('Checkout error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});

// === –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏) ===
app.post('/api/guest/checkout', async (req, res) => {
  try {
    console.log('üõí Guest checkout request received:', req.body);
    const { customerInfo, pickupStore, paymentMethod, total, cartItems } = req.body;
    
    console.log('üìã Parsed data:', { customerInfo, pickupStore, paymentMethod, total, cartItems });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!customerInfo || !customerInfo.firstName || !customerInfo.lastName || 
        !customerInfo.email || !customerInfo.phone || !pickupStore || !cartItems || !cartItems.length) {
      console.log('‚ùå Validation failed:', { customerInfo, pickupStore, cartItems });
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    console.log('üîç Checking product availability...');
    for (const item of cartItems) {
      console.log('üîç Checking product:', item);
      const product = await prisma.product.findUnique({ where: { id: item.productId } });
      if (!product) {
        console.log('‚ùå Product not found:', item.productId);
        return res.status(400).json({ error: `–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ID ${item.productId}` });
      }
      if (item.quantity > product.quantity) {
        console.log('‚ùå Insufficient quantity:', { requested: item.quantity, available: product.quantity });
        return res.status(400).json({ error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: ${product.name}` });
      }
      console.log('‚úÖ Product available:', { productId: item.productId, quantity: product.quantity });
    }
    
    // –°–æ–∑–¥–∞—ë–º –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑
    console.log('üìù Creating guest order...');
    const order = await prisma.order.create({
      data: {
        status: 'pending',
        pickupStore,
        guestName: `${customerInfo.firstName} ${customerInfo.lastName}`,
        guestEmail: customerInfo.email,
        guestPhone: customerInfo.phone,
        items: {
          create: cartItems.map(item => ({
            productId: item.productId,
            quantity: item.quantity,
            price: item.price
          }))
        }
      },
      include: { 
        items: { include: { product: true } }
      }
    });
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    console.log('üì¶ Updating product quantities...');
    for (const item of cartItems) {
      console.log('üì¶ Updating product:', item.productId, 'quantity:', item.quantity);
      await prisma.product.update({
        where: { id: item.productId },
        data: { quantity: { decrement: item.quantity } }
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    console.log('üì± Sending Telegram notification...');
    try {
      const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      
      const telegramMessage = `
üõí <b>–ù–æ–≤—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑ #${order.id}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${(customerInfo.firstName || '').trim()} ${(customerInfo.lastName || '').trim()}
üìß <b>Email:</b> ${customerInfo.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${customerInfo.phone}
üè¨ <b>–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑:</b> ${getStoreInfo(pickupStore).name} (${getStoreInfo(pickupStore).address})
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${paymentMethod === 'card' ? '–ö–∞—Ä—Ç–∞' : '–ù–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π'}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${cartItems.map(item => `‚Ä¢ ${item.productName} x${item.quantity} - ‚Ç™${item.price * item.quantity}`).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ‚Ç™${totalAmount}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
      `.trim();
      await sendTelegramNotification(telegramMessage);
    } catch (telegramError) {
      console.error('Error sending Telegram notification:', telegramError);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≥–æ—Å—Ç—é
    console.log('üìß Sending order confirmation email...');
    try {
      const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      
      const emailSubject = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${order.id} - Kids Toys Shop`;
      const emailHtml = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #3f51b5; margin: 0; font-size: 28px;">üõí –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</h1>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) <strong>${customerInfo.firstName} ${customerInfo.lastName}</strong>!
              </p>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6; margin: 0;">
                –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
              </p>
            </div>
            
            <div style="background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 25px 0;">
              <h3 style="color: #3f51b5; margin: 0 0 15px 0; font-size: 18px;">üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 14px;">
                <div><strong>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</strong> #${order.id}</div>
                <div><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ${new Date().toLocaleString('ru-RU')}</div>
                <div><strong>–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑:</strong> ${getStoreInfo(pickupStore).name}</div>
                <div><strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong> ${paymentMethod === 'card' ? 'üí≥ –ö–∞—Ä—Ç–∞' : 'üí∞ –ù–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π'}</div>
              </div>
              <div style="margin-top: 10px; font-size: 14px;">
                <strong>–ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞:</strong><br>
                ${getStoreInfo(pickupStore).address}
              </div>
            </div>
            
            <div style="background-color: #fff3e0; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #ff9800;">
              <h3 style="color: #e65100; margin: 0 0 15px 0; font-size: 18px;">üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</h3>
              <div style="margin-bottom: 15px;">
                ${cartItems.map(item => `
                  <div style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #ffe0b2;">
                    <div style="flex: 1;">
                      <div style="font-weight: bold; color: #333;">${item.productName}</div>
                      <div style="font-size: 12px; color: #666;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.</div>
                    </div>
                    <div style="font-weight: bold; color: #e65100; font-size: 16px;">
                      ‚Ç™${item.price * item.quantity}
                    </div>
                  </div>
                `).join('')}
              </div>
              <div style="text-align: right; padding-top: 15px; border-top: 2px solid #ffcc02;">
                <div style="font-size: 20px; font-weight: bold; color: #e65100;">
                  –ò—Ç–æ–≥–æ: ‚Ç™${totalAmount}
                </div>
              </div>
            </div>
            
            <div style="background-color: #e8f5e8; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #4caf50;">
              <h3 style="color: #2e7d32; margin: 0 0 15px 0; font-size: 18px;">‚úÖ –ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <ul style="margin: 0; padding-left: 20px; color: #2e7d32;">
                <li>–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</li>
                <li>–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</li>
                <li>–°–æ–æ–±—â–∏–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É</li>
                <li>–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #666; font-size: 14px; margin: 0;">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ <strong>Kids Toys Shop</strong>! üéâ
              </p>
              <p style="color: #999; font-size: 12px; margin: 5px 0 0 0;">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
              </p>
            </div>
          </div>
        </div>
      `;
      
      await sendEmail(customerInfo.email, emailSubject, emailHtml);
    } catch (emailError) {
      console.error('Error sending order confirmation email:', emailError);
    }
    
    console.log('‚úÖ Guest order created successfully:', order.id);
    res.json({
      order,
      message: '–ì–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω'
    });
  } catch (error) {
    console.error('‚ùå Guest checkout error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞' });
  }
});

// === –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ ===
app.get('/api/profile/orders/:id', authMiddleware, async (req, res) => {
  try {
    console.log('Order fetch request:', { 
      orderId: req.params.id, 
      userId: req.user.userId,
      userRole: req.user.role 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ orderId —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    const orderId = parseInt(req.params.id);
    if (isNaN(orderId)) {
      console.log('Invalid orderId:', req.params.id);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞' });
    }
    
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { 
        items: { 
          include: { 
            product: { 
              select: { 
                id: true, 
                name: true, 
                nameHe: true,
                imageUrls: true 
              } 
            } 
          } 
        },
        user: true
      }
    });
    
    console.log('Order found:', order ? { id: order.id, userId: order.userId } : null);
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (order.userId !== req.user.userId && req.user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É' });
    }
    
    res.json(order);
  } catch (error) {
    console.error('Order fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});

// === –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ===
app.post('/api/profile/orders/:id/cancel', authMiddleware, async (req, res) => {
  try {
    const order = await prisma.order.findUnique({
      where: { id: parseInt(req.params.id) },
      include: { items: true }
    });
    if (!order) return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    if (order.userId !== req.user.userId && req.user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞' });
    }
    if (order.status === 'cancelled') {
      return res.status(400).json({ error: '–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω' });
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥
    for (const item of order.items) {
      await prisma.product.update({
        where: { id: item.productId },
        data: { quantity: { increment: item.quantity } }
      });
    }
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await prisma.order.update({
      where: { id: order.id },
      data: { status: 'cancelled' }
    });
    res.json({ message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥' });
  } catch (error) {
    console.error('Order cancel error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞' });
  }
});

// === –°–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
app.delete('/api/profile/orders/:id', authMiddleware, async (req, res) => {
  try {
    const order = await prisma.order.findUnique({
      where: { id: parseInt(req.params.id) },
      include: { items: true }
    });
    if (!order) return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    if (order.userId !== req.user.userId && req.user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä—ã—Ç–∏—é –∑–∞–∫–∞–∑–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "–ø–æ–ª—É—á–µ–Ω" –∏–ª–∏ "–æ—Ç–º–µ–Ω–µ–Ω"
    if (order.status !== 'pickedup' && order.status !== 'cancelled') {
      return res.status(400).json({ error: '–ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ü–æ–ª—É—á–µ–Ω" –∏–ª–∏ "–û—Ç–º–µ–Ω–µ–Ω"' });
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await prisma.userHiddenOrder.create({
      data: {
        userId: req.user.userId,
        orderId: order.id
      }
    });
    
    res.json({ message: '–ó–∞–∫–∞–∑ —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞' });
  } catch (error) {
    console.error('Order hide error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});

// –í–†–ï–ú–ï–ù–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø: –ø–µ—Ä–µ–Ω–æ—Å–∏–º imageUrl –≤ imageUrls
async function migrateImageUrls() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const translationFields = await getTranslationFields();
    
    if (translationFields.length === 0) {
      console.log('‚ö†Ô∏è –ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.');
      return;
    }
    
    const products = await prisma.product.findMany();
    for (const product of products) {
      if (product.imageUrl && (!product.imageUrls || product.imageUrls.length === 0)) {
        await prisma.product.update({
          where: { id: product.id },
          data: {
            imageUrls: [product.imageUrl],
            imageUrl: null
          }
        });
      }
    }
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã
setTimeout(() => {
  migrateImageUrls();
}, 5000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—è isHidden
app.patch('/api/products/:id/hidden', authMiddleware, async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const { isHidden } = req.body;
    
    const updated = await prisma.product.update({
      where: { id: parseInt(req.params.id) },
      data: { isHidden: isHidden === 'true' || isHidden === true }
    });
    
    res.json(updated);
  } catch (error) {
    console.error('Error updating product visibility:', error);
    res.status(500).json({ error: 'Failed to update product visibility' });
  }
});

app.put('/api/products/:id', authMiddleware, upload.array('images', 7), 
  smartImageUploadMiddleware.processUploadedFiles.bind(smartImageUploadMiddleware), 
  async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ID:', req.params.id);
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
    console.log('  - nameHe:', req.body.nameHe);
    console.log('  - descriptionHe:', req.body.descriptionHe);
    console.log('  - name:', req.body.name);
    console.log('  - description:', req.body.description);
    
    const { name, description, nameHe, descriptionHe, price, category, subcategory, ageGroup, gender, quantity, article, brand, country, length, width, height, isHidden, removedImages, currentExistingImages, mainImageIndex, inputLanguage = 'ru' } = req.body;
    
    console.log('API: Received product update data:', {
      name, description, price, category, subcategory, ageGroup, gender, quantity, article, brand, country, length, width, height, isHidden
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const currentProduct = await prisma.product.findUnique({
      where: { id: parseInt(req.params.id) }
    });
    
    if (!currentProduct) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let imageUrls = currentProduct.imageUrls || [];
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (currentExistingImages) {
      try {
        const parsedCurrentImages = JSON.parse(currentExistingImages);
        imageUrls = parsedCurrentImages;
      } catch (e) {
        console.error('Error parsing currentExistingImages:', e);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    console.log('üñºÔ∏è PUT /api/products/:id - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤');
    console.log('üñºÔ∏è PUT /api/products/:id - req.files =', req.files ? req.files.length : 'undefined');
    console.log('üñºÔ∏è PUT /api/products/:id - req.imageUrls =', req.imageUrls);
    
    if (req.files && req.files.length > 0) {
      const newImageUrls = req.files.map((file, index) => {
        console.log('üñºÔ∏è PUT /api/products/:id - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', file.originalname);
        console.log('üñºÔ∏è PUT /api/products/:id - file.filename =', file.filename);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Cloudinary –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if (req.imageUrls && req.imageUrls[index]) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Cloudinary
          const url = req.imageUrls[index];
          console.log('üñºÔ∏è PUT /api/products/:id - –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudinary URL:', url);
          return url;
        } else if (file.filename) {
          // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          const url = `/uploads/${file.filename}`;
          console.log('üñºÔ∏è PUT /api/products/:id - –ò—Å–ø–æ–ª—å–∑—É–µ–º file.filename:', url);
          return url;
        } else {
          // Fallback –¥–ª—è production
          const url = `/uploads/${Date.now()}_${file.originalname}`;
          console.log('üñºÔ∏è PUT /api/products/:id - Fallback URL:', url);
          return url;
        }
      });
      imageUrls = [...imageUrls, ...newImageUrls];
      console.log('üñºÔ∏è PUT /api/products/:id - –ò—Ç–æ–≥–æ–≤—ã–µ imageUrls:', imageUrls);
    }
    
    // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≥–ª–∞–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    if (mainImageIndex !== undefined && imageUrls.length > 0) {
      const mainIndex = parseInt(mainImageIndex);
      if (mainIndex >= 0 && mainIndex < imageUrls.length) {
        const mainImage = imageUrls[mainIndex];
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        imageUrls = [mainImage, ...imageUrls.filter((_, index) => index !== mainIndex)];
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
    let categoryName = category;
    if (category && !isNaN(category)) {
      const categoryRecord = await prisma.category.findUnique({
        where: { id: parseInt(category) }
      });
      categoryName = categoryRecord ? categoryRecord.name : category;
      console.log('API: Category processing - category:', category, 'categoryName:', categoryName);
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let subcategoryId = null;
    if (subcategory) {
      // –ï—Å–ª–∏ subcategory - —ç—Ç–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
      if (!isNaN(subcategory)) {
        subcategoryId = parseInt(subcategory);
        console.log('API: Subcategory processing - subcategory ID:', subcategoryId);
      } else {
        // –ï—Å–ª–∏ subcategory - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        const subcategoryRecord = await prisma.category.findFirst({
          where: { 
            name: subcategory,
            parentId: parseInt(category)
          }
        });
        subcategoryId = subcategoryRecord ? subcategoryRecord.id : null;
        console.log('API: Subcategory processing - subcategory name:', subcategory, 'found ID:', subcategoryId);
      }
    }

    console.log('API: Final update data - categoryId:', category && !isNaN(category) ? parseInt(category) : null, 'subcategoryId:', subcategoryId);
    console.log('API: About to update product with include...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if (category && !isNaN(category)) {
      const categoryExists = await prisma.category.findUnique({
        where: { id: parseInt(category) }
      });
      console.log('API: Category exists check:', categoryExists);
      
      if (!categoryExists) {
        console.log('API: WARNING - Category with ID', parseInt(category), 'does not exist!');
      }
    }
    
    if (subcategoryId) {
      const subcategoryExists = await prisma.category.findUnique({
        where: { id: subcategoryId }
      });
      console.log('API: Subcategory exists check:', subcategoryExists);
      
      if (!subcategoryExists) {
        console.log('API: WARNING - Subcategory with ID', subcategoryId, 'does not exist!');
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const productData = {
      name,
      description,
      nameHe: nameHe || null,
      descriptionHe: descriptionHe || null,
      price: parseFloat(price),
      categoryName: categoryName,
      categoryId: category && !isNaN(category) ? parseInt(category) : null,
      subcategoryId: subcategoryId,
      ageGroup,
      gender,
      imageUrls,
      ...(quantity !== undefined ? { quantity: parseInt(quantity) } : {}),
      ...(isHidden !== undefined ? { isHidden: isHidden === 'true' || isHidden === true } : {}),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:
      article: article || null,
      brand: brand || null,
      country: country || null,
      length: length ? parseFloat(length) : null,
      width: width ? parseFloat(width) : null,
      height: height ? parseFloat(height) : null
    };

    const updated = await prisma.product.update({
      where: { id: parseInt(req.params.id) },
      data: productData,
      include: {
        category: {
          select: { id: true, name: true }
        },
        subcategory: {
          select: { id: true, name: true }
        }
      }
    });
    
    console.log('API: Product updated successfully:', updated.id);
    console.log('API: Updated product category:', updated.category);
    console.log('API: Updated product subcategory:', updated.subcategory);
    console.log('API: Updated product categoryId:', updated.categoryId);
    console.log('API: Updated product subcategoryId:', updated.subcategoryId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    if (updated.categoryId) {
      const categoryCheck = await prisma.category.findUnique({
        where: { id: updated.categoryId }
      });
      console.log('API: Category check result:', categoryCheck);
    }
    
    if (updated.subcategoryId) {
      const subcategoryCheck = await prisma.category.findUnique({
        where: { id: updated.subcategoryId }
      });
      console.log('API: Subcategory check result:', subcategoryCheck);
    }
    
    res.json(updated);
  } catch (error) {
    console.error('Error updating product:', error);
    res.status(500).json({ error: 'Failed to update product' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
app.delete('/api/products/:id/images/:imageIndex', authMiddleware, async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const productId = parseInt(req.params.id);
    const imageIndex = parseInt(req.params.imageIndex);
    
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });
    
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const imageUrls = product.imageUrls || [];
    if (imageIndex < 0 || imageIndex >= imageUrls.length) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    const updatedImageUrls = imageUrls.filter((_, index) => index !== imageIndex);
    
    const updated = await prisma.product.update({
      where: { id: productId },
      data: { imageUrls: updatedImageUrls }
    });
    
    res.json(updated);
  } catch (error) {
    console.error('Error deleting product image:', error);
    res.status(500).json({ error: 'Failed to delete product image' });
  }
});

// === API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ ===

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞
app.post('/api/products/:id/translate', authMiddleware, async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const productId = parseInt(req.params.id);
    const translatedProduct = await TranslationService.autoTranslateProduct(productId);
    
    res.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω',
      product: translatedProduct
    });
  } catch (error) {
    console.error('Error translating product:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
app.post('/api/products/translate-all', authMiddleware, async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const translatedCount = await TranslationService.translateAllProducts();
    
    res.json({
      success: true,
      message: `–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ ${translatedCount} —Ç–æ–≤–∞—Ä–æ–≤`,
      translatedCount
    });
  } catch (error) {
    console.error('Error translating all products:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
app.get('/api/products/with-translations', async (req, res) => {
  try {
    const { language = 'ru' } = req.query;
    const products = await TranslationService.getAllProductsWithTranslations(language);
    
    res.json(products);
  } catch (error) {
    console.error('Error getting products with translations:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é
app.put('/api/products/:id/translations', authMiddleware, async (req, res) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ admin
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const productId = parseInt(req.params.id);
    const { nameHe, descriptionHe } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const translationFields = await getTranslationFields();
    if (translationFields.length === 0) {
      return res.status(400).json({ 
        error: '–ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.' 
      });
    }
    
    const updatedProduct = await TranslationService.updateProductTranslations(
      productId, 
      nameHe, 
      descriptionHe
    );
    
    res.json({
      success: true,
      message: '–ü–µ—Ä–µ–≤–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
      product: updatedProduct
    });
  } catch (error) {
    console.error('Error updating product translations:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤' });
  }
});

// === Admin: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã ===
app.get('/api/admin/orders', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const orders = await prisma.order.findMany({
      include: {
        items: { include: { product: true } },
        user: true
      },
      orderBy: { createdAt: 'desc' }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    const ordersWithTotal = orders.map(order => ({
      ...order,
      total: order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0),
      // –î–ª—è –≥–æ—Å—Ç–µ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Å—Ç–µ
      user: order.user || {
        name: order.guestName || '–ì–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑',
        email: order.guestEmail || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        phone: order.guestPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
      }
    }));
    
    res.json(ordersWithTotal);
  } catch (error) {
    console.error('Admin orders fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤' });
  }
});

// === Admin: –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ===
app.put('/api/admin/orders/:id', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const { status } = req.body;

    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const order = await prisma.order.findUnique({
      where: { id: parseInt(req.params.id) },
      include: { 
        user: true,
        items: { include: { product: true } }
      }
    });
    
    const updated = await prisma.order.update({
      where: { id: parseInt(req.params.id) },
      data: { status },
      include: { 
        user: true,
        items: { include: { product: true } }
      }
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    
    // –í endpoint —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PUT /api/admin/orders/:id):
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 'delivered':
    
    if (status === 'pickedup') {
      
      try {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å userId (–Ω–µ –≥–æ—Å—Ç–µ–≤–æ–π –∑–∞–∫–∞–∑)
        if (order.userId) {
          const notification = await prisma.notification.create({
            data: {
              userId: order.userId,
              type: 'review_request',
              title: 'reviews.notification.title',
              message: 'reviews.notification.message',
              actionUrl: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/review-order?orderId=${order.id}`,
              actionText: 'reviews.notification.actionText'
            }
          });
          console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∑—ã–≤–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞:', order.id);
        } else {
          console.log('‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', order.id);
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    } else {
      
    }
    
    
    res.json(updated);
  } catch (error) {
    console.error('Admin order status update error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞' });
  }
});

// === Admin: —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ ===
app.delete('/api/admin/orders/:id', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const orderId = parseInt(req.params.id);
    
    console.log('DELETE /api/admin/orders/:id - Starting deletion process');
    console.log('DELETE /api/admin/orders/:id - Order ID:', orderId);
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      console.log('DELETE /api/admin/orders/:id - Deleting order items...');
      await prisma.orderItem.deleteMany({
        where: { orderId: orderId }
      });
      console.log('DELETE /api/admin/orders/:id - Order items deleted successfully');
    } catch (orderItemsError) {
      console.error('DELETE /api/admin/orders/:id - Error deleting order items:', orderItemsError);
    }
    
    try {
      console.log('DELETE /api/admin/orders/:id - Deleting hidden orders...');
      await prisma.userHiddenOrder.deleteMany({
        where: { orderId: orderId }
      });
      console.log('DELETE /api/admin/orders/:id - Hidden orders deleted successfully');
    } catch (hiddenOrdersError) {
      console.error('DELETE /api/admin/orders/:id - Error deleting hidden orders:', hiddenOrdersError);
    }
    
    // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
    console.log('DELETE /api/admin/orders/:id - Deleting order...');
    await prisma.order.delete({ 
      where: { id: orderId } 
    });
    console.log('DELETE /api/admin/orders/:id - Order deleted successfully');
    
    res.json({ message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('DELETE /api/admin/orders/:id - Error details:', {
      message: error.message,
      code: error.code,
      meta: error.meta
    });
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' });
  }
});

// --- –ú–∞–≥–∞–∑–∏–Ω—ã ---
app.get('/api/stores', async (req, res) => {
  try {
    const stores = [
      { id: 'store1', name: '◊ó◊†◊ï◊™ ◊ß◊®◊ô◊ô◊™ ◊ô◊ù', address: '◊®◊ï◊ë◊®◊ò ◊°◊ï◊ú◊ì 8 ◊ß◊®◊ô◊ô◊™ ◊ô◊ù' },
      { id: 'store2', name: '◊ó◊†◊ï◊™ ◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü', address: '◊ï◊ô◊¶◊û◊ü 6 ◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü' }
    ];
    res.json(stores);
  } catch (error) {
    console.error('Error fetching stores:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤' });
  }
});

// --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
app.get('/api/categories', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const token = req.headers.authorization?.split(' ')[1];
    let isAdmin = false;
    
    if (token) {
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await prisma.user.findUnique({ where: { id: decoded.userId } });
        isAdmin = user?.role === 'admin';
      } catch (e) {
        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      }
    }
    
    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
    let whereClause = isAdmin ? {} : { active: true };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ parentId –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (req.query.parentId) {
      whereClause.parentId = parseInt(req.query.parentId);
    }
    
    const categories = await prisma.category.findMany({ 
      where: whereClause,
      orderBy: { order: 'asc' }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∏–∫–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getCategoryIcon = (categoryName) => {
      const iconMap = {
        '–ò–≥—Ä—É—à–∫–∏': '/toys.png',
        '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã': '/constructor.png',
        '–ü–∞–∑–ª—ã': '/puzzle.png',
        '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': '/creativity.png',
        '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': '/stationery.png',
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '/bicycle.png',
        '–û—Ç–¥—ã—Ö –Ω–∞ –≤–æ–¥–µ': '/voda.png',
        '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': '/nastolka.png',
        '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã': '/edu_game.png',
        '–ê–∫—Ü–∏–∏': '/sale.png'
      };
      return iconMap[categoryName] || '/toys.png';
    };

    // –î–æ–±–∞–≤–ª—è–µ–º fallback –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const categoriesWithIcons = categories.map(category => ({
      ...category,
      image: category.image || getCategoryIcon(category.name)
    }));

    res.json(categoriesWithIcons);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∫–ª—é—á–∞—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ) –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
app.get('/api/admin/categories', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    const categories = await prisma.category.findMany({
      orderBy: { order: 'asc' }
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è fallback –∏–∫–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getCategoryIcon = (categoryName) => {
      const iconMap = {
        '–ò–≥—Ä—É—à–∫–∏': '/toys.png',
        '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã': '/constructor.png',
        '–ü–∞–∑–ª—ã': '/puzzle.png',
        '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': '/creativity.png',
        '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': '/stationery.png',
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '/bicycle.png',
        '–û—Ç–¥—ã—Ö –Ω–∞ –≤–æ–¥–µ': '/voda.png',
        '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': '/nastolka.png',
        '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã': '/edu_game.png',
        '–ê–∫—Ü–∏–∏': '/sale.png'
      };
      return iconMap[categoryName] || '/toys.png';
    };

    // –î–æ–±–∞–≤–ª—è–µ–º fallback –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const categoriesWithIcons = categories.map(category => ({
      ...category,
      image: category.image || getCategoryIcon(category.name)
    }));

    res.json(categoriesWithIcons);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

app.patch('/api/categories/:id/toggle', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    const id = Number(req.params.id);
    console.log('API: Toggle –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:', id);
    
    const category = await prisma.category.findUnique({ where: { id } });
    if (!category) {
      console.log('API: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ID:', id);
      return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    console.log('API: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category.name, 'active:', category.active);
    const newActiveState = !category.active;
    console.log('API: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ active:', newActiveState);
    
    const updated = await prisma.category.update({
      where: { id },
      data: { active: newActiveState }
    });
    
    console.log('API: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updated.name, 'active:', updated.active);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
    const verification = await prisma.category.findUnique({ where: { id } });
    console.log('API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', verification.name, 'active:', verification.active);
    
    res.json(updated);
  } catch (e) {
    console.error('API: –û—à–∏–±–∫–∞ toggle –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

app.get('/api/categories/:id', async (req, res) => {
  try {
    const id = Number(req.params.id);
    const category = await prisma.category.findUnique({ where: { id } });
    if (!category) return res.status(404).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json(category);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

app.delete('/api/categories/:id', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    const id = Number(req.params.id);
    await prisma.category.delete({ where: { id } });
    res.json({ success: true });
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
app.put('/api/categories/reorder', authMiddleware, async (req, res) => {
  try {

    
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {

      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    const { categoryIds } = req.body; // –º–∞—Å—Å–∏–≤ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
    
    
    if (!Array.isArray(categoryIds)) {
      
      return res.status(400).json({ error: 'categoryIds –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º' });
    }
    
    
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for (let i = 0; i < categoryIds.length; i++) {
      const categoryId = Number(categoryIds[i]);
      
      
      await prisma.category.update({
        where: { id: categoryId },
        data: { order: i }
      });
    }
    
    
    res.json({ success: true, message: '–ü–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

app.put('/api/categories/:id', authMiddleware, upload.single('image'), productionUploadMiddleware.processSingleImage.bind(productionUploadMiddleware), async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    const id = Number(req.params.id);
    const { name, parentId } = req.body;
    const data = { name };
    if (parentId !== undefined && parentId !== null && parentId !== '') {
      data.parentId = Number(parentId);
    } else {
      data.parentId = null;
    }
    
    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã–µ
    if (req.file) {
      data.image = req.file.filename;
      console.log('API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', req.file.filename);
    }
    
    console.log('API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ID:', id, '–î–∞–Ω–Ω—ã–µ:', data);
    const updated = await prisma.category.update({ where: { id }, data });
    console.log('API: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updated);
    res.json(updated);
  } catch (e) {
    console.error('API: –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

app.post('/api/categories', authMiddleware, upload.single('image'), productionUploadMiddleware.processSingleImage.bind(productionUploadMiddleware), async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    const { name, parentId } = req.body;
    const data = { name };
    if (parentId !== undefined && parentId !== null && parentId !== '') {
      data.parentId = Number(parentId);
    }
    
    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã–µ
    if (req.file) {
      data.image = req.file.filename;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è
    const maxOrder = await prisma.category.findFirst({
      where: { parentId: data.parentId || null },
      orderBy: { order: 'desc' },
      select: { order: true }
    });
    
    const newOrder = (maxOrder?.order || -1) + 1;
    data.order = newOrder;
    
    const category = await prisma.category.create({ data });
    res.json(category);
  } catch (e) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

app.patch('/api/categories/:id/image', authMiddleware, upload.single('image'), productionUploadMiddleware.processSingleImage.bind(productionUploadMiddleware), async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }
    
    const id = Number(req.params.id);
    if (!req.file) return res.status(400).json({ error: '–ù–µ—Ç —Ñ–∞–π–ª–∞' });
    const updated = await prisma.category.update({
      where: { id },
      data: { image: req.file.filename }
    });
    res.json(updated);
  } catch (e) {
    console.error('API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä—É (—Ç–æ–ª—å–∫–æ published)
app.get('/api/products/:id/reviews', async (req, res) => {
  try {
    const reviews = await prisma.review.findMany({
      where: { productId: parseInt(req.params.id), status: 'published' },
      include: { user: { select: { id: true, name: true } } },
      orderBy: { createdAt: 'desc' }
    });
    res.json(reviews);
  } catch (error) {
    console.error('Error fetching reviews:', error);
    res.status(500).json({ error: 'Failed to fetch reviews' });
  }
});

// –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑—ã–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä)
app.post('/api/products/:id/reviews', authMiddleware, async (req, res) => {
  try {
    const { rating, text } = req.body;
    const productId = parseInt(req.params.id);
    const userId = req.user.userId;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–∫–∞–∑ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const orderWithProduct = await prisma.order.findFirst({
      where: {
        userId,
        items: { some: { productId } }
      }
    });
    if (!orderWithProduct) {
      return res.status(403).json({ error: '–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.' });
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
    const existing = await prisma.review.findFirst({ where: { productId, userId } });
    if (existing) {
      return res.status(400).json({ error: '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.' });
    }
    const review = await prisma.review.create({
      data: { productId, userId, rating, text, status: 'pending' }
    });
    res.status(201).json(review);
  } catch (error) {
    console.error('Error creating review:', error);
    res.status(500).json({ error: 'Failed to create review' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞, —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É)
app.get('/api/admin/reviews', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const { status } = req.query;
    const reviews = await prisma.review.findMany({
      where: status ? { status } : {},
      include: { product: true, user: { select: { id: true, name: true } } },
      orderBy: { createdAt: 'desc' }
    });
    res.json(reviews);
  } catch (error) {
    console.error('Error fetching all reviews:', error);
    res.status(500).json({ error: 'Failed to fetch reviews' });
  }
});

// –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ (published/rejected)
app.put('/api/admin/reviews/:id', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const { status } = req.body; // 'published' –∏–ª–∏ 'rejected'
    if (!['published', 'rejected'].includes(status)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    const review = await prisma.review.update({
      where: { id: parseInt(req.params.id) },
      data: { status }
    });
    res.json(review);
  } catch (error) {
    console.error('Error moderating review:', error);
    res.status(500).json({ error: 'Failed to moderate review' });
  }
});

// === –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.get('/api/profile/wishlist', authMiddleware, async (req, res) => {
  try {
    let wishlist = await prisma.wishlist.findUnique({
      where: { userId: req.user.userId },
      include: { items: { include: { product: true } } }
    });
    if (!wishlist) {
      wishlist = await prisma.wishlist.create({ data: { userId: req.user.userId } });
      wishlist.items = [];
    }
    res.json(wishlist);
  } catch (error) {
    console.error('Wishlist fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

// === –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ===
app.post('/api/profile/wishlist/add', authMiddleware, async (req, res) => {
  try {
    const { productId } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    let wishlist = await prisma.wishlist.findUnique({ where: { userId: req.user.userId } });
    if (!wishlist) {
      wishlist = await prisma.wishlist.create({ data: { userId: req.user.userId } });
    }
    const existing = await prisma.wishlistItem.findFirst({ where: { wishlistId: wishlist.id, productId } });
    if (existing) return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' });
    await prisma.wishlistItem.create({ data: { wishlistId: wishlist.id, productId } });
    const updated = await prisma.wishlist.findUnique({ where: { id: wishlist.id }, include: { items: { include: { product: true } } } });
    res.json(updated);
  } catch (error) {
    console.error('Wishlist add error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
  }
});

// === –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ===
app.post('/api/profile/wishlist/remove', authMiddleware, async (req, res) => {
  try {
    const { productId } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    let wishlist = await prisma.wishlist.findUnique({ where: { userId: req.user.userId } });
    if (!wishlist) return res.status(404).json({ error: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    await prisma.wishlistItem.deleteMany({ where: { wishlistId: wishlist.id, productId } });
    const updated = await prisma.wishlist.findUnique({ where: { id: wishlist.id }, include: { items: { include: { product: true } } } });
    res.json(updated);
  } catch (error) {
    console.error('Wishlist remove error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

// === –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è ===
app.post('/api/auth/change-password', authMiddleware, async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;
    
    if (!newPassword) {
      return res.status(400).json({ error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    if (newPassword.length < 6) {
      return res.status(400).json({ error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }
    
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å (–Ω–µ OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if (user.passwordHash) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–∞—Ä–æ–ª–µ–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      if (!currentPassword) {
        return res.status(400).json({ error: '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞—Ä–æ–ª–µ–º' });
      }
      
      const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.passwordHash);
      if (!isCurrentPasswordValid) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å' });
      }
    } else {
      // OAuth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Google/Facebook) - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      if (currentPassword) {
        return res.status(400).json({ error: '–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å OAuth —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è' });
      }
    }
    
    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const newPasswordHash = await bcrypt.hash(newPassword, 10);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.user.update({
      where: { id: user.id },
      data: { passwordHash: newPasswordHash }
    });
    
    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω' });
  } catch (error) {
    console.error('Password change error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è' });
  }
});

// === Admin: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
app.get('/api/admin/users', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    const users = await prisma.user.findMany({
      select: { id: true, name: true, email: true, role: true, createdAt: true }
    });
    res.json(users);
  } catch (error) {
    console.error('Admin users fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

// === Admin: —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.delete('/api/admin/users/:id', authMiddleware, async (req, res) => {
  const admin = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!admin || admin.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  const userId = parseInt(req.params.id);
  if (userId === admin.id) {
    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
  }
  const user = await prisma.user.findUnique({ where: { id: userId } });
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  if (user.role === 'admin') {
    return res.status(400).json({ error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  try {
    await prisma.user.delete({ where: { id: userId } });
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('Admin user delete error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// === Admin: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
app.post('/api/admin/users/:id/notify', authMiddleware, async (req, res) => {
  const admin = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!admin || admin.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  const userId = parseInt(req.params.id);
  const { message } = req.body;
  if (!message || typeof message !== 'string' || !message.trim()) {
    return res.status(400).json({ error: '–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }
  const user = await prisma.user.findUnique({ where: { id: userId } });
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  // –°–æ–∑–¥–∞—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
  await prisma.notification.create({
    data: {
      userId: user.id,
      type: 'admin',
      title: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      message: message,
      isRead: false
    }
  });
  res.json({ success: true });
});

// === –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.get('/api/profile/notifications', authMiddleware, async (req, res) => {
  try {
    const notifications = await prisma.notification.findMany({
      where: { userId: req.user.userId },
      orderBy: { createdAt: 'desc' }
    });
    res.json(notifications);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
});

// === –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.get('/api/profile/notifications/unread-count', authMiddleware, async (req, res) => {
  try {
    const count = await prisma.notification.count({
      where: { 
        userId: req.user.userId,
        isRead: false
      }
    });
    res.json({ count });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
});

// === –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.delete('/api/profile/notifications/:id', authMiddleware, async (req, res) => {
  try {
    const notificationId = parseInt(req.params.id);
    if (isNaN(notificationId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const deleted = await prisma.notification.deleteMany({
      where: { id: notificationId, userId: req.user.userId }
    });
    if (deleted.count === 0) {
      return res.status(404).json({ error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
});

// === –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.delete('/api/profile/notifications', authMiddleware, async (req, res) => {
  try {
    await prisma.notification.deleteMany({
      where: { userId: req.user.userId }
    });
    res.json({ message: '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('Error deleting all notifications:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
});





process.on('SIGINT', async () => {

  await prisma.$disconnect();
  process.exit(0);
});

// POST /api/reviews/shop ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ
app.post('/api/reviews/shop', authMiddleware, async (req, res) => {
  try {
    const { orderId, rating, text } = req.body;
    console.log('Shop review request:', { orderId, rating, text, userId: req.user.userId });
    
    if (!orderId || !rating) {
      console.log('Missing required fields:', { orderId, rating });
      return res.status(400).json({ error: 'orderId –∏ rating –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
    const parsedOrderId = parseInt(orderId);
    const parsedRating = parseInt(rating);
    
    console.log('Parsed values:', { parsedOrderId, parsedRating });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–ª —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
    const order = await prisma.order.findUnique({ where: { id: parsedOrderId } });
    console.log('Order found:', order ? { id: order.id, userId: order.userId } : null);
    
    if (!order || order.userId !== req.user.userId) {
      console.log('Access denied: order not found or user mismatch');
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
    const existing = await prisma.shopReview.findFirst({ where: { orderId: parsedOrderId, userId: req.user.userId } });
    console.log('Existing shop review check:', existing ? { id: existing.id } : 'No existing review');
    
    if (existing) {
      console.log('Shop review already exists');
      return res.status(400).json({ error: '–û—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const review = await prisma.shopReview.create({
      data: {
        userId: req.user.userId,
        orderId: parsedOrderId,
        rating: parsedRating,
        text: text,
        status: 'pending'
      }
    });
    
    console.log('Shop review created successfully:', { id: review.id });
    res.json(review);
  } catch (error) {
    console.error('Error creating shop review:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// GET /api/reviews/shop/published ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ
app.get('/api/reviews/shop/published', async (req, res) => {
  try {
    const reviews = await prisma.shopReview.findMany({
      where: { status: 'published' },
      orderBy: { createdAt: 'desc' },
      include: { user: { select: { name: true, surname: true } } }
    });

    res.json(reviews);
  } catch (error) {
    console.error('API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// GET /api/reviews/shop ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏)
app.get('/api/reviews/shop', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const token = req.headers.authorization?.split(' ')[1];
    let isAdmin = false;
    
    if (token) {
      try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await prisma.user.findUnique({ where: { id: decoded.userId } });
        isAdmin = user?.role === 'admin';
      } catch (error) {
        console.log('Token verification failed:', error.message);
      }
    }

    const whereClause = isAdmin ? {} : { status: 'published' };
    
    const reviews = await prisma.shopReview.findMany({
      where: whereClause,
      orderBy: { createdAt: 'desc' },
      include: { user: { select: { name: true, surname: true } } }
    });

    res.json(reviews);
  } catch (error) {
    console.error('API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// PUT /api/admin/reviews/shop/:id ‚Äî –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ
app.put('/api/admin/reviews/shop/:id', authMiddleware, async (req, res) => {
  try {
    console.log('Shop review moderation request:', { 
      reviewId: req.params.id, 
      status: req.body.status, 
      body: req.body,
      userId: req.user.userId,
      userRole: req.user.role 
    });
    
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    const { status } = req.body;
    console.log('Validating shop review status:', status, 'Valid statuses:', ['published', 'rejected', 'pending', 'hidden']);
    if (!['published', 'rejected', 'pending', 'hidden'].includes(status)) {
      console.log('Invalid shop review status:', status);
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    
    const review = await prisma.shopReview.update({
      where: { id: parseInt(req.params.id) },
      data: { status }
    });
    
    console.log('Shop review updated successfully:', { id: review.id, status: review.status });
    res.json(review);
  } catch (error) {
    console.error('Error updating shop review:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// DELETE /api/admin/reviews/shop/:id ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ
app.delete('/api/admin/reviews/shop/:id', authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    await prisma.shopReview.delete({
      where: { id: parseInt(req.params.id) }
    });
    res.json({ message: '–û—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// POST /api/reviews/product ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ
app.post('/api/reviews/product', authMiddleware, async (req, res) => {
  try {
    const { orderId, productId, rating, text } = req.body;
    console.log('Product review request:', { orderId, productId, rating, text, userId: req.user.userId });
    
    if (!orderId || !productId || !rating) {
      console.log('Missing required fields:', { orderId, productId, rating });
      return res.status(400).json({ error: 'orderId, productId –∏ rating –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã
    const parsedOrderId = parseInt(orderId);
    const parsedProductId = parseInt(productId);
    const parsedRating = parseInt(rating);
    
    console.log('Parsed values:', { parsedOrderId, parsedProductId, parsedRating });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    const order = await prisma.order.findUnique({
      where: { id: parsedOrderId },
      include: { items: true }
    });
    
    console.log('Order found:', order ? { id: order.id, userId: order.userId, itemsCount: order.items.length } : null);
    
    if (!order || order.userId !== req.user.userId) {
      console.log('Access denied: order not found or user mismatch');
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É' });
    }
    
    const hasProduct = order.items.some(item => item.productId === parsedProductId);
    console.log('Product check:', { hasProduct, orderItems: order.items.map(item => ({ productId: item.productId, quantity: item.quantity })) });
    
    if (!hasProduct) {
      console.log('Product not found in order');
      return res.status(400).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É –∏ –∑–∞–∫–∞–∑—É –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
    const existing = await prisma.review.findFirst({ 
      where: { orderId: parsedOrderId, productId: parsedProductId, userId: req.user.userId } 
    });
    
    console.log('Existing review check:', existing ? { id: existing.id } : 'No existing review');
    
    if (existing) {
      console.log('Review already exists');
      return res.status(400).json({ error: '–û—Ç–∑—ã–≤ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }
    
    const review = await prisma.review.create({
      data: {
        userId: req.user.userId,
        productId: parsedProductId,
        orderId: parsedOrderId,
        rating: parsedRating,
        text: text,
        status: 'pending'
      }
    });
    
    console.log('Review created successfully:', { id: review.id });
    res.json(review);
  } catch (error) {
    console.error('Error creating product review:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ' });
  }
});

// GET /api/reviews/product/:productId ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–µ
app.get('/api/reviews/product/:productId', async (req, res) => {
  try {
    const productId = parseInt(req.params.productId);
    const reviews = await prisma.review.findMany({
      where: { productId, status: 'published' },
      orderBy: { createdAt: 'desc' },
      include: { user: { select: { name: true, surname: true } } }
    });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–µ' });
  }
});

// GET /api/admin/reviews/product ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è CMS
app.get('/api/admin/reviews/product', authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    const reviews = await prisma.review.findMany({
      orderBy: { createdAt: 'desc' },
      include: { user: { select: { name: true, surname: true, email: true } }, product: { select: { name: true } } }
    });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö' });
  }
});

// PUT /api/admin/reviews/product/:id ‚Äî –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ
app.put('/api/admin/reviews/product/:id', authMiddleware, async (req, res) => {
  try {
    console.log('Product review moderation request:', { 
      reviewId: req.params.id, 
      status: req.body.status, 
      body: req.body,
      userId: req.user.userId,
      userRole: req.user.role 
    });
    
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    const { status } = req.body;
    console.log('Validating product review status:', status, 'Valid statuses:', ['published', 'rejected', 'pending', 'hidden']);
    if (!['published', 'rejected', 'pending', 'hidden'].includes(status)) {
      console.log('Invalid product review status:', status);
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
    }
    
    const review = await prisma.review.update({
      where: { id: parseInt(req.params.id) },
      data: { status }
    });
    
    console.log('Product review updated successfully:', { id: review.id, status: review.status });
    res.json(review);
  } catch (error) {
    console.error('Error updating product review:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ' });
  }
});

// DELETE /api/admin/reviews/product/:id ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ
app.delete('/api/admin/reviews/product/:id', authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    await prisma.review.delete({
      where: { id: parseInt(req.params.id) }
    });
    res.json({ message: '–û—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ —Ç–æ–≤–∞—Ä–µ' });
  }
});

// GET /api/profile/reviews/shop ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–∞–≥–∞–∑–∏–Ω–µ (–∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
app.get('/api/profile/reviews/shop', authMiddleware, async (req, res) => {
  try {
    const reviews = await prisma.shopReview.findMany({
      where: { 
        userId: req.user.userId,
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –æ—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ
        NOT: {
          hiddenBy: {
            some: {
              userId: req.user.userId
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// GET /api/profile/reviews/product ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–≤–∞—Ä–∞—Ö (–∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ)
app.get('/api/profile/reviews/product', authMiddleware, async (req, res) => {
  try {
    const reviews = await prisma.review.findMany({
      where: { 
        userId: req.user.userId,
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ)
        // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –æ—Ç–∑—ã–≤—ã
        NOT: {
          hiddenBy: {
            some: {
              userId: req.user.userId
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' },
      include: { product: { select: { name: true, imageUrls: true } } }
    });
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö' });
  }
});

// POST /api/profile/reviews/product/:id/hide ‚Äî —Å–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/profile/reviews/product/:id/hide', authMiddleware, async (req, res) => {
  try {
    const reviewId = parseInt(req.params.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const review = await prisma.review.findFirst({
      where: {
        id: reviewId,
        userId: req.user.userId
      }
    });
    
    if (!review) {
      return res.status(404).json({ error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∫—Ä—ã—Ç–æ–º –æ—Ç–∑—ã–≤–µ
    await prisma.hiddenReview.create({
      data: {
        userId: req.user.userId,
        reviewId: reviewId
      }
    });
    
    res.json({ message: '–û—Ç–∑—ã–≤ —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞' });
  } catch (error) {
    if (error.code === 'P2002') {
      // –û—Ç–∑—ã–≤ —É–∂–µ —Å–∫—Ä—ã—Ç
      res.json({ message: '–û—Ç–∑—ã–≤ —É–∂–µ —Å–∫—Ä—ã—Ç' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –æ—Ç–∑—ã–≤–∞' });
    }
  }
});

// DELETE /api/profile/reviews/product/:id/hide ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/profile/reviews/product/:id/hide', authMiddleware, async (req, res) => {
  try {
    const reviewId = parseInt(req.params.id);
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∫—Ä—ã—Ç–æ–º –æ—Ç–∑—ã–≤–µ
    await prisma.hiddenReview.deleteMany({
      where: {
        userId: req.user.userId,
        reviewId: reviewId
      }
    });
    
    res.json({ message: '–û—Ç–∑—ã–≤ –ø–æ–∫–∞–∑–∞–Ω –≤ —Å–ø–∏—Å–∫–µ' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–∞' });
  }
});

// POST /api/profile/reviews/shop/:id/hide ‚Äî —Å–∫—Ä—ã—Ç—å –æ—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/profile/reviews/shop/:id/hide', authMiddleware, async (req, res) => {
  try {
    const reviewId = parseInt(req.params.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const review = await prisma.shopReview.findFirst({
      where: {
        id: reviewId,
        userId: req.user.userId
      }
    });
    
    if (!review) {
      return res.status(404).json({ error: '–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∫—Ä—ã—Ç–æ–º –æ—Ç–∑—ã–≤–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ
    await prisma.hiddenShopReview.create({
      data: {
        userId: req.user.userId,
        shopReviewId: reviewId
      }
    });
    
    res.json({ message: '–û—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞' });
  } catch (error) {
    if (error.code === 'P2002') {
      // –û—Ç–∑—ã–≤ —É–∂–µ —Å–∫—Ä—ã—Ç
      res.json({ message: '–û—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ —É–∂–µ —Å–∫—Ä—ã—Ç' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
    }
  }
});

// DELETE /api/profile/reviews/shop/:id/hide ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.delete('/api/profile/reviews/shop/:id/hide', authMiddleware, async (req, res) => {
  try {
    const reviewId = parseInt(req.params.id);
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–∫—Ä—ã—Ç–æ–º –æ—Ç–∑—ã–≤–µ –æ –º–∞–≥–∞–∑–∏–Ω–µ
    await prisma.hiddenShopReview.deleteMany({
      where: {
        userId: req.user.userId,
        shopReviewId: reviewId
      }
    });
    
    res.json({ message: '–û—Ç–∑—ã–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞–∑–∞–Ω –≤ —Å–ø–∏—Å–∫–µ' });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–∞ –æ –º–∞–≥–∞–∑–∏–Ω–µ' });
  }
});

// POST /api/admin/clear-all-data ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
app.post('/api/admin/clear-all-data', authMiddleware, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    console.log('üßπ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    const results = {};

    // –°–∫—Ä—ã—Ç—ã–µ –æ—Ç–∑—ã–≤—ã
    results.hiddenReviews = await prisma.hiddenReview.deleteMany({});
    
    // –û—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö
    results.reviews = await prisma.review.deleteMany({});
    
    // –û—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ
    results.shopReviews = await prisma.shopReview.deleteMany({});
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–æ–≤
    results.orderItems = await prisma.orderItem.deleteMany({});
    
    // –ó–∞–∫–∞–∑—ã
    results.orders = await prisma.order.deleteMany({});
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã
    results.cartItems = await prisma.cartItem.deleteMany({});
    
    // –ö–æ—Ä–∑–∏–Ω—ã
    results.carts = await prisma.cart.deleteMany({});
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    results.wishlistItems = await prisma.wishlistItem.deleteMany({});
    
    // –°–ø–∏—Å–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    results.wishlists = await prisma.wishlist.deleteMany({});
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    results.notifications = await prisma.notification.deleteMany({});
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    results.availabilityNotifications = await prisma.availabilityNotification.deleteMany({});

    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    res.json({
      message: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã',
      statistics: results
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
});

// === –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ actionUrl ===
app.delete('/api/admin/notifications/cleanup', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å actionUrl, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ 'latest'
    const deletedCount = await prisma.notification.deleteMany({
      where: {
        actionUrl: {
          contains: 'latest'
        }
      }
    });
    
    res.json({ 
      message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount.count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏`,
      deletedCount: deletedCount.count
    });
  } catch (error) {
    console.error('Error cleaning up notifications:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
});

// === –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ===
app.post('/api/admin/notifications/test', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const { orderId } = req.body;
    
    if (!orderId) {
      return res.status(400).json({ error: 'orderId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const order = await prisma.order.findUnique({
      where: { id: parseInt(orderId) }
    });
    
    if (!order) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const notification = await prisma.notification.create({
      data: {
        userId: order.userId,
        type: 'review_request',
        title: 'reviews.notification.title',
        message: 'reviews.notification.message',
        actionUrl: `${process.env.FRONTEND_URL || 'http://localhost:3000'}/review-order?orderId=${order.id}`,
        actionText: 'reviews.notification.actionText'
      }
    });
    
    res.json({ 
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
      notification
    });
  } catch (error) {
    console.error('Error creating test notification:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
});

// === –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ actionUrl ===

// === –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ===
app.get('/api/admin/orders/list', authMiddleware, async (req, res) => {
  const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
  if (!user || user.role !== 'admin') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
  }
  
  try {
    const orders = await prisma.order.findMany({
      include: {
        user: {
          select: { id: true, name: true, email: true }
        },
        items: {
          include: {
            product: {
              select: { id: true, name: true }
            }
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    res.json({ 
      orders: orders.map(order => ({
        id: order.id,
        userId: order.userId,
        userName: order.user.name,
        userEmail: order.user.email,
        status: order.status,
        totalAmount: order.totalAmount,
        itemsCount: order.items.length,
        createdAt: order.createdAt
      }))
    });
  } catch (error) {
    console.error('Error fetching orders:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤' });
  }
});

// GET /api/reviews/product ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
app.get('/api/reviews/product', authMiddleware, async (req, res) => {
  try {
    if (req.user.role !== 'admin') return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
    
    const reviews = await prisma.review.findMany({
      orderBy: { createdAt: 'desc' },
      include: { 
        user: { select: { name: true, surname: true } },
        product: { select: { name: true } }
      }
    });

    res.json(reviews);
  } catch (error) {
    console.error('API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö' });
  }
});

// === API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
app.get('/api/admin/images/stats', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const processor = new BatchImageProcessor();
    const stats = await processor.getImageStats();
    
    res.json(stats);
  } catch (error) {
    console.error('Error getting image stats:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
  }
});

// === API –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
app.post('/api/admin/images/process', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    const processor = new BatchImageProcessor();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const statsBefore = await processor.getImageStats();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const productResults = await processor.processAllProductImages();
    const categoryResults = await processor.processCategoryImages();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const statsAfter = await processor.getImageStats();
    
    const totalSaved = productResults.totalSaved + categoryResults.totalSaved;
    const totalProcessed = productResults.totalProcessed + categoryResults.totalProcessed;
    const totalErrors = productResults.errors.length + categoryResults.errors.length;
    
    res.json({
      success: true,
      statsBefore,
      statsAfter,
      results: {
        products: productResults,
        categories: categoryResults,
        total: {
          processed: totalProcessed,
          saved: totalSaved,
          errors: totalErrors
        }
      }
    });
  } catch (error) {
    console.error('Error processing images:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π' });
  }
});

// === API –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===
app.post('/api/admin/fix-category-images', authMiddleware, async (req, res) => {
  try {
    const user = await prisma.user.findUnique({ where: { id: req.user.userId } });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' });
    }

    // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const categoryImageMapping = {
      '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': 'nastolka.png',
      '–†–∏—Å–æ–≤–∞–Ω–∏–µ': 'creativity.png',
      '–ù–∞–±–æ—Ä—ã –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞': 'creativity.png',
      '–†–∞—Å–∫—Ä–∞—Å–∫–∏': 'creativity.png',
      '–ö—É–∫–ª—ã': 'toys.png',
      '–ú—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏': 'toys.png',
      '–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã': 'sport.png',
      '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è': 'toys.png',
      '–†–æ–±–æ—Ç—ã –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã': 'toys.png',
      '–ò–≥—Ä—É—à–∫–∏ –Ω–∞ —Ä–∞–¥–∏–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏': 'toys.png'
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      select: {
        id: true,
        name: true,
        image: true
      }
    });

    let updatedCount = 0;
    const updatedCategories = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (const category of categories) {
      let needsUpdate = false;
      let newImage = category.image;

      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª), –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ fallback
      if (category.image && /^\d+/.test(category.image)) {
        needsUpdate = true;
        newImage = categoryImageMapping[category.name] || 'toys.png';
      }

      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞–ø–ø–∏–Ω–≥—É, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
      if (categoryImageMapping[category.name] && category.image !== categoryImageMapping[category.name]) {
        needsUpdate = true;
        newImage = categoryImageMapping[category.name];
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (needsUpdate) {
        await prisma.category.update({
          where: { id: category.id },
          data: { image: newImage }
        });
        updatedCategories.push({
          id: category.id,
          name: category.name,
          oldImage: category.image,
          newImage: newImage
        });
        updatedCount++;
      }
    }

    res.json({
      success: true,
      message: `–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${updatedCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`,
      updatedCount,
      updatedCategories
    });

  } catch (error) {
    console.error('Error fixing category images:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π' });
  }
});

// === –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
app.get('/api/profile/wishlist', authMiddleware, async (req, res) => {
  try {
    let wishlist = await prisma.wishlist.findUnique({
      where: { userId: req.user.userId },
      include: { items: { include: { product: true } } }
    });
    if (!wishlist) {
      wishlist = await prisma.wishlist.create({ data: { userId: req.user.userId } });
      wishlist.items = [];
    }
    res.json(wishlist);
  } catch (error) {
    console.error('Wishlist fetch error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

// === –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ===
app.post('/api/profile/wishlist/add', authMiddleware, async (req, res) => {
  try {
    const { productId } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    let wishlist = await prisma.wishlist.findUnique({ where: { userId: req.user.userId } });
    if (!wishlist) {
      wishlist = await prisma.wishlist.create({ data: { userId: req.user.userId } });
    }
    const existing = await prisma.wishlistItem.findFirst({ where: { wishlistId: wishlist.id, productId } });
    if (existing) return res.status(400).json({ error: '–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º' });
    await prisma.wishlistItem.create({ data: { wishlistId: wishlist.id, productId } });
    const updated = await prisma.wishlist.findUnique({ where: { id: wishlist.id }, include: { items: { include: { product: true } } } });
    res.json(updated);
  } catch (error) {
    console.error('Wishlist add error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' });
  }
});

// === –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ===
app.post('/api/profile/wishlist/remove', authMiddleware, async (req, res) => {
  try {
    const { productId } = req.body;
    if (!productId) return res.status(400).json({ error: 'productId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    let wishlist = await prisma.wishlist.findUnique({ where: { userId: req.user.userId } });
    if (!wishlist) return res.status(404).json({ error: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    await prisma.wishlistItem.deleteMany({ where: { wishlistId: wishlist.id, productId } });
    const updated = await prisma.wishlist.findUnique({ where: { id: wishlist.id }, include: { items: { include: { product: true } } } });
    res.json(updated);
  } catch (error) {
    console.error('Wishlist remove error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

// === –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ===
app.get('/api/export-data', async (req, res) => {
  try {
    console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...');
    
    const exportData = {
      categories: [],
      products: [],
      users: [],
      orders: [],
      productQuestions: [],
      reviews: [],
      shopReviews: [],
      wishlists: [],
      notifications: [],
      exportDate: new Date().toISOString()
    };

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      const categories = await prisma.category.findMany();
      exportData.categories = categories;
      console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${categories.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
      exportData.categories = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    try {
      const products = await prisma.product.findMany();
      exportData.products = products;
      console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${products.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
      exportData.products = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
    try {
      const users = await prisma.user.findMany({
        select: {
          id: true,
          email: true,
          name: true,
          role: true,
          phone: true,
          createdAt: true,
          updatedAt: true
        }
      });
      exportData.users = users;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${users.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      exportData.users = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    try {
      const orders = await prisma.order.findMany();
      exportData.orders = orders;
      console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${orders.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤:', error.message);
      exportData.orders = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    try {
      const productQuestions = await prisma.productQuestion.findMany();
      exportData.productQuestions = productQuestions;
      console.log(`‚úÖ –í–æ–ø—Ä–æ—Å—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${productQuestions.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error.message);
      exportData.productQuestions = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    try {
      const reviews = await prisma.review.findMany();
      exportData.reviews = reviews;
      console.log(`‚úÖ –û—Ç–∑—ã–≤—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${reviews.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤:', error.message);
      exportData.reviews = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ
    try {
      const shopReviews = await prisma.shopReview.findMany();
      exportData.shopReviews = shopReviews;
      console.log(`‚úÖ –û—Ç–∑—ã–≤—ã –æ –º–∞–≥–∞–∑–∏–Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${shopReviews.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –º–∞–≥–∞–∑–∏–Ω–µ:', error.message);
      exportData.shopReviews = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    try {
      const wishlists = await prisma.wishlist.findMany();
      exportData.wishlists = wishlists;
      console.log(`‚úÖ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${wishlists.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error.message);
      exportData.wishlists = [];
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      const notifications = await prisma.notification.findMany();
      exportData.notifications = notifications;
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: ${notifications.length}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
      exportData.notifications = [];
    }

    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:`, {
      categories: exportData.categories.length,
      products: exportData.products.length,
      users: exportData.users.length,
      orders: exportData.orders.length,
      productQuestions: exportData.productQuestions.length,
      reviews: exportData.reviews.length,
      shopReviews: exportData.shopReviews.length,
      wishlists: exportData.wishlists.length,
      notifications: exportData.notifications.length
    });

    res.json(exportData);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö', details: error.message });
  }
});

// === –¢–µ—Å—Ç–æ–≤—ã–π endpoint ===
app.get('/api/test-export', async (req, res) => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const testData = {
      message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
      timestamp: new Date().toISOString(),
      database: 'connected'
    };

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    try {
      const productCount = await prisma.product.count();
      testData.productCount = productCount;
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
      testData.productCount = 'error';
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    try {
      const categoryCount = await prisma.category.count();
      testData.categoryCount = categoryCount;
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
      testData.categoryCount = 'error';
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    try {
      const questionCount = await prisma.productQuestion.count();
      testData.questionCount = questionCount;
      console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error.message);
      testData.questionCount = 'error';
    }

    res.json(testData);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º endpoint:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º endpoint', details: error.message });
  }
});

// POST /api/migrate - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
app.post('/api/migrate', async (req, res) => {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...');
    
    const migration = new SafeMigration();
    const result = await migration.run();
    
    if (result.success) {
      console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      res.json({ 
        success: true, 
        message: result.message,
        details: '–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏'
      });
    } else {
      console.log('‚ùå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      res.status(500).json({ 
        success: false,
        error: result.error,
        message: result.message,
        details: '–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–æ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π'
      });
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ 
      success: false,
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏', 
      details: error.message 
    });
  }
});

// POST /api/contact - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
app.post('/api/contact', async (req, res) => {
  try {
    const { name, email, phone, message } = req.body;
    
    console.log('üìß –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', { name, email, phone, message });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !message) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–º—è, email –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' 
      });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üìß <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –°–ê–ô–¢–ê</b>

üë§ <b>–ò–º—è:</b> ${name}
üìß <b>Email:</b> ${email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>

${message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    `.trim();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try {
      await sendTelegramNotification(telegramMessage);
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (telegramError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    res.json({ 
      success: true, 
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

app.listen(PORT, (err) => {
  if (err) {
    console.error('Server failed to start:', err);
    process.exit(1);
  } else {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    startSafeMigration();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
function startSafeMigration() {
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  setTimeout(async () => {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞...');
      
      const migration = new SafeMigration();
      const result = await migration.run();
      
      if (result.success) {
        console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result.message);
      } else {
        console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', result.message);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    }
  }, 5000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
}

// Diagnostic endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.get('/api/debug/database-structure', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Product
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'Product'
      );
    `;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const columnsExist = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND table_name = 'Product'
      AND column_name IN ('nameHe', 'descriptionHe', 'name', 'description')
      ORDER BY column_name;
    `;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    const productsWithTranslations = await prisma.product.findMany({
      where: {
        OR: [
          { nameHe: { not: null } },
          { descriptionHe: { not: null } }
        ]
      },
      select: {
        id: true,
        name: true,
        nameHe: true,
        description: true,
        descriptionHe: true
      },
      take: 5
    });
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const totalProducts = await prisma.product.count();
    
    res.json({
      success: true,
      tableExists: tableExists[0]?.exists || false,
      translationColumns: columnsExist,
      productsWithTranslations: {
        count: productsWithTranslations.length,
        samples: productsWithTranslations
      },
      totalProducts,
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// üñºÔ∏è API —Ä–æ—É—Ç—ã –¥–ª—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã HD-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
app.get('/api/images/config', smartImageUploadMiddleware.getConfigInfo.bind(smartImageUploadMiddleware));
app.get('/api/images/hd-info/:imageUrl', smartImageUploadMiddleware.getHdImageInfo.bind(smartImageUploadMiddleware));
app.post('/api/images/hd-info/bulk', smartImageUploadMiddleware.getBulkHdImageInfo.bind(smartImageUploadMiddleware));
app.post('/api/images/switch-mode', smartImageUploadMiddleware.switchMode.bind(smartImageUploadMiddleware));
app.post('/api/images/cleanup', smartImageUploadMiddleware.cleanupUnusedHdVersions.bind(smartImageUploadMiddleware));

// Diagnostic endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
app.post('/api/debug/test-translations', async (req, res) => {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏...');
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
    
    const { name, description, nameHe, descriptionHe, price = 100 } = req.body;
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const testProduct = await prisma.product.create({
      data: {
        name: name || 'Test Product',
        description: description || 'Test Description',
        nameHe: nameHe || null,
        descriptionHe: descriptionHe || null,
        price: parseFloat(price),
        quantity: 1,
        categoryName: 'Test Category'
      }
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω:', testProduct);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const createdProduct = await prisma.product.findUnique({
      where: { id: testProduct.id }
    });
    
    res.json({
      success: true,
      createdProduct,
      receivedData: req.body,
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});