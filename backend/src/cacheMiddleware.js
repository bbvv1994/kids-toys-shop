const cacheManager = require('./cache');

// Middleware –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
const cacheMiddleware = (ttl = 3600, keyGenerator = null) => {
  return async (req, res, next) => {
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'GET') {
      return next();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
    let cacheKey;
    if (keyGenerator && typeof keyGenerator === 'function') {
      cacheKey = keyGenerator(req);
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
      const baseKey = req.originalUrl.replace('/api/', '');
      const params = { ...req.query, ...req.params };
      cacheKey = cacheManager.generateKey(baseKey, params);
    }

    console.log(`üîç cacheMiddleware: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –∫–ª—é—á–∞: ${cacheKey}`);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await cacheManager.get(cacheKey);
      
      if (cached !== null) {
        console.log(`üì¶ –ö—ç—à HIT: ${cacheKey}`);
        console.log(`üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–º–µ—Ä: ${JSON.stringify(cached).length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        // –í HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ ASCII-—Å–∏–º–≤–æ–ª—ã, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á/etag
        const crypto = require('crypto');
        const safeEtag = crypto.createHash('md5').update(cacheKey, 'utf8').digest('hex');
        const safeCacheKeyHeader = Buffer.from(cacheKey, 'utf8').toString('base64');

        res.setHeader('Cache-Control', 'public, max-age=300'); // 5 –º–∏–Ω—É—Ç
        res.setHeader('X-Cache', 'HIT');
        res.setHeader('X-Cache-Key', safeCacheKeyHeader);
        res.setHeader('ETag', `"${safeEtag}"`);
        
        return res.json(cached);
      }
      
      console.log(`üì¶ –ö—ç—à MISS: ${cacheKey}`);

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º res.json
      const originalJson = res.json;
      res.json = function(data) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        // –í HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ ASCII-—Å–∏–º–≤–æ–ª—ã, –ø–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á/etag
        const crypto = require('crypto');
        const safeEtag = crypto.createHash('md5').update(cacheKey, 'utf8').digest('hex');
        const safeCacheKeyHeader = Buffer.from(cacheKey, 'utf8').toString('base64');

        res.setHeader('Cache-Control', 'public, max-age=300'); // 5 –º–∏–Ω—É—Ç
        res.setHeader('X-Cache', 'MISS');
        res.setHeader('X-Cache-Key', safeCacheKeyHeader);
        res.setHeader('ETag', `"${safeEtag}"`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cacheManager.set(cacheKey, data, ttl)
          .then(() => {
            console.log(`üì¶ –ö—ç—à SET: ${cacheKey} (TTL: ${ttl}s)`);
          })
          .catch(err => {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: ${err.message}`);
          });

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π res.json
        return originalJson.call(this, data);
      };

      next();
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      next();
    }
  };
};

// Middleware –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
const invalidateCache = (patterns = []) => {
  return async (req, res, next) => {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const originalJson = res.json;
    res.json = function(data) {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (res.statusCode >= 200 && res.statusCode < 300) {
        patterns.forEach(async (pattern) => {
          await cacheManager.invalidatePattern(pattern);
        });
      }

      return originalJson.call(this, data);
    };

    next();
  };
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
const CACHE_PATTERNS = {
  PRODUCTS: 'products:*',
  CATEGORIES: 'categories:*',
  REVIEWS: 'reviews:*',
  QUESTIONS: 'questions:*',
  ORDERS: 'orders:*',
  USERS: 'users:*',
  IMAGES: 'images:*',
  SEARCH: 'search:*',
  ALL: '*'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
const smartInvalidateCache = (req, res, next) => {
  const originalJson = res.json;
  
  res.json = function(data) {
    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if (res.statusCode >= 200 && res.statusCode < 300) {
      const method = req.method;
      const path = req.path;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏ –∏ –º–µ—Ç–æ–¥–∞
      const patterns = [];
      
      if (path.includes('/products')) {
        patterns.push(CACHE_PATTERNS.PRODUCTS);
        patterns.push(CACHE_PATTERNS.SEARCH); // –ü–æ–∏—Å–∫ —Ç–æ–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≤–∞—Ä–æ–≤
      }
      
      if (path.includes('/categories')) {
        patterns.push(CACHE_PATTERNS.CATEGORIES);
        patterns.push(CACHE_PATTERNS.PRODUCTS); // –¢–æ–≤–∞—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      }
      
      if (path.includes('/reviews')) {
        patterns.push(CACHE_PATTERNS.REVIEWS);
        patterns.push(CACHE_PATTERNS.PRODUCTS); // –†–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      }
      
      if (path.includes('/questions')) {
        patterns.push(CACHE_PATTERNS.QUESTIONS);
        patterns.push(CACHE_PATTERNS.PRODUCTS);
      }
      
      if (path.includes('/orders')) {
        patterns.push(CACHE_PATTERNS.ORDERS);
      }
      
      if (path.includes('/users')) {
        patterns.push(CACHE_PATTERNS.USERS);
      }
      
      if (path.includes('/images')) {
        patterns.push(CACHE_PATTERNS.IMAGES);
      }
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      if (patterns.length > 0) {
        setImmediate(async () => {
          for (const pattern of patterns) {
            try {
              await cacheManager.invalidatePattern(pattern);
              console.log(`üóëÔ∏è –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: ${pattern}`);
            } catch (error) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ ${pattern}:`, error.message);
            }
          }
        });
      }
    }

    return originalJson.call(this, data);
  };

  next();
};

module.exports = {
  cacheMiddleware,
  invalidateCache,
  smartInvalidateCache,
  CACHE_PATTERNS
};
