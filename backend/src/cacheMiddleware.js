const cacheManager = require('./cache');

// Middleware –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
const cacheMiddleware = (ttl = 3600, keyGenerator = null) => {
  return async (req, res, next) => {
    // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method !== 'GET') {
      return next();
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
    let cacheKey;
    if (keyGenerator && typeof keyGenerator === 'function') {
      cacheKey = keyGenerator(req);
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
      const baseKey = req.originalUrl.replace('/api/', '');
      const params = { ...req.query, ...req.params };
      cacheKey = cacheManager.generateKey(baseKey, params);
    }

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await cacheManager.get(cacheKey);
      
      if (cached !== null) {
        console.log(`üì¶ –ö—ç—à HIT: ${cacheKey}`);
        return res.json(cached);
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º res.json
      const originalJson = res.json;
      res.json = function(data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cacheManager.set(cacheKey, data, ttl)
          .then(() => {
            console.log(`üì¶ –ö—ç—à SET: ${cacheKey} (TTL: ${ttl}s)`);
          })
          .catch(err => {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: ${err.message}`);
          });

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π res.json
        return originalJson.call(this, data);
      };

      next();
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      next();
    }
  };
};

// Middleware –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
const invalidateCache = (patterns = []) => {
  return async (req, res, next) => {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    const originalJson = res.json;
    res.json = function(data) {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      if (res.statusCode >= 200 && res.statusCode < 300) {
        patterns.forEach(async (pattern) => {
          await cacheManager.invalidatePattern(pattern);
        });
      }

      return originalJson.call(this, data);
    };

    next();
  };
};

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏
const CACHE_PATTERNS = {
  PRODUCTS: 'products:*',
  CATEGORIES: 'categories:*',
  REVIEWS: 'reviews:*',
  QUESTIONS: 'questions:*',
  ALL: '*'
};

module.exports = {
  cacheMiddleware,
  invalidateCache,
  CACHE_PATTERNS
};
