const fetch = require('node-fetch');

class LibreTranslateService {
  // –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö LibreTranslate —Å–µ—Ä–≤–µ—Ä–æ–≤
  static servers = [
    'https://libretranslate.de',
    'https://translate.argosopentech.com',
    'https://translate.fortytwo-it.com',
    'https://libretranslate.com',
    'https://translate.terraprint.co'
  ];

  static currentServerIndex = 0;

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
   */
  static async getAvailableServer() {
    for (let i = 0; i < this.servers.length; i++) {
      const serverIndex = (this.currentServerIndex + i) % this.servers.length;
      const server = this.servers[serverIndex];
      
      try {
        const response = await fetch(`${server}/languages`, {
          method: 'GET',
          timeout: 5000
        });
        
        if (response.ok) {
          this.currentServerIndex = serverIndex;
          console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º LibreTranslate —Å–µ—Ä–≤–µ—Ä: ${server}`);
          return server;
        }
      } catch (error) {
        console.log(`‚ùå –°–µ—Ä–≤–µ—Ä ${server} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        continue;
      }
    }
    
    throw new Error('–í—Å–µ LibreTranslate —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LibreTranslate
   */
  static async translateText(text, sourceLang = 'ru', targetLang = 'iw') {
    if (!text || text.trim() === '') {
      return text;
    }

    try {
      const server = await this.getAvailableServer();
      
      console.log(`üåê LibreTranslate: "${text}" —Å ${sourceLang} –Ω–∞ ${targetLang}`);
      
      const response = await fetch(`${server}/translate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          q: text,
          source: sourceLang,
          target: targetLang,
          format: 'text'
        }),
        timeout: 10000
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(`LibreTranslate error: ${data.error}`);
      }

      const translatedText = data.translatedText;
      console.log(`‚úÖ LibreTranslate —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${translatedText}"`);

      // –û—á–∏—Å—Ç–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–≤—Ä–∏—Ç–∞
      if (targetLang === 'iw') {
        const cleanedText = this.cleanHebrewText(translatedText);
        const fixedText = this.fixHebrewEncoding(cleanedText);
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π –∏–≤—Ä–∏—Ç: "${fixedText}"`);
        return fixedText;
      }

      return translatedText;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ LibreTranslate: ${error.message}`);
      
      // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä
      this.currentServerIndex = (this.currentServerIndex + 1) % this.servers.length;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
      if (error.message.includes('–≤—Å–µ LibreTranslate —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')) {
        console.log(`‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: "${text}"`);
        return text;
      }
      
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
      return this.translateText(text, sourceLang, targetLang);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏–≤—Ä–∏—Ç—Å–∫–∏–π —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  static cleanHebrewText(text) {
    if (!text) return text;
    
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    let cleaned = text.trim();
    
    // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = cleaned.replace(/\s+/g, ' ');
    
    // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∏–≤—Ä–∏—Ç–µ
    cleaned = cleaned.replace(/[^\u0590-\u05FF\u0020\u0027\u0022\u002D\u002E\u002C\u0030-\u0039\u0041-\u005A\u0061-\u007A]/g, '');
    
    return cleaned;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–≤—Ä–∏—Ç—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  static fixHebrewEncoding(text) {
    if (!text) return text;
    
    // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    let fixed = text
      .replace(/[\u05D0-\u05EA]/g, (match) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–≤—Ä–∏—Ç—Å–∫–∏–π
        const hebrewRange = /[\u0590-\u05FF]/;
        return hebrewRange.test(match) ? match : '';
      });
    
    return fixed;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
   */
  static async autoTranslateProductData(productData, inputLanguage = 'ru') {
    try {
      const { name, description } = productData;
      const result = { ...productData };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
      const targetLanguage = inputLanguage === 'ru' ? 'iw' : 'ru';

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (name && name.trim()) {
        let translatedName = await this.translateText(name, inputLanguage, targetLanguage);
        
        if (inputLanguage === 'ru') {
          // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–≤—Ä–∏—Ç –≤ nameHe
          result.nameHe = translatedName;
        } else {
          // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —è–∑—ã–∫ –∏–≤—Ä–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –≤ name, –∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–≤—Ä–∏—Ç –≤ nameHe
          result.name = translatedName;
          result.nameHe = name; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–≤—Ä–∏—Ç—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        }
        
        console.log(`Auto-translated name: ${name} (${inputLanguage}) -> ${translatedName} (${targetLanguage})`);
      }

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
      if (description && description.trim()) {
        let translatedDescription = await this.translateText(description, inputLanguage, targetLanguage);
        
        if (inputLanguage === 'ru') {
          // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–≤—Ä–∏—Ç –≤ descriptionHe
          result.descriptionHe = translatedDescription;
        } else {
          // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —è–∑—ã–∫ –∏–≤—Ä–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –≤ description, –∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–≤—Ä–∏—Ç –≤ descriptionHe
          result.description = translatedDescription;
          result.descriptionHe = description; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–≤—Ä–∏—Ç—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        }
        
        console.log(`Auto-translated description: ${description} (${inputLanguage}) -> ${translatedDescription} (${targetLanguage})`);
      }

      return result;
    } catch (error) {
      console.error('Error auto-translating product data:', error);
      return productData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }
}

module.exports = LibreTranslateService;
