const LocalImageHandler = require('./localImageHandler');
const CloudinaryImageHandler = require('./cloudinaryImageHandler');

class SmartImageHandler {
  constructor() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.isDevelopment = process.env.NODE_ENV === 'development' || 
                        process.env.NODE_ENV === 'test' ||
                        !process.env.CLOUDINARY_CLOUD_NAME;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.localHandler = new LocalImageHandler();
    this.cloudinaryHandler = null;
    
    // –°–æ–∑–¥–∞–µ–º Cloudinary handler —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('üîç Cloudinary –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log('  - CLOUDINARY_CLOUD_NAME:', process.env.CLOUDINARY_CLOUD_NAME ? 'Present' : 'Missing');
    console.log('  - CLOUDINARY_API_KEY:', process.env.CLOUDINARY_API_KEY ? 'Present' : 'Missing');
    console.log('  - CLOUDINARY_API_SECRET:', process.env.CLOUDINARY_API_SECRET ? 'Present' : 'Missing');
    console.log('  - NODE_ENV:', process.env.NODE_ENV);
    
    if (process.env.CLOUDINARY_CLOUD_NAME) {
      try {
        this.cloudinaryHandler = new CloudinaryImageHandler();
        console.log('‚úÖ Cloudinary handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } catch (error) {
        console.warn('‚ö†Ô∏è Cloudinary handler –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:', error.message);
        console.warn('‚ö†Ô∏è Error stack:', error.stack);
      }
    } else {
      console.log('‚ö†Ô∏è CLOUDINARY_CLOUD_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω, Cloudinary –æ—Ç–∫–ª—é—á–µ–Ω');
    }
    
    console.log(`üîß SmartImageHandler: ${this.isDevelopment ? 'LOCAL' : 'PRODUCTION'} —Ä–µ–∂–∏–º`);
    console.log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${this.localHandler ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Cloudinary –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: ${this.cloudinaryHandler ? '‚úÖ' : '‚ùå'}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥—ã
   */
  getActiveHandler() {
    if (this.isDevelopment) {
      return this.localHandler;
    }
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º Cloudinary, –Ω–æ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π
    if (this.cloudinaryHandler) {
      return this.cloudinaryHandler;
    }
    
    console.warn('‚ö†Ô∏è Cloudinary –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
    return this.localHandler;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  async processImageFromBuffer(buffer, originalName) {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üñºÔ∏è SmartImageHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ${handlerName} handler`);
    
    try {
      const result = await handler.processImageFromBuffer(buffer, originalName);
      
      if (result.success) {
        console.log(`‚úÖ ${originalName} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ ${handlerName}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
        result.processedBy = handlerName;
        result.environment = this.isDevelopment ? 'development' : 'production';
        
        return result;
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ ${handlerName}:`, result.error);
        return result;
      }
    } catch (error) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ ${handlerName} handler:`, error.message);
      
      // Fallback –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      if (handler === this.cloudinaryHandler && this.localHandler) {
        console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...');
        return await this.localHandler.processImageFromBuffer(buffer, originalName);
      } else if (handler === this.localHandler && this.cloudinaryHandler) {
        console.log('üîÑ Fallback –Ω–∞ Cloudinary –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...');
        return await this.cloudinaryHandler.processImageFromBuffer(buffer, originalName);
      }
      
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö: ${error.message}`,
        originalName
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HD-–≤–µ—Ä—Å–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async createHdVersions(buffer, baseFilename) {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üñºÔ∏è SmartImageHandler: –°–æ–∑–¥–∞–Ω–∏–µ HD-–≤–µ—Ä—Å–∏–π —á–µ—Ä–µ–∑ ${handlerName}`);
    
    try {
      if (handler === this.localHandler) {
        return await handler.createHdVersions(buffer, baseFilename);
      } else if (handler === this.cloudinaryHandler) {
        return await handler.createHdVersions(buffer, baseFilename);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HD-–≤–µ—Ä—Å–∏–π —á–µ—Ä–µ–∑ ${handlerName}:`, error.message);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç HD-–≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
   */
  getHdImageUrl(originalUrl, quality = '2x') {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üîß SmartImageHandler: getHdImageUrl —á–µ—Ä–µ–∑ ${handlerName}`);
    
    try {
      if (handler === this.localHandler) {
        return handler.getHdImageUrl(originalUrl, quality);
      } else if (handler === this.cloudinaryHandler) {
        return handler.getHdImageUrl(originalUrl, quality);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ getHdImageUrl —á–µ—Ä–µ–∑ ${handlerName}:`, error.message);
      return originalUrl;
    }
    
    return originalUrl;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async processMultipleImages(files) {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üñºÔ∏è SmartImageHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${files.length} —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ ${handlerName}`);
    
    try {
      if (handler === this.localHandler) {
        return await handler.processMultipleImages(files);
      } else if (handler === this.cloudinaryHandler) {
        return await handler.processMultipleImages(files);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ processMultipleImages —á–µ—Ä–µ–∑ ${handlerName}:`, error.message);
      return [];
    }
    
    return [];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
   */
  checkFileSizes(files) {
    const handler = this.getActiveHandler();
    
    try {
      if (handler === this.localHandler) {
        return handler.checkFileSizes(files);
      } else if (handler === this.cloudinaryHandler) {
        return handler.checkFileSizes(files);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ checkFileSizes:', error.message);
      return [];
    }
    
    return [];
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –µ–≥–æ HD-–≤–µ—Ä—Å–∏–∏
   */
  async deleteImage(imageUrl) {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üóëÔ∏è SmartImageHandler: –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${handlerName}`);
    
    try {
      if (handler === this.localHandler) {
        return await handler.deleteImage(imageUrl);
      } else if (handler === this.cloudinaryHandler) {
        return await handler.deleteImage(imageUrl);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${handlerName}:`, error.message);
      return { success: false, error: error.message };
    }
    
    return { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫' };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HD-–≤–µ—Ä—Å–∏—è—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async getHdImageInfo(imageUrl) {
    const handler = this.getActiveHandler();
    const handlerName = handler === this.localHandler ? 'LOCAL' : 'CLOUDINARY';
    
    console.log(`üîç SmartImageHandler: getHdImageInfo —á–µ—Ä–µ–∑ ${handlerName}`);
    
    try {
      if (handler === this.localHandler) {
        return await handler.getHdImageInfo(imageUrl);
      } else if (handler === this.cloudinaryHandler) {
        return await handler.getHdImageInfo(imageUrl);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ getHdImageInfo —á–µ—Ä–µ–∑ ${handlerName}:`, error.message);
      return null;
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getConfigInfo() {
    return {
      environment: this.isDevelopment ? 'development' : 'production',
      localHandler: !!this.localHandler,
      cloudinaryHandler: !!this.cloudinaryHandler,
      activeHandler: this.getActiveHandler() === this.localHandler ? 'local' : 'cloudinary',
      cloudinaryConfigured: !!process.env.CLOUDINARY_CLOUD_NAME
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  forceLocalMode() {
    this.isDevelopment = true;
    console.log('üîß SmartImageHandler: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ LOCAL —Ä–µ–∂–∏–º');
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ Cloudinary –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  forceCloudinaryMode() {
    this.isDevelopment = false;
    console.log('üîß SmartImageHandler: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ CLOUDINARY —Ä–µ–∂–∏–º');
  }
}

module.exports = SmartImageHandler;
