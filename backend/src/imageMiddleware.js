const ImageProcessor = require('./imageProcessor');

class ImageMiddleware {
  constructor() {
    this.imageProcessor = new ImageProcessor();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  async processUploadedImages(req, res, next) {
    try {
      if (!req.files || req.files.length === 0) {
        return next();
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ ${req.files.length} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageFiles = req.files.filter(file => 
        this.imageProcessor.isImageFile(file.originalname)
      );

      if (imageFiles.length === 0) {
        console.log('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return next();
      }

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const results = await this.imageProcessor.processMultipleImages(imageFiles);

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let totalOriginalSize = 0;
      let totalProcessedSize = 0;
      let successCount = 0;

      results.forEach(result => {
        if (result.success) {
          totalOriginalSize += result.originalSize;
          totalProcessedSize += result.processedSize;
          successCount++;
          
          console.log(`‚úÖ ${result.originalName} -> ${result.processedName}`);
          console.log(`   –†–∞–∑–º–µ—Ä: ${(result.originalSize / 1024).toFixed(1)}KB -> ${(result.processedSize / 1024).toFixed(1)}KB`);
          console.log(`   –°–∂–∞—Ç–∏–µ: ${result.compressionRatio}%`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${result.originalName}: ${result.error}`);
        }
      });

      if (successCount > 0) {
        const totalCompression = ((totalOriginalSize - totalProcessedSize) / totalOriginalSize * 100).toFixed(1);
        console.log(`\nüìä –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}/${imageFiles.length} —Ñ–∞–π–ª–æ–≤`);
        console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalOriginalSize / 1024).toFixed(1)}KB -> ${(totalProcessedSize / 1024).toFixed(1)}KB`);
        console.log(`   –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${totalCompression}%`);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤ req –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      req.imageProcessingResults = results;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å
    }

    next();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async processSingleImage(req, res, next) {
    try {
      if (!req.file) {
        return next();
      }

      if (!this.imageProcessor.isImageFile(req.file.originalname)) {
        return next();
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${req.file.originalname}`);

      const result = await this.imageProcessor.processImage(req.file.path, req.file.path.replace(/\.[^.]+$/, '.webp'));

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        req.file.filename = req.file.filename.replace(/\.[^.]+$/, '.webp');
        req.file.mimetype = 'image/webp';
        
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${(result.processedSize / 1024).toFixed(1)}KB (—Å–∂–∞—Ç–∏–µ: ${result.compressionRatio}%)`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`);
      }

      req.imageProcessingResult = result;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ middleware –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    }

    next();
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
   */
  checkFileSizes(req, res, next) {
    if (!req.files || req.files.length === 0) {
      return next();
    }

    const maxSize = 10 * 1024 * 1024; // 10MB
    const oversizedFiles = req.files.filter(file => file.size > maxSize);

    if (oversizedFiles.length > 0) {
      const fileNames = oversizedFiles.map(f => f.originalname).join(', ');
      return res.status(400).json({ 
        error: `–°–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–º–∞–∫—Å–∏–º—É–º 10MB): ${fileNames}` 
      });
    }

    next();
  }
}

module.exports = ImageMiddleware; 