const sharp = require('sharp');
const path = require('path');
const fs = require('fs');
const cloudinary = require('cloudinary').v2;

class FlexibleImageHandler {
  constructor() {
    this.maxFileSize = 10 * 1024 * 1024; // 10MB
    this.supportedFormats = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
    this.storageMode = this.getStorageMode();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    if (this.storageMode === 'cloudinary') {
      this.setupCloudinary();
    }
    
    console.log(`üñºÔ∏è FlexibleImageHandler: –†–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è - ${this.storageMode}`);
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
   */
  setupCloudinary() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CLOUDINARY_URL
    if (process.env.CLOUDINARY_URL) {
      cloudinary.config({
        url: process.env.CLOUDINARY_URL
      });
      console.log('üñºÔ∏è FlexibleImageHandler: Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ CLOUDINARY_URL');
    } 
    // Fallback –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    else if (process.env.CLOUDINARY_CLOUD_NAME && 
             process.env.CLOUDINARY_API_KEY && 
             process.env.CLOUDINARY_API_SECRET) {
      cloudinary.config({
        cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
        api_key: process.env.CLOUDINARY_API_KEY,
        api_secret: process.env.CLOUDINARY_API_SECRET
      });
      console.log('üñºÔ∏è FlexibleImageHandler: Cloudinary –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
   */
  getStorageMode() {
    // –ï—Å–ª–∏ –µ—Å—Ç—å CLOUDINARY_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º Cloudinary
    if (process.env.CLOUDINARY_URL) {
      return 'cloudinary';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Cloudinary, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (process.env.CLOUDINARY_CLOUD_NAME && 
        process.env.CLOUDINARY_API_KEY && 
        process.env.CLOUDINARY_API_SECRET) {
      return 'cloudinary';
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
    return 'local';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  isImageFile(filename) {
    if (!filename) return false;
    const ext = path.extname(filename).toLowerCase();
    return this.supportedFormats.includes(ext);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async processImageFromBuffer(buffer, originalName) {
    try {
      console.log(`üñºÔ∏è FlexibleImageHandler: Processing image: ${originalName}`);
      console.log(`üñºÔ∏è FlexibleImageHandler: Storage mode: ${this.storageMode}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
      const processedBuffer = await sharp(buffer)
        .resize(600, 600, { 
          fit: 'inside',
          withoutEnlargement: true 
        })
        .webp({ 
          quality: 70,
          effort: 3 
        })
        .toBuffer();

      const originalSize = buffer.length;
      const processedSize = processedBuffer.length;
      const compressionRatio = ((originalSize - processedSize) / originalSize * 100).toFixed(1);

      console.log(`‚úÖ ${originalName} processed`);
      console.log(`   Size: ${(originalSize / 1024).toFixed(1)}KB -> ${(processedSize / 1024).toFixed(1)}KB`);
      console.log(`   Compression: ${compressionRatio}%`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
      if (this.storageMode === 'cloudinary') {
        return await this.saveToCloudinary(processedBuffer, originalName, processedSize, compressionRatio);
      } else {
        return await this.saveToLocal(processedBuffer, originalName, processedSize, compressionRatio);
      }

    } catch (error) {
      console.error(`‚ùå Error processing ${originalName}:`, error.message);
      return {
        success: false,
        error: error.message,
        originalName
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Cloudinary
   */
  async saveToCloudinary(buffer, originalName, processedSize, compressionRatio) {
    try {
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const publicId = `kids-toys-shop/${timestamp}-${randomString}`;

      return new Promise((resolve, reject) => {
        const uploadStream = cloudinary.uploader.upload_stream(
          {
            public_id: publicId,
            folder: 'kids-toys-shop',
            resource_type: 'image',
            transformation: [
              { width: 600, height: 600, crop: 'limit' },
              { quality: 'auto', fetch_format: 'auto' }
            ],
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            ...(process.env.ENABLE_BG_REMOVAL === 'true' && {
              background_removal: 'auto'
            })
          },
          (error, result) => {
            if (error) {
              console.error('‚ùå Cloudinary upload error:', error);
              resolve({
                success: false,
                error: error.message
              });
            } else {
              console.log(`‚úÖ Uploaded to Cloudinary: ${result.secure_url}`);
              if (process.env.ENABLE_BG_REMOVAL === 'true') {
                console.log('üé® Background removal applied');
              }
              resolve({
                success: true,
                filename: `${timestamp}-${randomString}.webp`,
                url: result.secure_url,
                publicId: result.public_id,
                originalSize: buffer.length,
                processedSize,
                compressionRatio: parseFloat(compressionRatio),
                mimetype: 'image/webp',
                backgroundRemoved: process.env.ENABLE_BG_REMOVAL === 'true'
              });
            }
          }
        );

        uploadStream.end(buffer);
      });

    } catch (error) {
      console.error('‚ùå Cloudinary upload error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
   */
  async saveToLocal(buffer, originalName, processedSize, compressionRatio) {
    try {
      const timestamp = Date.now();
      const randomString = Math.random().toString(36).substring(2);
      const filename = `${timestamp}-${randomString}.webp`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const uploadsDir = path.join(__dirname, '..', 'uploads');
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const filePath = path.join(uploadsDir, filename);
      fs.writeFileSync(filePath, buffer);
      
      console.log(`‚úÖ Saved locally: ${filePath}`);
      
      return {
        success: true,
        filename,
        url: `/uploads/${filename}`,
        originalSize: buffer.length,
        processedSize,
        compressionRatio: parseFloat(compressionRatio),
        mimetype: 'image/webp'
      };

    } catch (error) {
      console.error('‚ùå Local save error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async processMultipleImages(files) {
    const results = [];
    
    for (const file of files) {
      if (this.isImageFile(file.originalname)) {
        const result = await this.processImageFromBuffer(file.buffer, file.originalname);
        results.push(result);
      } else {
        // –î–ª—è –Ω–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (this.storageMode === 'cloudinary') {
          const uploadResult = await this.saveToCloudinary(file.buffer, file.originalname, file.buffer.length, 0);
          const filename = `${Date.now()}-${Math.random().toString(36).substring(2)}${path.extname(file.originalname)}`;
          
          results.push({
            success: uploadResult.success,
            filename,
            url: uploadResult.success ? uploadResult.url : null,
            publicId: uploadResult.success ? uploadResult.publicId : null,
            originalSize: file.buffer.length,
            processedSize: file.buffer.length,
            compressionRatio: 0,
            mimetype: file.mimetype,
            error: uploadResult.success ? null : uploadResult.error
          });
        } else {
          const filename = `${Date.now()}-${Math.random().toString(36).substring(2)}${path.extname(file.originalname)}`;
          const uploadsDir = path.join(__dirname, '..', 'uploads');
          if (!fs.existsSync(uploadsDir)) {
            fs.mkdirSync(uploadsDir, { recursive: true });
          }
          
          const filePath = path.join(uploadsDir, filename);
          fs.writeFileSync(filePath, file.buffer);
          
          results.push({
            success: true,
            filename,
            url: `/uploads/${filename}`,
            originalSize: file.buffer.length,
            processedSize: file.buffer.length,
            compressionRatio: 0,
            mimetype: file.mimetype
          });
        }
      }
    }

    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
   */
  checkFileSizes(files) {
    const errors = [];
    
    for (const file of files) {
      if (file.size > this.maxFileSize) {
        errors.push(`File ${file.originalname} is too large (${(file.size / 1024 / 1024).toFixed(1)}MB). Maximum size is ${this.maxFileSize / 1024 / 1024}MB`);
      }
    }

    return errors;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async deleteImage(identifier) {
    if (this.storageMode === 'cloudinary') {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Cloudinary
      try {
        const result = await cloudinary.uploader.destroy(identifier);
        console.log(`‚úÖ Deleted from Cloudinary: ${identifier}`);
        return { success: true };
      } catch (error) {
        console.error(`‚ùå Error deleting from Cloudinary: ${identifier}`, error);
        return { success: false, error: error.message };
      }
    } else {
      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      try {
        const filePath = path.join(__dirname, '..', 'uploads', identifier);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ Deleted locally: ${filePath}`);
          return { success: true };
        }
        return { success: false, error: 'File not found' };
      } catch (error) {
        console.error(`‚ùå Error deleting locally: ${identifier}`, error);
        return { success: false, error: error.message };
      }
    }
  }
}

module.exports = FlexibleImageHandler; 