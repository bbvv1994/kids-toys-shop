const { PrismaClient } = require('@prisma/client');

async function quickQuestionsCheck() {
  console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...\n');
  
  const prisma = new PrismaClient();
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î');
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    const tableExists = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'ProductQuestion'
      );
    `;
    
    if (!tableExists[0]?.exists) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ ProductQuestion –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run force-update');
      return;
    }
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ProductQuestion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –≤ Prisma Client
    if (!prisma.productQuestion) {
      console.log('‚ùå –ú–æ–¥–µ–ª—å productQuestion –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npx prisma generate');
      return;
    }
    console.log('‚úÖ –ú–æ–¥–µ–ª—å productQuestion –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const count = await prisma.productQuestion.count();
    console.log(`üìä –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: ${count}`);
    
    // 5. –¢–µ—Å—Ç API
    try {
      const testQuestions = await prisma.productQuestion.findMany({
        where: { status: 'published' },
        take: 1
      });
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ API:', error.message);
    }
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

quickQuestionsCheck(); 