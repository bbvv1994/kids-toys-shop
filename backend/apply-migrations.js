const https = require('https');

console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(url, method = 'POST') {
  return new Promise((resolve, reject) => {
    const req = https.request(url, { method }, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ statusCode: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ statusCode: res.statusCode, data: data });
        }
      });
    });
    
    req.on('error', reject);
    req.setTimeout(60000, () => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
    });
    
    req.end();
  });
}

async function applyMigrations() {
  try {
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthCheck = await makeRequest('https://kids-toys-backend.onrender.com/api/health', 'GET');
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å: ${healthCheck.statusCode})`);

    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const migrateResult = await makeRequest('https://kids-toys-backend.onrender.com/api/migrate', 'POST');
    
    if (migrateResult.statusCode === 200) {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', migrateResult.data);
      
      if (migrateResult.data.tableExists) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ProductQuestion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ProductQuestion –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: ${migrateResult.statusCode}`);
      console.log('üìä –û—Ç–≤–µ—Ç:', migrateResult.data);
    }

    console.log('\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const questionsCheck = await makeRequest('https://kids-toys-backend.onrender.com/api/questions', 'GET');
    if (questionsCheck.statusCode === 200) {
      const questionsCount = Array.isArray(questionsCheck.data) ? questionsCheck.data.length : 0;
      console.log(`‚úÖ API –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questionsCount}`);
    } else {
      console.log(`‚ùå API –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${questionsCheck.statusCode}`);
    }

    console.log('\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤–∫–ª–∞–¥–∫–∏ "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã" –Ω–∞ —Å–∞–π—Ç–µ');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    console.log('\nüîó –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:');
    console.log('1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å Render');
    console.log('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é:');
    console.log('   - npx prisma migrate deploy');
    console.log('   - npx prisma generate');
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
applyMigrations(); 