generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                        Int                        @id @default(autoincrement())
  name                      String
  description               String?
  // Поля для переводов
  nameHe                    String?                    // Название на иврите
  descriptionHe             String?                    // Описание на иврите
  price                     Float
  ageGroup                  String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  imageUrls                 String[]
  quantity                  Int                        @default(0)
  article                   String?
  brand                     String?
  country                   String?
  height                    Float?
  length                    Float?
  width                     Float?
  subcategoryId             Int?
  isHidden                  Boolean                    @default(false)
  gender                    String?
  categoryId                Int?
  categoryName              String?
  availableColors           Json?                      // Массив цветовых вариантов с изображениями

  cartItems                 CartItem[]
  orderItems                OrderItem[]
  category                  Category?                  @relation("CategoryProducts", fields: [categoryId], references: [id])
  subcategory               Category?                  @relation("SubcategoryProducts", fields: [subcategoryId], references: [id])
  reviews                   Review[]
  wishlistItems             WishlistItem[]
  questions                 ProductQuestion[]
}

model VisitCounter {
  id    Int @id @default(autoincrement())
  count Int @default(0)
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  passwordHash      String?
  name              String?
  emailVerified     Boolean            @default(false)
  verificationToken String?
  googleId          String?            @unique
  facebookId        String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  role              String             @default("user")
  phone             String?
  surname           String?
  cart              Cart?
  hiddenReviews     HiddenReview[]
  hiddenShopReviews HiddenShopReview[]
  notifications     Notification[]
  orders            Order[]
  reviews           Review[]
  shopReviews       ShopReview[]
  wishlist          Wishlist?
  hiddenOrders      UserHiddenOrder[]
  questions         ProductQuestion[]
}

model Order {
  id          Int                @id @default(autoincrement())
  userId      Int?
  createdAt   DateTime           @default(now())
  pickupStore String             @default("store1")
  status      String             @default("pending")
  // Поля для гостевых заказов
  guestName   String?
  guestEmail  String?
  guestPhone  String?
  user        User?              @relation(fields: [userId], references: [id])
  items       OrderItem[]
  hiddenBy    UserHiddenOrder[]
}

model OrderItem {
  id            Int     @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int     @default(1)
  price         Float
  selectedColor String? // ID выбранного цвета (red, blue, etc.)
  order         Order   @relation(fields: [orderId], references: [id])
  product       Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id            Int     @id @default(autoincrement())
  cartId        Int
  productId     Int
  quantity      Int     @default(1)
  selectedColor String? // ID выбранного цвета (red, blue, etc.)
  cart          Cart    @relation(fields: [cartId], references: [id])
  product       Product @relation(fields: [productId], references: [id])
}

model Category {
  id                  Int        @id @default(autoincrement())
  name                String     @unique
  active              Boolean    @default(true)
  image               String?
  parentId            Int?
  order               Int        @default(0)
  parent              Category?  @relation("CategoryToSub", fields: [parentId], references: [id])
  sub                 Category[] @relation("CategoryToSub")
  products            Product[]  @relation("CategoryProducts")
  subcategoryProducts Product[]  @relation("SubcategoryProducts")
}

model Review {
  id        Int            @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  text      String
  status    String         @default("pending")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orderId   Int            @default(0)
  hiddenBy  HiddenReview[]
  product   Product        @relation(fields: [productId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
}

model ProductQuestion {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  question  String
  answer    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model HiddenReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  reviewId  Int
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, reviewId])
}

model Wishlist {
  id     Int            @id @default(autoincrement())
  userId Int            @unique
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  productId  Int
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
}

model Notification {
  id         Int       @id @default(autoincrement())
  userId     Int
  type       String
  title      String
  message    String
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  actionText String?
  actionUrl  String?
  user       User      @relation(fields: [userId], references: [id])
}



model ShopReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int
  rating    Int
  text      String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  hiddenBy  HiddenShopReview[]
}

model HiddenShopReview {
  id           Int         @id @default(autoincrement())
  userId       Int
  shopReviewId Int
  createdAt    DateTime    @default(now())
  shopReview   ShopReview  @relation(fields: [shopReviewId], references: [id])
  user         User        @relation(fields: [userId], references: [id])

  @@unique([userId, shopReviewId])
}

model UserHiddenOrder {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])

  @@unique([userId, orderId])
}
