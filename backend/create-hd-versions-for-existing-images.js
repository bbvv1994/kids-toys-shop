const cloudinary = require('cloudinary').v2;
require('dotenv').config();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

/**
 * –°–æ–∑–¥–∞–µ—Ç HD –≤–µ—Ä—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ kids-toys-shop
 */
async function createHdVersionsForAllImages() {
  try {
    console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HD –≤–µ—Ä—Å–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ kids-toys-shop
    const result = await cloudinary.api.resources({
      type: 'upload',
      prefix: 'kids-toys-shop/',
      max_results: 500
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.resources.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const resource of result.resources) {
      try {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${resource.public_id}`);
        
        // –°–æ–∑–¥–∞–µ–º HD –≤–µ—Ä—Å–∏–∏
        const hd2xUrl = cloudinary.url(resource.public_id, {
          transformation: [
            { width: 1200, height: 1200, crop: 'limit' },
            { quality: 'auto', fetch_format: 'auto' }
          ]
        });
        
        const hd4xUrl = cloudinary.url(resource.public_id, {
          transformation: [
            { width: 2400, height: 2400, crop: 'limit' },
            { quality: 'auto', fetch_format: 'auto' }
          ]
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HD –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        console.log(`‚úÖ HD –≤–µ—Ä—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${resource.public_id}:`);
        console.log(`   HD @2x: ${hd2xUrl}`);
        console.log(`   HD @4x: ${hd4xUrl}`);
        
        successCount++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Cloudinary API
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HD –≤–µ—Ä—Å–∏–π –¥–ª—è ${resource.public_id}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–∫–∏: ${errorCount}`);
    console.log(`üìä –í—Å–µ–≥–æ: ${result.resources.length}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createHdVersionsForAllImages();
