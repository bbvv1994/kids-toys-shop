const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function safeServerUpdate() {
  console.log('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö)...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:');
    const categoriesCount = await prisma.category.count();
    const productsCount = await prisma.product.count();
    const usersCount = await prisma.user.count();
    const ordersCount = await prisma.order.count();
    const questionsCount = await prisma.productQuestion.count();
    
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount}`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${productsCount}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount}`);
    console.log(`   - –ó–∞–∫–∞–∑—ã: ${ordersCount}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${questionsCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'NODE_ENV'];
    const missingVars = [];
    
    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar]) {
        missingVars.push(envVar);
      }
    }
    
    if (missingVars.length > 0) {
      console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingVars.join(', ')}`);
      return;
    }
    
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
    try {
      const migrationStatus = execSync('npx prisma migrate status', { encoding: 'utf8' });
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω');
      
      if (migrationStatus.includes('Pending')) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
        console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...');
        execSync('npx prisma migrate deploy', { stdio: 'inherit' });
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
      } else {
        console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
    console.log('\nüî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...');
    try {
      execSync('npx prisma generate', { stdio: 'inherit' });
      console.log('‚úÖ Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma Client:', error.message);
      console.log('üí° Prisma Client –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ProductQuestion
    console.log('\n‚ùì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion...');
    try {
      const tableExists = await prisma.$queryRaw`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'ProductQuestion'
        );
      `;
      
      if (tableExists[0].exists) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ ProductQuestion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const columns = await prisma.$queryRaw`
          SELECT column_name, data_type, is_nullable
          FROM information_schema.columns 
          WHERE table_schema = 'public' 
          AND table_name = 'productquestion'
          ORDER BY ordinal_position;
        `;
        
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion (${columns.length} –∫–æ–ª–æ–Ω–æ–∫):`);
        columns.forEach(col => {
          console.log(`   - ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const questionsCount = await prisma.productQuestion.count();
        console.log(`üìä –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: ${questionsCount}`);
        
      } else {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ ProductQuestion –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é...');
        execSync('npx prisma migrate deploy', { stdio: 'inherit' });
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...');
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ Prisma Client
      if (prisma.productQuestion) {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å productQuestion –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Prisma Client');
      } else {
        console.log('‚ùå –ú–æ–¥–µ–ª—å productQuestion –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Prisma Client');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Prisma Client:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    const finalCategoriesCount = await prisma.category.count();
    const finalProductsCount = await prisma.product.count();
    const finalUsersCount = await prisma.user.count();
    const finalOrdersCount = await prisma.order.count();
    const finalQuestionsCount = await prisma.productQuestion.count();
    
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${finalCategoriesCount}`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${finalProductsCount}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${finalUsersCount}`);
    console.log(`   - –ó–∞–∫–∞–∑—ã: ${finalOrdersCount}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${finalQuestionsCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω—ã
    if (finalCategoriesCount === categoriesCount && 
        finalProductsCount === productsCount && 
        finalUsersCount === usersCount && 
        finalOrdersCount === ordersCount) {
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } else {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö');
      console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount} ‚Üí ${finalCategoriesCount}`);
      console.log(`   –¢–æ–≤–∞—Ä—ã: ${productsCount} ‚Üí ${finalProductsCount}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount} ‚Üí ${finalUsersCount}`);
      console.log(`   –ó–∞–∫–∞–∑—ã: ${ordersCount} ‚Üí ${finalOrdersCount}`);
    }
    
    console.log('\nüéâ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤–∫–ª–∞–¥–∫–∏ "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
safeServerUpdate(); 