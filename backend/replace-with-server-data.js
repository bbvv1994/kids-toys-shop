const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

async function replaceWithServerData() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîÑ –ó–∞–º–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞
    const serverDataPath = path.join(__dirname, '..', 'server-export.json');
    if (!fs.existsSync(serverDataPath)) {
      console.error('‚ùå –§–∞–π–ª server-export.json –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: npm run download-api');
      return;
    }
    
    const serverData = JSON.parse(fs.readFileSync(serverDataPath, 'utf8'));
    console.log('üìã –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${serverData.categories?.length || 0}`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${serverData.products?.length || 0}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${serverData.users?.length || 0}`);
    console.log(`   - –ó–∞–∫–∞–∑—ã: ${serverData.orders?.length || 0}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${serverData.productQuestions?.length || 0}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log('\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.productQuestion.deleteMany();
    await prisma.orderItem.deleteMany();
    await prisma.order.deleteMany();
    await prisma.cartItem.deleteMany();
    await prisma.cart.deleteMany();
    await prisma.wishlistItem.deleteMany();
    await prisma.wishlist.deleteMany();
    await prisma.review.deleteMany();
    await prisma.shopReview.deleteMany();
    await prisma.notification.deleteMany();
    await prisma.availabilityNotification.deleteMany();
    await prisma.product.deleteMany();
    await prisma.user.deleteMany();
    await prisma.category.deleteMany();
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    console.log('\nüìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // 1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–Ω–∞—á–∞–ª–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ, –ø–æ—Ç–æ–º –¥–æ—á–µ—Ä–Ω–∏–µ)
    if (serverData.categories?.length > 0) {
      console.log('üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
      const parentCategories = serverData.categories.filter(cat => !cat.parentId);
      const childCategories = serverData.categories.filter(cat => cat.parentId);
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const category of parentCategories) {
        await prisma.category.create({
          data: {
            id: category.id,
            name: category.name,
            active: category.active,
            image: category.image,
            order: category.order
          }
        });
      }
      
      // –ü–æ—Ç–æ–º —Å–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      for (const category of childCategories) {
        await prisma.category.create({
          data: {
            id: category.id,
            name: category.name,
            active: category.active,
            image: category.image,
            parentId: category.parentId,
            order: category.order
          }
        });
      }
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${serverData.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    }
    
    // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if (serverData.users?.length > 0) {
      console.log('üë• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      for (const user of serverData.users) {
        await prisma.user.create({
          data: {
            id: user.id,
            email: user.email,
            passwordHash: user.passwordHash,
            name: user.name,
            emailVerified: user.emailVerified,
            verificationToken: user.verificationToken,
            googleId: user.googleId,
            facebookId: user.facebookId,
            role: user.role,
            phone: user.phone,
            surname: user.surname
          }
        });
      }
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${serverData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }
    
    // 3. –¢–æ–≤–∞—Ä—ã
    if (serverData.products?.length > 0) {
      console.log('üõçÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
      for (const product of serverData.products) {
        await prisma.product.create({
          data: {
            id: product.id,
            name: product.name,
            description: product.description,
            price: product.price,
            ageGroup: product.ageGroup,
            imageUrls: product.imageUrls || [],
            quantity: product.quantity || 0,
            article: product.article,
            brand: product.brand,
            country: product.country,
            height: product.height,
            length: product.length,
            width: product.width,
            subcategoryId: product.subcategoryId,
            isHidden: product.isHidden || false,
            gender: product.gender,
            categoryId: product.categoryId,
            categoryName: product.categoryName
          }
        });
      }
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${serverData.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    
    // 4. –ó–∞–∫–∞–∑—ã
    if (serverData.orders?.length > 0) {
      console.log('üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...');
      for (const order of serverData.orders) {
        const { items, ...orderData } = order;
        await prisma.order.create({
          data: {
            id: orderData.id,
            userId: orderData.userId,
            pickupStore: orderData.pickupStore,
            status: orderData.status,
            guestName: orderData.guestName,
            guestEmail: orderData.guestEmail,
            guestPhone: orderData.guestPhone
          }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        if (items?.length > 0) {
          for (const item of items) {
            await prisma.orderItem.create({
              data: {
                orderId: orderData.id,
                productId: item.productId,
                quantity: item.quantity,
                price: item.price
              }
            });
          }
        }
      }
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${serverData.orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    }
    
    // 5. –í–æ–ø—Ä–æ—Å—ã
    if (serverData.productQuestions?.length > 0) {
      console.log('‚ùì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤...');
      for (const question of serverData.productQuestions) {
        await prisma.productQuestion.create({
          data: {
            id: question.id,
            productId: question.productId,
            userId: question.userId,
            question: question.question,
            answer: question.answer,
            status: question.status
          }
        });
      }
      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${serverData.productQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    const productsCount = await prisma.product.count();
    const categoriesCount = await prisma.category.count();
    const questionsCount = await prisma.productQuestion.count();
    const usersCount = await prisma.user.count();
    const ordersCount = await prisma.order.count();
    
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${productsCount}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesCount}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${questionsCount}`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${usersCount}`);
    console.log(`   - –ó–∞–∫–∞–∑—ã: ${ordersCount}`);
    
    if (productsCount === 2) {
      console.log('\nüéâ –ó–∞–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('‚úÖ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å 2 —Ç–æ–≤–∞—Ä–∞–º–∏!');
    } else {
      console.log(`\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${productsCount} —Ç–æ–≤–∞—Ä–æ–≤ –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö 2`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

replaceWithServerData(); 