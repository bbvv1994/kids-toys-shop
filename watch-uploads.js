const fs = require('fs');
const path = require('path');

function watchUploads() {
  const sourceDir = path.join(__dirname, 'backend', 'uploads');
  const targetDir = path.join(__dirname, 'uploads');
  
  console.log('üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–ø–∫–∏ uploads...');
  console.log('üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫:', sourceDir);
  console.log('üìÅ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:', targetDir);
  
  // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ uploads');
  }
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
  function syncExistingFiles() {
    try {
      const files = fs.readdirSync(sourceDir);
      let copiedCount = 0;
      
      for (const file of files) {
        if (file === 'hd' || fs.statSync(path.join(sourceDir, file)).isDirectory()) {
          continue;
        }
        
        const sourcePath = path.join(sourceDir, file);
        const targetPath = path.join(targetDir, file);
        
        if (!fs.existsSync(targetPath)) {
          try {
            fs.copyFileSync(sourcePath, targetPath);
            console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file}`);
            copiedCount++;
          } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${file}:`, error.message);
          }
        }
      }
      
      if (copiedCount > 0) {
        console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${copiedCount} —Ñ–∞–π–ª–æ–≤`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    }
  }
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  syncExistingFiles();
  
  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
  try {
    fs.watch(sourceDir, (eventType, filename) => {
      if (filename && eventType === 'rename') {
        const sourcePath = path.join(sourceDir, filename);
        const targetPath = path.join(targetDir, filename);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ —É–¥–∞–ª–µ–Ω)
        if (fs.existsSync(sourcePath)) {
          const stats = fs.statSync(sourcePath);
          if (stats.isFile() && !filename.startsWith('.')) {
            try {
              fs.copyFileSync(sourcePath, targetPath);
              console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${filename}`);
            } catch (error) {
              console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${filename}:`, error.message);
            }
          }
        }
      }
    });
    
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
    console.log('üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
watchUploads();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  process.exit(0);
});

module.exports = watchUploads;
