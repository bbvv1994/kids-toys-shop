import React from 'react';
import { useTranslation } from 'react-i18next';
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  IconButton, 
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Grid,
  Card,
  CardContent,
  CardActions,
  Divider,
  Switch,
  Alert
} from '@mui/material';
import { 
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  CloudUpload,
  DragIndicator,
  ExpandMore,
  ChevronRight,
  Category,
  Delete,
  Edit
} from '@mui/icons-material';
import { API_BASE_URL } from '../../config';
import CustomSelect from '../CustomSelect';
import { 
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import {
  useSortable,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { getCategoryIcon } from '../../utils/categoryIcon';

function CMSCategories({ loadCategoriesFromAPI }) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const getCategoryIconForAPI = (categoryName) => {
      const iconMap = {
        '–ò–≥—Ä—É—à–∫–∏': '/toys.png',
        '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã': '/constructor.png',
        '–ü–∞–∑–ª—ã': '/puzzle.png',
        '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ': '/creativity.png',
        '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã': '/stationery.png',
        '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': '/bicycle.png',
        '–û—Ç–¥—ã—Ö –Ω–∞ –≤–æ–¥–µ': '/voda.png',
        '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã': '/nastolka.png',
        '–†–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã': '/edu_game.png',
        '–ê–∫—Ü–∏–∏': '/sale.png'
      };
      return iconMap[categoryName] || '/toys.png';
    };
  
    const [categories, setCategories] = React.useState([]);
    const [loading, setLoading] = React.useState(true);
    const [expanded, setExpanded] = React.useState([]); // id –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞—Å–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const [form, setForm] = React.useState({ type: 'category', parent: '', name: '', icon: null });
    const [editForm, setEditForm] = React.useState({ id: null, name: '', parent: '', icon: null });
    const [isEditing, setIsEditing] = React.useState(false);
    const [editDialogOpen, setEditDialogOpen] = React.useState(false);
    const [deleteDialog, setDeleteDialog] = React.useState({ open: false, id: null, name: '' });
    const fileInputRef = React.useRef();
    const editFileInputRef = React.useRef();
    const user = JSON.parse(localStorage.getItem('user') || '{}');
  
    // Drag & Drop —Å–µ–Ω—Å–æ—Ä—ã
    const sensors = useSensors(
      useSensor(PointerSensor),
      useSensor(KeyboardSensor, {
        coordinateGetter: sortableKeyboardCoordinates,
      })
    );
  
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º admin endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    const fetchCategories = async () => {
      setLoading(true);
      try {
        console.log('üîÑ CMSCategories: Loading categories from admin endpoint...');
        const res = await fetch(`${API_BASE_URL}/api/admin/categories`, {
          headers: { 'Authorization': `Bearer ${user.token}` }
        });
        const data = await res.json();
        console.log('üîÑ CMSCategories: Categories loaded:', data.length, 'categories');
        console.log('üîÑ CMSCategories: Sample category:', data[0]);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª–µ active –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        const processedData = data.map(cat => ({
          ...cat,
          active: cat.active !== null ? cat.active : true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –µ—Å–ª–∏ null
        }));
        
        console.log('üîÑ CMSCategories: Processed categories with active field:', processedData[0]);
        setCategories(processedData);
      } catch (e) {
        console.error('CMSCategories fetchCategories - error:', e);
        setCategories([]);
      }
      setLoading(false);
    };
    React.useEffect(() => { fetchCategories(); }, []);
  
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è drag & drop
    const handleDragEnd = async (event) => {
      const { active, over } = event;
      
      if (active.id !== over.id) {
        const activeCategory = categories.find(cat => cat.id === active.id);
        const overCategory = categories.find(cat => cat.id === over.id);
        
        if (!activeCategory || !overCategory) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        if (activeCategory.parentId !== overCategory.parentId) {
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è
        const sameLevelCategories = categories.filter(cat => cat.parentId === activeCategory.parentId);
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –≤ –º–∞—Å—Å–∏–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è
        const oldIndex = sameLevelCategories.findIndex(cat => cat.id === active.id);
        const newIndex = sameLevelCategories.findIndex(cat => cat.id === over.id);
        
        if (oldIndex !== -1 && newIndex !== -1) {
          // –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è
          const reorderedSameLevel = arrayMove(sameLevelCategories, oldIndex, newIndex);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          const newCategories = categories.map(cat => {
            const reorderedCat = reorderedSameLevel.find(rc => rc.id === cat.id);
            return reorderedCat || cat;
          });
          
          // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
          setCategories(newCategories);
          
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≥–æ –∂–µ —É—Ä–æ–≤–Ω—è –≤ API
            const sameLevelCategoryIds = reorderedSameLevel.map(cat => cat.id);
            
            const response = await fetch(`${API_BASE_URL}/api/categories/reorder`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${user.token}`
              },
              body: JSON.stringify({
                categoryIds: sameLevelCategoryIds
              })
            });
            
            if (response.ok) {
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
              await fetchCategories();
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              if (loadCategoriesFromAPI) {
                await loadCategoriesFromAPI();
              }
            } else {
              console.error('Reorder failed:', response.status);
              // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
              fetchCategories();
            }
          } catch (error) {
            console.error('Error during reorder:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            fetchCategories();
          }
        }
      }
    };
  
    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const buildTree = (cats) => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ id
      const validCats = cats.filter(cat => cat && cat.id);
      
      const map = {};
      validCats.forEach(cat => { map[cat.id] = { ...cat, sub: [] }; });
      const tree = [];
      validCats.forEach(cat => {
        if (cat.parentId) {
          if (map[cat.parentId]) map[cat.parentId].sub.push(map[cat.id]);
        } else {
          tree.push(map[cat.id]);
        }
      });
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–ª—é order
      tree.sort((a, b) => (a.order || 0) - (b.order || 0));
  
      return tree;
    };
    const tree = buildTree(categories);
  
    // –†–∞—Å–∫—Ä—ã—Ç–∏–µ/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
    const handleExpand = id => {
      setExpanded(exp => exp.includes(id) ? exp.filter(e => e !== id) : [...exp, id]);
    };
  
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const handleToggleActive = async (cat) => {
      try {
        console.log('üîÑ CMSCategories: Toggling category active state', {
          categoryId: cat.id,
          categoryName: cat.name,
          currentActive: cat.active,
          timestamp: new Date().toISOString()
        });
        
        const response = await fetch(`${API_BASE_URL}/api/categories/${cat.id}/toggle`, {
          method: 'PATCH',
          headers: { 'Authorization': `Bearer ${user.token}` }
        });
        
        if (response.ok) {
          const updatedCategory = await response.json();
          console.log('üîÑ CMSCategories: Toggle response from server:', {
            categoryId: updatedCategory.id,
            newActive: updatedCategory.active,
            serverResponse: updatedCategory
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
          setCategories(prevCategories => 
            prevCategories.map(category => 
              category.id === cat.id 
                ? { ...category, active: updatedCategory.active }
                : category
            )
          );
          
          console.log('üîÑ CMSCategories: Local state updated');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (loadCategoriesFromAPI) {
            console.log('üîÑ CMSCategories: Refreshing sidebar categories...');
            await loadCategoriesFromAPI();
          }
        } else {
          console.error('Failed to toggle category:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Error toggling category:', error);
      }
    };
    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const handleDelete = (id) => {
      const category = categories.find(cat => cat.id === id);
      if (category) {
        setDeleteDialog({ open: true, id: id, name: category.name });
      }
    };
  
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const handleConfirmDelete = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/categories/${deleteDialog.id}`, {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${user.token}` }
        });
        
        if (response.ok) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
          setCategories(prevCategories => 
            prevCategories.filter(category => category.id !== deleteDialog.id)
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if (loadCategoriesFromAPI) {
            await loadCategoriesFromAPI();
          }
        } else {
          console.error('Failed to delete category');
        }
      } catch (error) {
        console.error('Error deleting category:', error);
      } finally {
        setDeleteDialog({ open: false, id: null, name: '' });
      }
    };
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const handleEdit = id => {
      const category = categories.find(cat => cat.id === id);
      if (category) {
        setEditForm({
          id: category.id,
          name: category.name,
          parent: category.parentId || '',
          icon: null
        });
        setIsEditing(true);
        setEditDialogOpen(true);
      }
    };
  
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleEditFormChange = e => {
      const { name, value, files } = e.target;
      if (name === 'icon') {
        setEditForm(f => ({ ...f, icon: files[0] }));
      } else {
        setEditForm(f => ({ ...f, [name]: value }));
      }
    };
  
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const handleEditSubmit = async e => {
      e.preventDefault();
      if (!editForm.name) return;
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–æ —Å–±—Ä–æ—Å–∞
      const formDataToSend = new FormData();
      formDataToSend.append('name', editForm.name);
      if (editForm.icon) {
        formDataToSend.append('image', editForm.icon);
      }
      if (editForm.parent !== '') {
        formDataToSend.append('parentId', editForm.parent);
      }
  
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ —Å–±—Ä–æ—Å–∞ —Ñ–æ—Ä–º—ã
      const categoryId = editForm.id;
  
      // –°—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setEditForm({ id: null, name: '', parent: '', icon: null });
      setIsEditing(false);
      setEditDialogOpen(false);
      if (editFileInputRef.current) editFileInputRef.current.value = '';
  
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const response = await fetch(`${API_BASE_URL}/api/categories/${categoryId}`, {
          method: 'PUT',
          headers: { 'Authorization': `Bearer ${user.token}` },
          body: formDataToSend
        });
  
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }
  
        const updatedCategory = await response.json();
        
        console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedCategory);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.loadCategoriesFromAPI) {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
          window.loadCategoriesFromAPI(true);
        }
        
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ProductsContext
        if (window.refreshProductsContextCategories) {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ProductsContext...');
          window.refreshProductsContextCategories();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        setCategories(prevCategories => {
          const updatedCategories = prevCategories.map(category => {
            if (category.id === categoryId) {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
              let newIconPath;
              const imagePath = updatedCategory.icon || updatedCategory.image;
              if (imagePath) {
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (175... –∏–ª–∏ 176...), —ç—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if (imagePath.match(/^(175|176)\d+/)) {
                  newIconPath = `${API_BASE_URL}/uploads/${imagePath}?t=${Date.now()}`;
                } else {
                  // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ public –ø–∞–ø–∫–∏
                  newIconPath = `${API_BASE_URL}/${imagePath}?t=${Date.now()}`;
                }
              } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                newIconPath = `${API_BASE_URL}${getCategoryIconForAPI(updatedCategory.name)}?t=${Date.now()}`;
              }
              
              console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', {
                id: categoryId,
                oldImage: category.image,
                newImage: updatedCategory.image,
                newIconPath: newIconPath,
                updatedCategory: updatedCategory,
                timestamp: new Date().toISOString()
              });
              
              return { 
                ...category, 
                name: updatedCategory.name, 
                parentId: updatedCategory.parentId,
                image: updatedCategory.image,
                icon: newIconPath, // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å –Ω–æ–≤–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                active: updatedCategory.active,
                _forceUpdate: Date.now() // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è React
              };
            }
            return category;
          });
          
          console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', {
            allCategories: updatedCategories.length,
            timestamp: new Date().toISOString()
          });
          return updatedCategories;
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setTimeout(() => {
          console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
          setCategories(prevCategories => {
            const forceUpdate = prevCategories.map(category => ({
              ...category,
              _forceUpdate: Date.now() // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }));
            console.log('üîÑ Force update applied:', {
              categoriesCount: forceUpdate.length,
              timestamp: new Date().toISOString()
            });
            return forceUpdate;
          });
        }, 100);
        
        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–ª–µ icon
        // loadCategoriesFromAPI –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–µ—Ä—è–µ—Ç –ø–æ–ª–µ icon
        console.log('üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–µ icon');
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }
    };
  
    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleCancelEdit = () => {
      setEditForm({ id: null, name: '', parent: '', icon: null });
      setIsEditing(false);
      setEditDialogOpen(false);
      if (editFileInputRef.current) editFileInputRef.current.value = '';
    };
    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const handleFormChange = e => {
      const { name, value, files } = e.target;
      if (name === 'icon') setForm(f => ({ ...f, icon: files[0] }));
      else setForm(f => ({ ...f, [name]: value }));
    };
    const handleFormSubmit = async e => {
      e.preventDefault();
      if (!form.name) return;
      
      try {
      const formData = new FormData();
      formData.append('name', form.name);
      if (form.icon) formData.append('image', form.icon);
      if (form.type === 'subcategory' && form.parent) {
        formData.append('parentId', form.parent);
      }
        
        const response = await fetch(`${API_BASE_URL}/api/categories`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${user.token}` },
        body: formData
      });
        
        if (response.ok) {
      setForm({ type: 'category', parent: '', name: '', icon: null });
      if (fileInputRef.current) fileInputRef.current.value = '';
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const newCategory = await response.json();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      setCategories(prevCategories => [...prevCategories, newCategory]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (loadCategoriesFromAPI) {
        await loadCategoriesFromAPI();
      }
        } else {
          console.error('Failed to create category');
        }
      } catch (error) {
        console.error('Error creating category:', error);
      }
    };
  
    if (loading) return <Box sx={{ p: 4, textAlign: 'center' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</Box>;
  
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è drag & drop –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const SortableCategoryItem = ({ cat, isRoot = false }) => {
      const {
        attributes,
        listeners,
        setNodeRef,
        transform,
        transition,
        isDragging,
      } = useSortable({ id: cat.id });
  
      const style = {
        transform: CSS.Transform.toString(transform),
        transition,
        opacity: isDragging ? 0.5 : 1,
      };
  
      return (
        <Box
          ref={setNodeRef}
          style={style}
          sx={{
            border: '1px solid #eee',
            borderRadius: 3,
            mb: 2,
            background: '#fff',
            p: 2,
            boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
            display: 'flex',
            alignItems: 'center',
            gap: 2,
            cursor: 'grab',
            '&:active': {
              cursor: 'grabbing',
            },
          }}
        >
          {/* DragIndicator –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          <span {...attributes} {...listeners} style={{ display: 'flex' }}>
            <DragIndicator
              sx={{
                color: '#ccc',
                cursor: 'grab',
                '&:active': { cursor: 'grabbing' },
              }}
            />
          </span>
          {cat.sub && cat.sub.length > 0 && (
            <IconButton onClick={e => { e.stopPropagation(); handleExpand(cat.id); }} data-no-drag>
              {expanded.includes(cat.id) ? <ExpandMore /> : <ChevronRight />}
            </IconButton>
          )}
          {cat.parentId == null && (() => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
            let iconUrl;
            const imagePath = cat.image || cat.icon;
            
            console.log('üîç CMS Icon Debug:', {
              categoryId: cat.id,
              categoryName: cat.name,
              catImage: cat.image,
              catIcon: cat.icon,
              imagePath: imagePath,
              isUploadedFile: imagePath && imagePath.match(/^(175|176)\d+/),
              timestamp: new Date().toISOString()
            });
            
            if (imagePath) {
              // –í—Å–µ —Ñ–∞–π–ª—ã –∏–¥—É—Ç –≤ uploads, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ CMS
              iconUrl = `${API_BASE_URL}/uploads/${imagePath}?t=${Date.now()}`;
              console.log('‚úÖ Using uploads path:', iconUrl);
            } else {
              // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
              iconUrl = `${API_BASE_URL}${getCategoryIconForAPI(cat.name)}?t=${Date.now()}`;
              console.log('‚úÖ Using fallback path:', iconUrl);
            }
            
            console.log('üñºÔ∏è CMS Icon render:', {
              categoryId: cat.id,
              categoryName: cat.name,
              categoryImage: cat.image,
              categoryIcon: cat.icon,
              iconUrl: iconUrl,
              forceUpdate: cat._forceUpdate,
              timestamp: new Date().toISOString()
            });
            return (
              <img 
                key={`${cat.id}-${cat.image}-${cat._forceUpdate || ''}`}
                src={iconUrl} 
                alt={`–ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cat.name}`}
                style={{ width: 32, height: 32, marginLeft: '4px', marginRight: 12, borderRadius: 0, objectFit: 'cover' }} 
                onLoad={() => console.log('‚úÖ Image loaded successfully:', iconUrl)}
                onError={(e) => console.log('‚ùå Image failed to load:', iconUrl, e)}
              />
            );
          })()}
          <Typography sx={{ fontWeight: 500, flex: 1 }}>{cat.name}</Typography>
          <Switch
            checked={cat.active === true}
            onClick={e => { e.stopPropagation(); }}
            onChange={() => handleToggleActive(cat)}
            color="success"
            inputProps={{ 'aria-label': '–í–∫–ª—é—á–µ–Ω–∞/–û—Ç–∫–ª—é—á–µ–Ω–∞' }}
            sx={{ mr: 2 }}
            data-no-drag
          />
          <IconButton 
            size="small" 
            onClick={e => {
              e.preventDefault();
              e.stopPropagation();
              handleEdit(cat.id);
            }}
            sx={{ 
              color: '#1976d2',
              '&:hover': {
                backgroundColor: '#e3f2fd'
              }
            }}
            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            data-no-drag
          >
            <Edit />
          </IconButton>
          <IconButton 
            size="small" 
            onClick={e => {
              e.preventDefault();
              e.stopPropagation();
              handleDelete(cat.id);
            }}
            sx={{ 
              color: '#f44336',
              '&:hover': {
                backgroundColor: '#ffebee'
              }
            }}
            title="–£–¥–∞–ª–∏—Ç—å"
            data-no-drag
          >
            <Delete />
          </IconButton>
        </Box>
      );
    };
  
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const renderCategory = cat => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å id
      if (!cat || !cat.id) {
        console.warn('Category without id:', cat);
        return null;
      }
      
      return (
        <React.Fragment key={cat.id}>
          <SortableCategoryItem cat={cat} isRoot={!cat.parentId} />
          {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {cat.sub && cat.sub.length > 0 && expanded.includes(cat.id) && (
            <Box sx={{ ml: 6, mb: 2 }}>
              {cat.sub.map(renderCategory)}
            </Box>
          )}
        </React.Fragment>
      );
    };
  
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ø–ª–æ—Å–∫–æ–º –≤–∏–¥–µ –¥–ª—è drag & drop
    const getAllCategories = (cats) => {
      let result = [];
      cats.forEach(cat => {
        if (cat && cat.id) {
          result.push(cat);
          if (cat.sub && cat.sub.length > 0) {
            result = result.concat(getAllCategories(cat.sub));
          }
        }
      });
      return result;
    };
    return (
      <Box sx={{ mt: 0, minHeight: 400, py: 4, px: { xs: 0, md: 0 } }}>
        <Box sx={{
          background: '#fff',
          borderRadius: 4,
          boxShadow: '0 4px 24px rgba(0,0,0,0.08)',
          p: { xs: 2, md: 4 },
          maxWidth: 1100,
          minWidth: 1100,
          minHeight: 320,
          margin: '0 auto',
          mt: 0,
        }}>
          {/* –ö—Ä–∞—Å–∏–≤–∞—è —à–∞–ø–∫–∞ */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
            <Category color="primary" sx={{ fontSize: 40 }} />
            <Box>
              <Typography variant="h4" component="h1" sx={{ fontWeight: 'bold', color: '#3f51b5', mb: 1 }}>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
              </Typography>
              <Typography variant="body1" color="textSecondary">
                –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞–≥–∞–∑–∏–Ω–∞
              </Typography>
            </Box>
          </Box>
  
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
          <Box sx={{ mb: 4, p: 3, bgcolor: '#f8f9fa', borderRadius: 3, border: '1px solid #e9ecef' }}>
            <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold', color: '#495057' }}>
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            </Typography>
            <Box sx={{ display: 'flex', gap: 4, flexWrap: 'wrap' }}>
              <Box sx={{ textAlign: 'center', minWidth: 120 }}>
                <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#667eea' }}>
                  {categories.filter(cat => !cat.parentId).length}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –û—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </Typography>
              </Box>
              <Box sx={{ textAlign: 'center', minWidth: 120 }}>
                <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#28a745' }}>
                  {categories.filter(cat => cat.parentId).length}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </Typography>
              </Box>
              <Box sx={{ textAlign: 'center', minWidth: 120 }}>
                <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#ffc107' }}>
                  {categories.filter(cat => cat.active).length}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                </Typography>
              </Box>
              <Box sx={{ textAlign: 'center', minWidth: 120 }}>
                <Typography variant="h4" sx={{ fontWeight: 'bold', color: '#dc3545' }}>
                  {categories.filter(cat => !cat.active).length}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                </Typography>
              </Box>
            </Box>
          </Box>
  
          {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
          <Box sx={{ mb: 4, height: 1, background: 'linear-gradient(90deg, transparent, #e0e0e0, transparent)' }} />
  
          <Box sx={{ maxWidth: 700, mx: 'auto', mt: 4 }}>
            <Typography variant="h5" sx={{ mb: 3, fontWeight: 'bold', color: '#495057' }}>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</Typography>
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={handleDragEnd}
        >
          <SortableContext
            items={getAllCategories(tree).map(cat => cat.id)}
            strategy={verticalListSortingStrategy}
          >
            <Box sx={{ mb: 4 }}>
              {tree.map(renderCategory)}
            </Box>
          </SortableContext>
        </DndContext>
  
        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <Box component="form" onSubmit={handleFormSubmit} sx={{ 
          background: '#f8f9fa', 
          p: 4, 
          borderRadius: 3, 
          border: '1px solid #e9ecef',
          mt: 4
        }}>
          <Typography variant="h6" sx={{ mb: 3, fontWeight: 'bold', color: '#495057' }}>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é / –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</Typography>
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel id="type-label">–¢–∏–ø</InputLabel>
            <Select labelId="type-label" name="type" value={form.type} label="–¢–∏–ø" onChange={handleFormChange}>
              <MenuItem value="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</MenuItem>
              <MenuItem value="subcategory">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</MenuItem>
                  </Select>
                </FormControl>
          {form.type === 'subcategory' && (
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel id="parent-label">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
              <Select labelId="parent-label" name="parent" value={form.parent} label="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" onChange={handleFormChange}>
                {categories.filter(cat => !cat.parentId).map(cat => <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>)}
                  </Select>
                </FormControl>
          )}
          <TextField label="–ù–∞–∑–≤–∞–Ω–∏–µ" name="name" value={form.name} onChange={handleFormChange} fullWidth sx={{ mb: 2 }} required />
          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', mb: 2 }}>
            <Button 
              variant="outlined" 
              component="label"
              sx={{
                background: 'linear-gradient(135deg, #ff6600 0%, #ff8533 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 15,
                borderRadius: 2,
                px: 3,
                py: 1.5,
                textTransform: 'none',
                border: '1px solid #ff6600',
                boxShadow: '0 2px 8px rgba(255, 102, 0, 0.3)',
                minWidth: 120,
                height: 44,
                '&:hover': {
                  background: 'linear-gradient(135deg, #ff8533 0%, #ff6600 100%)',
                  boxShadow: '0 4px 12px rgba(255, 102, 0, 0.4)',
                  transform: 'translateY(-1px)'
                },
                '&:disabled': {
                  background: '#ccc',
                  color: '#666',
                  boxShadow: 'none'
                }
              }}
            >
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É
              <input ref={fileInputRef} type="file" name="icon" accept="image/*" hidden onChange={handleFormChange} />
            </Button>
            <Button 
              type="submit" 
              variant="contained"
              sx={{
                background: 'linear-gradient(135deg, #4caf50 0%, #66bb6a 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 15,
                borderRadius: 2,
                px: 3,
                py: 1.5,
                textTransform: 'none',
                boxShadow: '0 2px 8px rgba(76, 175, 80, 0.3)',
                minWidth: 120,
                height: 44,
                '&:hover': {
                  background: 'linear-gradient(135deg, #66bb6a 0%, #4caf50 100%)',
                  boxShadow: '0 4px 12px rgba(76, 175, 80, 0.4)',
                  transform: 'translateY(-1px)'
                },
                '&:disabled': {
                  background: '#ccc',
                  color: '#666',
                  boxShadow: 'none'
                }
              }}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          </Box>
          {form.icon && <Typography sx={{ mb: 2, fontSize: 14, color: '#888' }}>{form.icon.name}</Typography>}
                </Box>
  
        {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <Dialog 
          open={editDialogOpen} 
          onClose={handleCancelEdit} 
          PaperProps={{
            sx: {
              borderRadius: 3,
              boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
              minWidth: 500,
              maxWidth: 600
            }
          }}
        >
          <DialogTitle sx={{ 
            textAlign: 'center', 
            pb: 1,
            fontWeight: 700,
            fontSize: '1.5rem',
            color: '#333',
            borderBottom: '2px solid #f0f0f0',
            mb: 2
          }}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </DialogTitle>
          <DialogContent sx={{ textAlign: 'center', pb: 3, px: 4 }}>
            <Box component="form" onSubmit={handleEditSubmit} sx={{ mt: 2 }}>
              <FormControl fullWidth sx={{ mb: 2 }}>
                <InputLabel id="edit-parent-label">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
                <Select 
                  labelId="edit-parent-label" 
                  name="parent" 
                  value={editForm.parent} 
                  label="–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" 
                  onChange={handleEditFormChange}
                >
                  <MenuItem value="">–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</MenuItem>
                  {categories.filter(cat => !cat.parentId && cat.id !== editForm.id).map(cat => 
                    <MenuItem key={cat.id} value={cat.id}>{cat.name}</MenuItem>
                  )}
                </Select>
              </FormControl>
              <TextField 
                label="–ù–∞–∑–≤–∞–Ω–∏–µ" 
                name="name" 
                value={editForm.name} 
                onChange={handleEditFormChange} 
                fullWidth 
                sx={{ mb: 2 }} 
                required 
              />
              <Button 
                variant="outlined" 
                component="label" 
                sx={{ 
                  mb: 2,
                  background: 'linear-gradient(135deg, #ff6600 0%, #ff8533 100%)',
                  color: '#fff',
                  fontWeight: 600,
                  fontSize: 15,
                  borderRadius: 2,
                  px: 3,
                  py: 1.5,
                  textTransform: 'none',
                  border: '1px solid #ff6600',
                  boxShadow: '0 2px 8px rgba(255, 102, 0, 0.3)',
                  minWidth: 120,
                  height: 44,
                  '&:hover': {
                    background: 'linear-gradient(135deg, #ff8533 0%, #ff6600 100%)',
                    boxShadow: '0 4px 12px rgba(255, 102, 0, 0.4)',
                    transform: 'translateY(-1px)'
                  },
                  '&:disabled': {
                    background: '#ccc',
                    color: '#666',
                    boxShadow: 'none'
                  }
                }}
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
                <input ref={editFileInputRef} type="file" name="icon" accept="image/*" hidden onChange={handleEditFormChange} />
              </Button>
              {editForm.icon && <Typography sx={{ mb: 2, fontSize: 14, color: '#888' }}>{editForm.icon.name}</Typography>}
  
              </Box>
          </DialogContent>
          <DialogActions sx={{ justifyContent: 'center', pb: 3, px: 4, gap: 2 }}>
            <Button 
              onClick={handleCancelEdit} 
              sx={{
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 15,
                borderRadius: 2,
                px: 3,
                py: 1.5,
                textTransform: 'none',
                boxShadow: '0 2px 8px rgba(244, 67, 54, 0.3)',
                minWidth: 120,
                height: 44,
                '&:hover': {
                  background: 'linear-gradient(135deg, #d32f2f 0%, #f44336 100%)',
                  boxShadow: '0 4px 12px rgba(244, 67, 54, 0.4)',
                  transform: 'translateY(-1px)'
                },
                cursor: 'pointer',
              }}
              variant="contained"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleEditSubmit} 
              sx={{
                background: 'linear-gradient(135deg, #4CAF50 0%, #45a049 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 15,
                borderRadius: 2,
                px: 3,
                py: 1.5,
                textTransform: 'none',
                boxShadow: '0 2px 8px rgba(76, 175, 80, 0.3)',
                minWidth: 120,
                height: 44,
                '&:hover': {
                  background: 'linear-gradient(135deg, #45a049 0%, #4CAF50 100%)',
                  boxShadow: '0 4px 12px rgba(76, 175, 80, 0.4)',
                  transform: 'translateY(-1px)'
                },
                cursor: 'pointer',
              }}
              variant="contained"
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </Button>
          </DialogActions>
        </Dialog>
  
        {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
        <Dialog 
          open={deleteDialog.open} 
          onClose={() => setDeleteDialog({ open: false, id: null, name: '' })}
          PaperProps={{
            sx: {
              borderRadius: 3,
              boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
              minWidth: 400,
              maxWidth: 500
            }
          }}
        >
          <DialogTitle sx={{ 
            textAlign: 'center', 
            pb: 1,
            fontWeight: 700,
            fontSize: '1.5rem',
            color: '#d32f2f',
            borderBottom: '2px solid #ffebee',
            mb: 2
          }}>
            –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{deleteDialog.name}"?
          </DialogTitle>
          <DialogContent sx={{ textAlign: 'center', pb: 3, px: 4 }}>
            <Alert severity="warning" sx={{ mb: 2, borderRadius: 2 }}>
              <Typography variant="body2" sx={{ fontWeight: 500 }}>
                –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
              </Typography>
            </Alert>
            
            <Typography variant="body1" sx={{ mb: 2, color: '#666', lineHeight: 1.5 }}>
              –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{deleteDialog.name}"?
            </Typography>
            
            <Alert severity="info" sx={{ borderRadius: 2 }}>
              <Typography variant="body2">
                –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.
              </Typography>
            </Alert>
          </DialogContent>
          <DialogActions sx={{ justifyContent: 'center', pb: 3, px: 4, gap: 2 }}>
            <Button 
              onClick={() => setDeleteDialog({ open: false, id: null, name: '' })}
              sx={{
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 13,
                minWidth: 0,
                height: 32,
                borderRadius: 6,
                px: 2,
                lineHeight: '32px',
                whiteSpace: 'nowrap',
                textTransform: 'none',
                boxShadow: '0 2px 4px rgba(244, 67, 54, 0.2)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #d32f2f 0%, #f44336 100%)',
                  boxShadow: '0 4px 8px rgba(244, 67, 54, 0.3)',
                },
                cursor: 'pointer',
              }}
              variant="contained"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              onClick={handleConfirmDelete}
              sx={{
                background: 'linear-gradient(135deg, #f44336 0%, #d32f2f 100%)',
                color: '#fff',
                fontWeight: 600,
                fontSize: 13,
                minWidth: 0,
                height: 32,
                borderRadius: 6,
                px: 2,
                lineHeight: '32px',
                whiteSpace: 'nowrap',
                textTransform: 'none',
                boxShadow: '0 2px 4px rgba(244, 67, 54, 0.2)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #d32f2f 0%, #f44336 100%)',
                  boxShadow: '0 4px 8px rgba(244, 67, 54, 0.3)',
                },
                cursor: 'pointer',
              }}
              variant="contained"
            >
              –£–¥–∞–ª–∏—Ç—å
            </Button>
          </DialogActions>
        </Dialog>
          </Box>
        </Box>
      </Box>
    );
  }

export default CMSCategories;