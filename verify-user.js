const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient();

async function verifyUser() {
  try {
    const email = process.argv[2];
    
    if (!email) {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node verify-user.js user@example.com');
      return;
    }
    
    console.log(`üîß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –¥–ª—è: ${email}`);
    
    // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: email }
    });
    
    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return;
    }
    
    console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (ID: ${user.id})`);
    console.log(`üìß Email: ${user.email}`);
    console.log(`üîë –†–æ–ª—å: ${user.role}`);
    console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${user.emailVerified}`);
    
    if (user.emailVerified) {
      console.log('‚úÖ Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
      return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
    await prisma.user.update({
      where: { id: user.id },
      data: { emailVerified: true }
    });
    
    console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
    console.log(`üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å: ${email}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifyUser();
