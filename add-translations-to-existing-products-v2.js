const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000';

async function addTranslationsToExistingProducts() {
  try {
    console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–∞–º...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const response = await axios.get(`${API_BASE_URL}/api/products`);
    const products = response.data;

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–≥–¥–µ nameHe —Ä–∞–≤–Ω–æ name –∏–ª–∏ –ø—É—Å—Ç–æ–µ)
    const productsWithoutTranslations = products.filter(p => 
      !p.nameHe || 
      p.nameHe === p.name || 
      !p.descriptionHe || 
      p.descriptionHe === p.description
    );
    
    console.log(`üîç –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${productsWithoutTranslations.length}`);

    if (productsWithoutTranslations.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã!');
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const productsToTranslate = productsWithoutTranslations.slice(0, 3);
    
    for (let i = 0; i < productsToTranslate.length; i++) {
      const product = productsToTranslate[i];
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}/${productsToTranslate.length}: "${product.name}"`);
      
      try {
        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        const updateData = {
          name: product.name,
          description: product.description,
          inputLanguage: 'ru' // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const updateResponse = await axios.put(
          `${API_BASE_URL}/api/products/${product.id}`,
          updateData,
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer test-token' // –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            }
          }
        );

        console.log(`‚úÖ –¢–æ–≤–∞—Ä "${product.name}" –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${product.name}":`, error.response?.data || error.message);
        
        if (error.response?.status === 401) {
          console.log('üí° –ù—É–∂–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤');
          console.log('üí° –í–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
          break;
        }
      }
    }

    console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ —Å–∞–π—Ç–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

addTranslationsToExistingProducts();

