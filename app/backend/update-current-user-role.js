const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function updateCurrentUserRole() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true
      }
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    users.forEach(user => {
      console.log(`- ID: ${user.id}, Email: ${user.email}, Name: ${user.name}, Role: ${user.role}`);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email simbakingoftoys@gmail.com (–µ—Å–ª–∏ —ç—Ç–æ –≤–∞—à email)
const targetEmail = 'wexkwasexort@gmail.com';
    const user = await prisma.user.findUnique({
      where: { email: targetEmail }
    });
    
    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${targetEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await prisma.$disconnect();
      return;
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);
    console.log(`üìä –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: ${user.role}`);
    
    if (user.role === 'admin') {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!');
      await prisma.$disconnect();
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ admin
    const updatedUser = await prisma.user.update({
      where: { id: user.id },
      data: { role: 'admin' }
    });
    
    console.log('‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ admin!');
    console.log(`üìä –ù–æ–≤–∞—è —Ä–æ–ª—å: ${updatedUser.role}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateCurrentUserRole(); 