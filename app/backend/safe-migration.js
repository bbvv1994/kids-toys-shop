const { PrismaClient } = require('@prisma/client');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

class SafeMigration {
  constructor() {
    this.backupPath = path.join(__dirname, 'migration-backup.json');
    this.logPath = path.join(__dirname, 'migration-log.txt');
  }

  log(message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ª–æ–≥–∞
    fs.appendFileSync(this.logPath, logMessage + '\n');
  }

  async checkDatabaseConnection() {
    try {
      await prisma.$queryRaw`SELECT 1`;
      this.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      return false;
    }
  }

  async checkExistingFields() {
    try {
      const tableInfo = await prisma.$queryRaw`
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'Product' 
        AND column_name IN ('nameHe', 'descriptionHe')
      `;
      
      const existingFields = tableInfo.map(col => col.column_name);
      this.log(`üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${existingFields.join(', ') || '–Ω–µ—Ç'}`);
      
      return existingFields;
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π: ${error.message}`);
      return [];
    }
  }

  async createBackup() {
    try {
      this.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      const products = await prisma.product.findMany({
        select: {
          id: true,
          name: true,
          description: true,
          price: true,
          ageGroup: true,
          createdAt: true,
          updatedAt: true,
          imageUrls: true,
          quantity: true,
          article: true,
          brand: true,
          country: true,
          height: true,
          length: true,
          width: true,
          subcategoryId: true,
          isHidden: true,
          gender: true,
          categoryId: true,
          categoryName: true
        }
      });
      
      const backup = {
        timestamp: new Date().toISOString(),
        productsCount: products.length,
        products: products
      };
      
      fs.writeFileSync(this.backupPath, JSON.stringify(backup, null, 2));
      this.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      return true;
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
      return false;
    }
  }

  async applyMigrations() {
    try {
      this.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
      execSync('npx prisma migrate deploy', { 
        stdio: 'pipe',
        cwd: __dirname
      });
      this.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
      execSync('npx prisma generate', { 
        stdio: 'pipe',
        cwd: __dirname
      });
      this.log('‚úÖ Prisma Client –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      return true;
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: ${error.message}`);
      return false;
    }
  }

  async verifyMigration() {
    try {
      this.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const translationFields = await this.checkExistingFields();
      
      if (translationFields.length >= 2) {
        this.log('‚úÖ –ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        const productCount = await prisma.product.count();
        this.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–æ–≤–∞—Ä–æ–≤: ${productCount}`);
        
        return true;
      } else {
        this.log('‚ùå –ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
        return false;
      }
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return false;
    }
  }

  async rollback() {
    try {
      this.log('üîÑ –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
      
      if (fs.existsSync(this.backupPath)) {
        const backup = JSON.parse(fs.readFileSync(this.backupPath, 'utf8'));
        this.log(`üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backup.productsCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        this.log('‚ö†Ô∏è –û—Ç–∫–∞—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞');
      }
      
      return true;
    } catch (error) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: ${error.message}`);
      return false;
    }
  }

  async run() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    try {
      // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (!await this.checkDatabaseConnection()) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
      
      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
      const existingFields = await this.checkExistingFields();
      
      if (existingFields.length >= 2) {
        this.log('‚úÖ –ü–æ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        return { success: true, message: '–ü–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç' };
      }
      
      // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      if (!await this.createBackup()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é');
      }
      
      // –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
      if (!await this.applyMigrations()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏');
      }
      
      // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      if (!await this.verifyMigration()) {
        throw new Error('–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É');
      }
      
      this.log('üéâ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      return { success: true, message: '–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' };
      
    } catch (error) {
      this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      
      // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–∞—Ç–∞
      await this.rollback();
      
      return { 
        success: false, 
        error: error.message,
        message: '–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç'
      };
    } finally {
      await prisma.$disconnect();
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
module.exports = SafeMigration;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const migration = new SafeMigration();
  migration.run().then(result => {
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    process.exit(result.success ? 0 : 1);
  }).catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}
