const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const cacheManager = require('./cache');

class ImageCacheMiddleware {
  constructor() {
    this.cacheDir = path.join(__dirname, '../cache/images');
    this.maxAge = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π
    this.ensureCacheDir();
  }

  ensureCacheDir() {
    if (!fs.existsSync(this.cacheDir)) {
      fs.mkdirSync(this.cacheDir, { recursive: true });
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  generateImageKey(imagePath, options = {}) {
    const { width, height, quality, format } = options;
    const keyData = `${imagePath}-${width || 'original'}-${height || 'original'}-${quality || 'original'}-${format || 'original'}`;
    return crypto.createHash('md5').update(keyData).digest('hex');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getCachedImage(imageKey) {
    const cachePath = path.join(this.cacheDir, `${imageKey}.cache`);
    
    if (fs.existsSync(cachePath)) {
      const stats = fs.statSync(cachePath);
      const now = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à
      if (now - stats.mtime.getTime() < this.maxAge) {
        return {
          exists: true,
          path: cachePath,
          size: stats.size,
          mtime: stats.mtime
        };
      } else {
        // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª
        fs.unlinkSync(cachePath);
      }
    }
    
    return { exists: false };
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫—ç—à
  async cacheImage(imageKey, imageBuffer, metadata = {}) {
    try {
      const cachePath = path.join(this.cacheDir, `${imageKey}.cache`);
      fs.writeFileSync(cachePath, imageBuffer);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const metaPath = path.join(this.cacheDir, `${imageKey}.meta`);
      fs.writeFileSync(metaPath, JSON.stringify(metadata));
      
      return true;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error.message);
      return false;
    }
  }

  // Middleware –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  middleware() {
    return async (req, res, next) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
      if (!req.path.match(/\.(jpg|jpeg|png|webp|gif)$/i)) {
        return next();
      }

      try {
        const imagePath = req.path;
        const options = {
          width: req.query.w ? parseInt(req.query.w) : null,
          height: req.query.h ? parseInt(req.query.h) : null,
          quality: req.query.q ? parseInt(req.query.q) : null,
          format: req.query.f || null
        };

        const imageKey = this.generateImageKey(imagePath, options);
        const cached = await this.getCachedImage(imageKey);

        if (cached.exists) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          res.setHeader('Cache-Control', 'public, max-age=2592000'); // 30 –¥–Ω–µ–π
          res.setHeader('X-Cache', 'HIT');
          res.setHeader('Content-Type', this.getContentType(imagePath));
          res.setHeader('Content-Length', cached.size);
          
          const stream = fs.createReadStream(cached.path);
          stream.pipe(res);
          return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        const originalEnd = res.end;
        const chunks = [];

        res.end = function(chunk) {
          if (chunk) {
            chunks.push(chunk);
          }

          if (chunks.length > 0) {
            const imageBuffer = Buffer.concat(chunks);
            
            // –ö—ç—à–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            setImmediate(async () => {
              await this.cacheImage(imageKey, imageBuffer, {
                originalPath: imagePath,
                options,
                cachedAt: new Date().toISOString()
              });
            });
          }

          return originalEnd.call(this, chunk);
        }.bind(this);

        next();
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ middleware –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
        next();
      }
    };
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞
  getContentType(imagePath) {
    const ext = path.extname(imagePath).toLowerCase();
    const types = {
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.png': 'image/png',
      '.webp': 'image/webp',
      '.gif': 'image/gif'
    };
    return types[ext] || 'application/octet-stream';
  }

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞
  async cleanup() {
    try {
      const files = fs.readdirSync(this.cacheDir);
      const now = Date.now();
      let cleaned = 0;

      for (const file of files) {
        const filePath = path.join(this.cacheDir, file);
        const stats = fs.statSync(filePath);
        
        if (now - stats.mtime.getTime() > this.maxAge) {
          fs.unlinkSync(filePath);
          cleaned++;
        }
      }

      if (cleaned > 0) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      }

      return cleaned;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error.message);
      return 0;
    }
  }
}

module.exports = ImageCacheMiddleware;
