const ProductionImageHandler = require('./productionImageHandler');
const path = require('path');
const fs = require('fs');

class ProductionUploadMiddleware {
  constructor() {
    this.imageHandler = new ProductionImageHandler();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ production
   */
  async processUploadedFiles(req, res, next) {
    try {
      console.log('üñºÔ∏è ProductionUploadMiddleware: processUploadedFiles –≤—ã–∑–≤–∞–Ω');
      console.log('üñºÔ∏è ProductionUploadMiddleware: req.files =', req.files ? req.files.length : 'undefined');
      console.log('üñºÔ∏è ProductionUploadMiddleware: NODE_ENV =', process.env.NODE_ENV);
      
      if (!req.files || req.files.length === 0) {
        console.log('üñºÔ∏è ProductionUploadMiddleware: –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return next();
      }

      console.log(`üñºÔ∏è ProductionUploadMiddleware: Processing ${req.files.length} uploaded files in production...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
      const sizeErrors = this.imageHandler.checkFileSizes(req.files);
      if (sizeErrors.length > 0) {
        return res.status(400).json({ 
          error: 'File size validation failed', 
          details: sizeErrors 
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const results = await this.imageHandler.processMultipleImages(req.files);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrls = [];
      const processedFiles = [];

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const uploadsDir = path.join(__dirname, '..', 'uploads');
      if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
      }

      results.forEach(result => {
        if (result.success) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
          const filePath = path.join(uploadsDir, result.filename);
          fs.writeFileSync(filePath, result.buffer);
          
          const fileInfo = {
            filename: result.filename,
            originalName: result.originalName || 'unknown',
            size: result.processedSize,
            mimetype: result.mimetype,
            buffer: result.buffer // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
          };
          
          processedFiles.push(fileInfo);
          imageUrls.push(`/uploads/${result.filename}`);
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ req –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      req.processedFiles = processedFiles;
      req.imageUrls = imageUrls;
      req.imageProcessingResults = results;

      console.log(`‚úÖ Successfully processed ${processedFiles.length} files`);
      console.log(`üìÅ Image URLs:`, imageUrls);

    } catch (error) {
      console.error('Error in production upload middleware:', error);
      return res.status(500).json({ 
        error: 'File processing failed', 
        details: error.message 
      });
    }

    next();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  async processSingleFile(req, res, next) {
    return this.processSingleImage(req, res, next);
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–ª–∏–∞—Å –¥–ª—è processSingleFile)
   */
  async processSingleImage(req, res, next) {
    try {
      if (!req.file) {
        return next();
      }

      console.log(`Processing single file: ${req.file.originalname}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ buffer (production) –∏–ª–∏ –Ω—É–∂–Ω–æ —á–∏—Ç–∞—Ç—å —Å –¥–∏—Å–∫–∞ (development)
      let fileBuffer = req.file.buffer;
      if (!fileBuffer && req.file.path) {
        // –í development —Ä–µ–∂–∏–º–µ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        console.log(`Reading file from disk: ${req.file.path}`);
        fileBuffer = fs.readFileSync(req.file.path);
      }

      if (!fileBuffer) {
        console.error('No file buffer or path available');
        return res.status(400).json({ 
          error: 'File processing failed', 
          details: 'No file data available' 
        });
      }

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
      const tempFile = {
        ...req.file,
        buffer: fileBuffer
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const sizeErrors = this.imageHandler.checkFileSizes([tempFile]);
      if (sizeErrors.length > 0) {
        return res.status(400).json({ 
          error: 'File size validation failed', 
          details: sizeErrors 
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
      const results = await this.imageHandler.processMultipleImages([tempFile]);
      const result = results[0];

      if (result.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        const uploadsDir = path.join(__dirname, '..', 'uploads');
        if (!fs.existsSync(uploadsDir)) {
          fs.mkdirSync(uploadsDir, { recursive: true });
        }
        
        const filePath = path.join(uploadsDir, result.filename);
        fs.writeFileSync(filePath, result.buffer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        req.file.filename = result.filename;
        req.file.mimetype = result.mimetype;
        
        req.processedFile = {
          filename: result.filename,
          originalName: req.file.originalname,
          size: result.processedSize,
          mimetype: result.mimetype,
          buffer: result.buffer
        };
        req.imageUrl = `/uploads/${result.filename}`;
        req.imageProcessingResult = result;
        
        console.log(`‚úÖ Successfully processed single file: ${result.filename}`);
      } else {
        console.error(`‚ùå Failed to process file: ${result.error}`);
        return res.status(400).json({ 
          error: 'File processing failed', 
          details: result.error 
        });
      }

    } catch (error) {
      console.error('Error in production single file middleware:', error);
      return res.status(500).json({ 
        error: 'File processing failed', 
        details: error.message 
      });
    }

    next();
  }
}

module.exports = ProductionUploadMiddleware; 