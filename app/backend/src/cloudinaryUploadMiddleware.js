const CloudinaryImageHandler = require('./cloudinaryImageHandler');

class CloudinaryUploadMiddleware {
  constructor() {
    this.imageHandler = new CloudinaryImageHandler();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å Cloudinary
   */
  async processUploadedFiles(req, res, next) {
    try {
      console.log('üñºÔ∏è CloudinaryUploadMiddleware: processUploadedFiles –≤—ã–∑–≤–∞–Ω');
      console.log('üñºÔ∏è CloudinaryUploadMiddleware: req.files =', req.files ? req.files.length : 'undefined');
      console.log('üñºÔ∏è CloudinaryUploadMiddleware: NODE_ENV =', process.env.NODE_ENV);
      
      if (!req.files || req.files.length === 0) {
        console.log('üñºÔ∏è CloudinaryUploadMiddleware: –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return next();
      }

      console.log(`üñºÔ∏è CloudinaryUploadMiddleware: Processing ${req.files.length} uploaded files with Cloudinary...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
      const sizeErrors = this.imageHandler.checkFileSizes(req.files);
      if (sizeErrors.length > 0) {
        return res.status(400).json({ 
          error: 'File size validation failed', 
          details: sizeErrors 
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const results = await this.imageHandler.processMultipleImages(req.files);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrls = [];
      const processedFiles = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º HD-–≤–µ—Ä—Å–∏–∏
      for (const result of results) {
        if (result.success) {
          const fileInfo = {
            filename: result.filename,
            originalName: result.originalName || 'unknown',
            size: result.processedSize,
            mimetype: result.mimetype,
            url: result.url,
            publicId: result.publicId
          };
          
          processedFiles.push(fileInfo);
          imageUrls.push(result.url); // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ Cloudinary
          
          console.log(`‚úÖ Processed: ${result.filename} -> ${result.url}`);
          
          // –°–æ–∑–¥–∞–µ–º HD-–≤–µ—Ä—Å–∏–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–Ω–æ–π –ª—É–ø—ã
          try {
            if (result.publicId) {
              const hdVersions = await this.imageHandler.createHdVersions(result.publicId);
              if (hdVersions.success) {
                console.log(`üñºÔ∏è HD versions created for: ${result.filename}`);
                console.log(`   @2x: ${hdVersions.hd2x}`);
                console.log(`   @4x: ${hdVersions.hd4x}`);
              }
            }
          } catch (hdError) {
            console.warn(`‚ö†Ô∏è Failed to create HD versions for ${result.filename}:`, hdError.message);
          }
        } else {
          console.error(`‚ùå Failed to process: ${result.originalName} - ${result.error}`);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ request
      req.imageUrls = imageUrls;
      req.processedFiles = processedFiles;

      console.log(`‚úÖ CloudinaryUploadMiddleware: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${imageUrls.length} —Ñ–∞–π–ª–æ–≤`);
      next();

    } catch (error) {
      console.error('‚ùå CloudinaryUploadMiddleware error:', error);
      res.status(500).json({ 
        error: 'Image processing failed', 
        details: error.message 
      });
    }
  }

  /**
   * Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  async deleteOldImages(req, res, next) {
    try {
      const { oldImageUrls } = req.body;
      
      if (!oldImageUrls || !Array.isArray(oldImageUrls)) {
        return next();
      }

      console.log(`üóëÔ∏è CloudinaryUploadMiddleware: Deleting ${oldImageUrls.length} old images...`);

      const deletePromises = oldImageUrls.map(async (imageUrl) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º publicId –∏–∑ URL Cloudinary
        const publicId = this.extractPublicIdFromUrl(imageUrl);
        if (publicId) {
          return await this.imageHandler.deleteImage(publicId);
        }
        return { success: false, error: 'Invalid URL' };
      });

      const results = await Promise.all(deletePromises);
      const successCount = results.filter(r => r.success).length;
      
      console.log(`‚úÖ CloudinaryUploadMiddleware: Deleted ${successCount}/${oldImageUrls.length} old images`);
      next();

    } catch (error) {
      console.error('‚ùå CloudinaryUploadMiddleware deleteOldImages error:', error);
      next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç publicId –∏–∑ URL Cloudinary
   */
  extractPublicIdFromUrl(url) {
    try {
      if (!url || !url.includes('cloudinary.com')) {
        return null;
      }
      
      // –ü—Ä–∏–º–µ—Ä URL: https://res.cloudinary.com/cloud_name/image/upload/v1234567890/kids-toys-shop/1234567890-abc123.webp
      const urlParts = url.split('/');
      const uploadIndex = urlParts.findIndex(part => part === 'upload');
      
      if (uploadIndex !== -1 && urlParts[uploadIndex + 2]) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ –±–µ—Ä–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        return urlParts.slice(uploadIndex + 2).join('/').split('.')[0];
      }
      
      return null;
    } catch (error) {
      console.error('Error extracting publicId from URL:', error);
      return null;
    }
  }
}

module.exports = CloudinaryUploadMiddleware; 