const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

class ImageProcessor {
  constructor() {
    this.maxFileSize = 30 * 1024; // 30KB –≤ –±–∞–π—Ç–∞—Ö
    this.minFileSize = 15 * 1024; // 15KB –≤ –±–∞–π—Ç–∞—Ö
    this.qualityRange = { min: 60, max: 90 };
    this.maxWidth = 800;
    this.maxHeight = 800;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WebP –∏ —Å–∂–∏–º–∞–µ—Ç –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
   * @param {string} inputPath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param {string} outputPath - –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   * @returns {Promise<Object>} - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processImage(inputPath, outputPath) {
    try {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${inputPath}`);
      
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const image = sharp(inputPath);
      const metadata = await image.metadata();
      
      console.log(`–ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${metadata.width}x${metadata.height}, —Ñ–æ—Ä–º–∞—Ç: ${metadata.format}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      const { width, height } = this.calculateDimensions(metadata.width, metadata.height);
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º
      let quality = this.qualityRange.max;
      let processedBuffer;
      let fileSize;
      
      do {
        processedBuffer = await image
          .resize(width, height, {
            fit: 'inside',
            withoutEnlargement: true
          })
          .webp({ 
            quality: quality,
            effort: 6, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            nearLossless: false
          })
          .toBuffer();
        
        fileSize = processedBuffer.length;
        console.log(`–ö–∞—á–µ—Å—Ç–≤–æ: ${quality}%, —Ä–∞–∑–º–µ—Ä: ${(fileSize / 1024).toFixed(1)}KB`);
        
        // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if (fileSize > this.maxFileSize && quality > this.qualityRange.min) {
          quality -= 5;
        }
        
      } while (fileSize > this.maxFileSize && quality > this.qualityRange.min);
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
      if (fileSize > this.maxFileSize) {
        console.log('–§–∞–π–ª –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã...');
        const scaleFactor = Math.sqrt(this.maxFileSize / fileSize);
        const newWidth = Math.round(width * scaleFactor);
        const newHeight = Math.round(height * scaleFactor);
        
        processedBuffer = await image
          .resize(newWidth, newHeight, {
            fit: 'inside',
            withoutEnlargement: true
          })
          .webp({ 
            quality: this.qualityRange.min,
            effort: 6
          })
          .toBuffer();
        
        fileSize = processedBuffer.length;
        console.log(`–ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: ${newWidth}x${newHeight}, —Ä–∞–∑–º–µ—Ä: ${(fileSize / 1024).toFixed(1)}KB`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      await fs.promises.writeFile(outputPath, processedBuffer);
      
      const result = {
        success: true,
        originalSize: metadata.size || 0,
        processedSize: fileSize,
        compressionRatio: metadata.size ? ((metadata.size - fileSize) / metadata.size * 100).toFixed(1) : 0,
        dimensions: {
          original: { width: metadata.width, height: metadata.height },
          processed: { width, height }
        },
        format: 'webp',
        quality: quality
      };
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${(fileSize / 1024).toFixed(1)}KB (—Å–∂–∞—Ç–∏–µ: ${result.compressionRatio}%)`);
      console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: ${path.basename(outputPath)}`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${inputPath}:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
   */
  calculateDimensions(originalWidth, originalHeight) {
    const aspectRatio = originalWidth / originalHeight;
    
    let width = originalWidth;
    let height = originalHeight;
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ
    if (width > this.maxWidth || height > this.maxHeight) {
      if (width > height) {
        width = this.maxWidth;
        height = Math.round(width / aspectRatio);
      } else {
        height = this.maxHeight;
        width = Math.round(height * aspectRatio);
      }
    }
    
    return { width, height };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
   */
  async processMultipleImages(files) {
    const results = [];
    
    for (const file of files) {
      const inputPath = file.path;
      const outputPath = inputPath.replace(/\.[^.]+$/, '.webp');
      
      const result = await this.processImage(inputPath, outputPath);
      
      if (result.success) {
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        await fs.promises.unlink(inputPath);
        
        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        const newFilename = path.basename(inputPath).replace(/\.[^.]+$/, '.webp');
        const newPath = path.join(path.dirname(inputPath), newFilename);
        await fs.promises.rename(outputPath, newPath);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file.filename = newFilename;
        file.path = newPath;
        file.mimetype = 'image/webp';
        
        console.log(`üîÑ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${path.basename(inputPath)} -> ${newFilename}`);
      }
      
      results.push({
        originalName: file.originalname,
        processedName: file.filename,
        ...result
      });
    }
    
    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
   */
  isImageFile(filename) {
    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp'];
    const ext = path.extname(filename).toLowerCase();
    return imageExtensions.includes(ext);
  }
}

module.exports = ImageProcessor; 