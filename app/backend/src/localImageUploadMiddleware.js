const LocalImageHandler = require('./localImageHandler');

class LocalImageUploadMiddleware {
  constructor() {
    this.imageHandler = new LocalImageHandler();
  }

  /**
   * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
   */
  async processUploadedFiles(req, res, next) {
    try {
      console.log('üñºÔ∏è LocalImageUploadMiddleware: processUploadedFiles –≤—ã–∑–≤–∞–Ω');
      console.log('üñºÔ∏è LocalImageUploadMiddleware: req.files =', req.files ? req.files.length : 'undefined');
      
      if (!req.files || req.files.length === 0) {
        console.log('üñºÔ∏è LocalImageUploadMiddleware: –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return next();
      }

      console.log(`üñºÔ∏è LocalImageUploadMiddleware: –û–±—Ä–∞–±–æ—Ç–∫–∞ ${req.files.length} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
      const sizeErrors = this.imageHandler.checkFileSizes(req.files);
      if (sizeErrors.length > 0) {
        return res.status(400).json({ 
          error: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞', 
          details: sizeErrors 
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const results = await this.imageHandler.processMultipleImages(req.files);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
      const imageUrls = [];
      const processedFiles = [];
      const hdImageInfo = [];

      for (const result of results) {
        if (result.success) {
          const fileInfo = {
            filename: result.filename,
            originalName: result.originalName || 'unknown',
            size: result.processedSize,
            mimetype: result.mimetype,
            url: result.url,
            originalSize: result.originalSize,
            compressionRatio: result.compressionRatio
          };
          
          processedFiles.push(fileInfo);
          imageUrls.push(result.url);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HD-–≤–µ—Ä—Å–∏—è—Ö
          if (result.hdVersions && Object.keys(result.hdVersions).length > 0) {
            hdImageInfo.push({
              original: result.url,
              hdVersions: result.hdVersions
            });
          }
          
          console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.filename} -> ${result.url}`);
          if (result.hdVersions) {
            console.log(`   HD-–≤–µ—Ä—Å–∏–∏: ${Object.keys(result.hdVersions).join(', ')}`);
          }
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.originalName} - ${result.error}`);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ request
      req.imageUrls = imageUrls;
      req.processedFiles = processedFiles;
      req.hdImageInfo = hdImageInfo;

      console.log(`‚úÖ LocalImageUploadMiddleware: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${imageUrls.length} —Ñ–∞–π–ª–æ–≤`);
      console.log(`   HD-–≤–µ—Ä—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${hdImageInfo.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      next();

    } catch (error) {
      console.error('‚ùå LocalImageUploadMiddleware error:', error);
      res.status(500).json({ 
        error: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å', 
        details: error.message 
      });
    }
  }

  /**
   * Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
   */
  async deleteOldImages(req, res, next) {
    try {
      const { oldImageUrls } = req.body;
      
      if (!oldImageUrls || !Array.isArray(oldImageUrls)) {
        return next();
      }

      console.log(`üóëÔ∏è LocalImageUploadMiddleware: –£–¥–∞–ª–µ–Ω–∏–µ ${oldImageUrls.length} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);

      const deletePromises = oldImageUrls.map(async (imageUrl) => {
        return await this.imageHandler.deleteImage(imageUrl);
      });

      const results = await Promise.all(deletePromises);
      const successCount = results.filter(r => r.success).length;
      
      console.log(`‚úÖ LocalImageUploadMiddleware: –£–¥–∞–ª–µ–Ω–æ ${successCount}/${oldImageUrls.length} —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      next();

    } catch (error) {
      console.error('‚ùå LocalImageUploadMiddleware deleteOldImages error:', error);
      next(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    }
  }

  /**
   * Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HD-–≤–µ—Ä—Å–∏—è—Ö
   */
  async getHdImageInfo(req, res, next) {
    try {
      const { imageUrl } = req.params;
      
      if (!imageUrl) {
        return res.status(400).json({ error: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' });
      }

      const hdInfo = await this.imageHandler.getHdImageInfo(imageUrl);
      
      if (hdInfo) {
        res.json({
          success: true,
          data: hdInfo
        });
      } else {
        res.status(404).json({
          success: false,
          error: 'HD-–≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        });
      }

    } catch (error) {
      console.error('‚ùå LocalImageUploadMiddleware getHdImageInfo error:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HD-–≤–µ—Ä—Å–∏—è—Ö'
      });
    }
  }

  /**
   * Middleware –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HD-–≤–µ—Ä—Å–∏—è—Ö
   */
  async getBulkHdImageInfo(req, res, next) {
    try {
      const { imageUrls } = req.body;
      
      if (!imageUrls || !Array.isArray(imageUrls)) {
        return res.status(400).json({ error: '–°–ø–∏—Å–æ–∫ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω' });
      }

      const hdInfoPromises = imageUrls.map(async (imageUrl) => {
        const info = await this.imageHandler.getHdImageInfo(imageUrl);
        return {
          original: imageUrl,
          hdInfo: info
        };
      });

      const results = await Promise.all(hdInfoPromises);
      
      res.json({
        success: true,
        data: results
      });

    } catch (error) {
      console.error('‚ùå LocalImageUploadMiddleware getBulkHdImageInfo error:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HD-–≤–µ—Ä—Å–∏—è—Ö'
      });
    }
  }

  /**
   * Middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö HD-–≤–µ—Ä—Å–∏–π
   */
  async cleanupUnusedHdVersions(req, res, next) {
    try {
      console.log('üßπ LocalImageUploadMiddleware: –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö HD-–≤–µ—Ä—Å–∏–π...');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è HD-–≤–µ—Ä—Å–∏–π,
      // –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      
      res.json({
        success: true,
        message: '–û—á–∏—Å—Ç–∫–∞ HD-–≤–µ—Ä—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
      });

    } catch (error) {
      console.error('‚ùå LocalImageUploadMiddleware cleanupUnusedHdVersions error:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ HD-–≤–µ—Ä—Å–∏–π'
      });
    }
  }
}

module.exports = LocalImageUploadMiddleware;
