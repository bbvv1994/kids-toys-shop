const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

async function safeUpdate() {
  console.log('üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET', 'NODE_ENV'];
  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envVar}`);
      process.exit(1);
    }
  }
  console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const productsBefore = await prisma.product.count();
    const categoriesBefore = await prisma.category.count();
    const questionsBefore = await prisma.productQuestion.count();
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${productsBefore}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesBefore}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${questionsBefore}`);
    
    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
  console.log('\nüìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
  try {
    execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    process.exit(1);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
  console.log('\nüî® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma Client...');
  try {
    execSync('npx prisma generate', { stdio: 'inherit' });
    console.log('‚úÖ Prisma Client —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Prisma Client:', error.message);
    // –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É ProductQuestion
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion...');
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const questions = await prisma.productQuestion.findMany();
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ProductQuestion —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${questions.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const sampleQuestion = await prisma.productQuestion.findFirst();
    if (sampleQuestion) {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion:');
      console.log(`   - id: ${typeof sampleQuestion.id}`);
      console.log(`   - productId: ${typeof sampleQuestion.productId}`);
      console.log(`   - userId: ${typeof sampleQuestion.userId}`);
      console.log(`   - question: ${typeof sampleQuestion.question}`);
      console.log(`   - answer: ${typeof sampleQuestion.answer}`);
      console.log(`   - status: ${typeof sampleQuestion.status}`);
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ProductQuestion:', error.message);
    console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ProductQuestion –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    try {
      execSync('npx prisma migrate reset --force', { stdio: 'inherit' });
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∑–∞–Ω–æ–≤–æ');
    } catch (resetError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', resetError.message);
      process.exit(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    const productsAfter = await prisma.product.count();
    const categoriesAfter = await prisma.category.count();
    const questionsAfter = await prisma.productQuestion.count();
    
    console.log(`üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`   - –¢–æ–≤–∞—Ä—ã: ${productsAfter}`);
    console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoriesAfter}`);
    console.log(`   - –í–æ–ø—Ä–æ—Å—ã: ${questionsAfter}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
    if (productsAfter === 0) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Ç–µ—Ä—è–Ω—ã!');
      process.exit(1);
    }
    
    if (productsAfter < productsBefore) {
      console.warn(`‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å —Å ${productsBefore} –¥–æ ${productsAfter}`);
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error.message);
    process.exit(1);
  }

  console.log('\nüéâ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
  console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤–∫–ª–∞–¥–∫–∏ "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã"');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
safeUpdate().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}); 