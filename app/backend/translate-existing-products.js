const { PrismaClient } = require('@prisma/client');
const TranslationService = require('./src/services/translationService');

const prisma = new PrismaClient();

async function translateExistingProducts() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const products = await prisma.product.findMany({
      where: {
        OR: [
          { nameHe: null },
          { descriptionHe: null }
        ],
        isHidden: false
      },
      select: {
        id: true,
        name: true,
        description: true,
        nameHe: true,
        descriptionHe: true
      }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);

    let translatedCount = 0;
    let errorCount = 0;

    for (const product of products) {
      try {
        console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ID ${product.id}: "${product.name}"`);
        
        let nameHe = product.nameHe;
        let descriptionHe = product.descriptionHe;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!nameHe && product.name) {
          console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ: "${product.name}"`);
          nameHe = await TranslationService.translateText(product.name, 'ru', 'iw');
          console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: "${nameHe}"`);
        }

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!descriptionHe && product.description) {
          console.log(`üåê –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ: "${product.description}"`);
          descriptionHe = await TranslationService.translateText(product.description, 'ru', 'iw');
          console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: "${descriptionHe}"`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        await prisma.product.update({
          where: { id: product.id },
          data: {
            nameHe: nameHe || null,
            descriptionHe: descriptionHe || null
          }
        });

        translatedCount++;
        console.log(`‚úÖ –¢–æ–≤–∞—Ä ${product.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüèÅ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ç–æ–≤–∞—Ä–æ–≤`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

translateExistingProducts();
